{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction","text":""},{"location":"index.html#bugfish-framework","title":"Bugfish Framework","text":""},{"location":"index.html#documentation","title":"Documentation","text":"<p>Introducing the Bugfish PHP Framework: a robust toolkit designed to empower web developers with extensive functionality, flexibility, and top-notch security standards. With Bugfish, you gain access to a suite of classes and functions that not only streamline development but also enhance performance, ensuring your web applications operate at peak efficiency. Join the Bugfish PHP Framework community today and unleash the full potential of your web development projects.</p> <p>Feel free to support this project by adding this banner to the project where you are using our framework!</p> <p></p> <p>I wish you the best. Bugfish</p>"},{"location":"index.html#php-functions","title":"PHP Functions","text":"<p>Discover a collection of indispensable PHP functions crafted for seamless integration across various projects. Witness how these functions expedite and refine coding processes within web development. Comprehensive documentation for each function is provided below. To incorporate these functions seamlessly, include the PHP files within the designated <code>_functions</code> subfolder in the overarching <code>_framework</code> folder. This strategic approach optimizes coding efficiency and enhances web project performance.</p> Name License PHP Function Library GPLv3"},{"location":"index.html#php-classes","title":"PHP Classes","text":"<p>These classes, located in <code>/_framework/classes/x_*</code>, are crucial for their functionality, efficiency, and thorough testing across various websites. They enhance development and save time. </p> <p>Note: Some classes require a database connection. They will install necessary tables automatically if configured correctly. Not all classes require MySQL; refer to the documentation for specific requirements. If MySQL is needed, provide a valid <code>x_class_mysql</code> object to the class.</p> Name Description License x_class_2fa The TwoFactorAuthenticator class in PHP generates and verifies Time-Based One-Time Password (TOTP) codes for two-factor authentication (2FA). It offers methods for generating random secret keys, creating 2FA codes, and validating them, enhancing security in PHP applications. GPLv3 x_class_api Facilitates the creation of simple and secure API requests. This class needs PHP Module CURL to work properly. It supports token-authentication on API Requests and more. GPLv3 x_class_benchmark Lets you benchmark resource consumption for sites on your website. PHP values related to benchmarking will be saved in a database per URL and overwritten if the URL is refreshed to monitor consumption even after changes. GPLv3 x_class_block Facilitates session-based user counting and block operations. Easily block users from various areas if they make bad decisions and raise their counter. GPLv3 x_class_comment Enables commenting functionality, suitable for guestbooks or website comment sections. Can also act as a simple chat or logging tool. GPLv3 x_class_csrf Provides robust CSRF protection for web forms, supporting external actions. Includes functions to control everything related to CSRF keys, saving you time and adding basic security to your website. GPLv3 x_class_curl Efficiently handles Curl requests and logs them for web operations. This class makes it easier to build PHP Curl requests. PHP Module CURL is needed to run this class. GPLv3 x_class_crypt Provides file and string encryption capabilities. Encrypt and decrypt strings/files using a simple encryption method. GPLv3 x_class_debug Aids in debugging and offers development notifications and functions. Check if PHP modules are enabled or get benchmarks for your website. GPLv3 x_class_eventbox Simplifies the display of user notifications and messages on a web page. GPLv3 x_class_hitcounter Counts website visitors per page URL with configurable options to handle various cases. GPLv3 x_class_ipbl Implements IP blacklisting. Allows you to raise counters for IPs and block certain areas if an IP is acting suspiciously. Can help prevent brute-force attacks if implemented correctly. GPLv3 x_class_log Provides a class for logging operations, allowing you to make log entries for almost every possibility. GPLv3 x_class_lang Manages language translation for multi-language websites with functions and parameters for adding and managing translation keys. GPLv3 x_class_mail Handles mail sending operations with a subclass for sending operation items. Depends on <code>x_class_phpmailer</code>. GPLv3 x_class_mail_item Together with x_class_mail simplifies single object transmissions. Depends on <code>x_class_phpmailer</code>. GPLv3 x_class_mail_template Creates mail templates with substitutions and footer/header options, compatible with <code>x_class_mail</code>. Simplifies the preparation of email templates. GPLv3 x_class_mysql Provides MySQL database handling capabilities with additional features. Most classes need an <code>x_class_mysql</code> object to run properly. Includes a database logging system to store errors and more. GPLv3 x_class_mysql_item Provides MySQL database handling capabilities for single database table elements. GPLv3 x_class_phpmailer Manages email sending operations within the framework. Note: This class is from PHPMailer, not created by Bugfish. LGPL-2.1 x_class_perm Controls user permissions and management functionalities. Ideal for implementing a permission system. GPLv3 x_class_perm_item Controls user permissions, including single-item permission objects. Ideal for implementing a permission system. GPLv3 x_class_referer Logs visitor referrers with configuration functions to control how referrers are saved in the database. GPLv3 x_class_redis Offers control over Redis functionality. Caches content on a Redis server to improve website speed. Requires PHP Module REDIS. GPLv3 x_class_table Simplifies the creation of dynamic HTML tables with PHP editing capabilities. GPLv3 x_class_user Creates various types of user logins with full functionality for password recovery, mail editing, and token operations. A comprehensive login/authentication and token system. GPLv3 x_class_var Controls setup variables for websites and includes a function for creating forms to change these values. Ideal for managing constants. GPLv3 x_class_zip Enables file compression and decompression, compatible with <code>x_class_crypt</code> for direct encryption and decryption. Requires PHP Module ZIP. GPLv3 x_class_version Retrieves version and author information about the currently included framework. GPLv3"},{"location":"index.html#css-classes","title":"CSS Classes","text":"<p>Introducing the \"Bugfish CSS Framework\" \u2013 a solution for efficient web design. Simplify your development process with a comprehensive collection of pre-built classes designed to expedite the creation of responsive web layouts. To use it, include the CSS files located in the <code>css</code> folder.</p> Name License CSS Classes Library GPLv3"},{"location":"index.html#javascript-functions","title":"JavaScript Functions","text":"<p>Access a comprehensive array of JavaScript functions designed for integration across diverse projects, enhancing coding speed and efficiency in web development. Detailed documentation for each function is provided below. To incorporate these functions, include the JavaScript file in the <code>_javascript</code> subfolder within the central <code>_framework</code> folder. This implementation optimizes your coding process and elevates your web project's performance.</p> <p>Find the JavaScript function file in: <code>/_framework/javascript/*.js</code></p> Name License JavaScript Function Library GPLv3"},{"location":"download.html","title":"Download","text":""},{"location":"download.html#download","title":"Download","text":"<p>This page provides access to view the GitHub repository and download the latest file from the repository.</p>"},{"location":"download.html#view-the-github-repository","title":"View the GitHub Repository","text":"<p>You can explore the code and files in the GitHub repository by clicking the link below:</p> <p>View GitHub Repository</p>"},{"location":"download.html#download-the-latest-file","title":"Download the Latest File","text":"<p>To download the latest file from the repository directory, click the link below:</p> <p>Download Latest Release</p>"},{"location":"license.html","title":"License","text":""},{"location":"license.html#gnu-general-public-license","title":"GNU General Public License","text":"<p>Version 3, 29 June 2007 Copyright \u00a9 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"license.html#preamble","title":"Preamble","text":"<p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.</p> <p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p> <p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p> <p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p> <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"license.html#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"license.html#0-definitions","title":"0. Definitions","text":"<p>\u201cThis License\u201d refers to version 3 of the GNU General Public License.</p> <p>\u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations.</p> <p>To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work.</p> <p>A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program.</p> <p>To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"license.html#1-source-code","title":"1. Source Code","text":"<p>The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work.</p> <p>A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"license.html#2-basic-permissions","title":"2. Basic Permissions","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"license.html#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"license.html#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"license.html#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d.</li> <li>c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"license.html#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"license.html#7-additional-terms","title":"7. Additional Terms","text":"<p>\u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"license.html#8-termination","title":"8. Termination","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"license.html#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"license.html#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"license.html#11-patents","title":"11. Patents","text":"<p>A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \u201ccontributor version\u201d.</p> <p>A contributor's \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"license.html#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"license.html#13-use-with-the-gnu-affero-general-public-license","title":"13. Use with the GNU Affero General Public License","text":"<p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p>"},{"location":"license.html#14-revised-versions-of-this-license","title":"14. Revised Versions of this License","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"license.html#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"license.html#16-limitation-of-liability","title":"16. Limitation of Liability","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"license.html#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"license.html#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>&lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\nThis program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type 'show c' for details.\n</code></pre> <p>The hypothetical commands <code>show w</code> and <code>show c</code> should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \u201cabout box\u201d.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see &lt;http://www.gnu.org/licenses/&gt;.</p> <p>The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read &lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.</p>"},{"location":"support.html","title":"Support","text":""},{"location":"support.html#support","title":"Support","text":"<p>If you need assistance or have questions, you can reach out through any of the following support channels:</p>"},{"location":"support.html#forum","title":"Forum","text":"<p>For community-driven support and discussions, visit our Forum. Here, you can ask questions, share information, and get help from other users.</p>"},{"location":"support.html#github-issues","title":"GitHub Issues","text":"<p>For technical issues or to request new features, please use the GitHub Issues Page associated with this project. You can find the link in the Downloads section or the topbar of our site.</p>"},{"location":"support.html#email","title":"Email","text":"<p>For direct support or if you prefer to communicate via email, please send your inquiries to requests@bugfish.eu.</p>"},{"location":"classes/x_class_2fa.html","title":"PHP 2FA","text":""},{"location":"classes/x_class_2fa.html#class-documentation-x_class_2fa","title":"Class Documentation: <code>x_class_2fa</code>","text":""},{"location":"classes/x_class_2fa.html#documentation","title":"Documentation","text":"<p>The <code>x_class_2fa</code> class provides functionality for two-factor authentication (2FA). It generates and verifies time-based one-time passwords (TOTPs) using a secret key. This class is useful for implementing secure 2FA in applications to enhance user security. This class provides methods to generate and verify time-based one-time passwords (TOTPs) for two-factor authentication. It uses a shared secret key and generates a new code based on the current time, which is valid for a short period (30 seconds by default).</p> <ul> <li>Time-based Code: The generated code is based on the current time and is valid for a short period (30 seconds). Ensure that your server\u2019s time is accurate to avoid synchronization issues.</li> <li>Base64 Encoding: The secret key is expected to be base64-encoded. Ensure that the key used for verification is properly encoded and decoded.</li> <li>Code Length: The length of the generated code can be adjusted by setting the <code>$codeLength</code> parameter in the constructor. The default length is 6 digits.</li> </ul>"},{"location":"classes/x_class_2fa.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_2fa.html#php-modules","title":"PHP Modules","text":"<ul> <li><code>session</code>: Required if you plan to use sessions with 2FA. Ensure session support is enabled in your PHP configuration.  </li> <li><code>hashing</code>: Required for cryptographic functions used in generating and verifying codes. Typically, PHP\u2019s default installation includes this.</li> </ul>"},{"location":"classes/x_class_2fa.html#external-classes","title":"External Classes","text":"<p>This class does not depend on any external classes.</p>"},{"location":"classes/x_class_2fa.html#properties","title":"Properties","text":"Property Type Description <code>secretKey</code> string The base64-encoded secret key used for generating and verifying 2FA codes. <code>codeLength</code> int The length of the generated 2FA codes (default is 6)."},{"location":"classes/x_class_2fa.html#methods","title":"Methods","text":""},{"location":"classes/x_class_2fa.html#__construct","title":"<code>__construct(...)</code>","text":"Parameter Type Description <code>$secretKey</code> string The base64-encoded secret key used for generating and verifying 2FA codes. <code>$codeLength</code> int Optional. The length of the generated 2FA codes (default is 6). <ul> <li>Description: Initializes the <code>x_class_2fa</code> object with a secret key and an optional code length. Sets up the properties for generating and verifying 2FA codes.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_2fa.html#generatesecretkey","title":"<code>generateSecretKey(...)</code>","text":"Parameter Type Description <code>$length</code> int Optional. The length of the generated secret key in bytes (default is 16). <ul> <li>Description: Generates a random secret key of the specified length. The key is encoded in base64 format.</li> <li>Returns: A base64-encoded string representing the generated secret key.</li> </ul>"},{"location":"classes/x_class_2fa.html#generatecode","title":"<code>generateCode(...)</code>","text":"Parameter Type Description None None Generates a time-based one-time password (TOTP). <ul> <li>Description: Generates a 2FA code based on the current time. The code is valid for 30 seconds and is derived from the secret key and the current timestamp.</li> <li>Returns: A string representing the generated 2FA code, padded to the specified length.</li> </ul>"},{"location":"classes/x_class_2fa.html#verifycode","title":"<code>verifyCode(...)</code>","text":"Parameter Type Description <code>$code</code> string The 2FA code to verify. <ul> <li>Description: Verifies the provided 2FA code by comparing it with the generated code. The method returns <code>true</code> if the code matches the generated code, otherwise <code>false</code>.</li> <li>Returns: <code>true</code> if the provided code matches the generated code; <code>false</code> otherwise.</li> </ul>"},{"location":"classes/x_class_api.html","title":"PHP API","text":""},{"location":"classes/x_class_api.html#class-documentation-x_class_api","title":"Class Documentation: <code>x_class_api</code>","text":""},{"location":"classes/x_class_api.html#documentation","title":"Documentation","text":"<p>The <code>x_class_api</code> class provides methods for handling API requests, managing API tokens (both incoming and outgoing), and interfacing with a MySQL database to store and verify token information. This class is useful for building secure API interactions, handling token-based authentication, and executing HTTP requests with token authentication.</p> <ul> <li>Token Management: The class provides robust methods for managing both incoming and outgoing API tokens, allowing for automated token generation, verification, and deletion.</li> <li>Request Handling: The <code>request()</code> method is versatile, handling various payload types and ensuring secure communication with external APIs using token authentication.</li> </ul>"},{"location":"classes/x_class_api.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_api.html#php-modules","title":"PHP Modules","text":"<ul> <li><code>MySQLi</code>: Required for database operations.</li> <li><code>cURL</code>: Required for making HTTP requests.</li> </ul>"},{"location":"classes/x_class_api.html#external-classes","title":"External Classes","text":"<ul> <li><code>x_class_mysql</code>: Required for Logging purposes if activated.</li> </ul>"},{"location":"classes/x_class_api.html#table-structure","title":"Table Structure","text":"<p>This section describes the structure of the database table that the class automatically creates when required to log API tokens. The table stores details about each API token, including its type, value, and usage metadata.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(9)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each record in the table. <code>direction</code> <code>varchar(12)</code> <code>NOT NULL</code> Indicates the type or direction of the token (e.g., \"incoming\", \"outgoing\"). <code>api_token</code> <code>varchar(512)</code> <code>NOT NULL</code> The actual API token used for requests. This is stored securely and used for authentication. <code>section</code> <code>varchar(128)</code> <code>NOT NULL</code> For Multi Site Purposes to split database data in categories. <code>last_use</code> <code>datetime</code> <code>NULL</code> The timestamp of when the token was last used. This is updated whenever the token is validated or utilized. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The timestamp of when the record was created. This value is automatically set when a new record is inserted. <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> The timestamp of when the record was last modified. This value is automatically updated whenever the record is changed. <code>x_class_api</code> <code>UNIQUE KEY</code> <code>direction</code>, <code>api_token</code>, <code>section</code> using <code>BTREE</code> A unique index that ensures no duplicate entries exist with the same <code>direction</code>, <code>api_token</code>, and <code>section</code>. This prevents duplicate tokens."},{"location":"classes/x_class_api.html#class-usage","title":"Class Usage","text":""},{"location":"classes/x_class_api.html#method-library","title":"Method Library","text":"Method Description <code>__construct($x_class_mysql, $table, $section = \"\")</code> Initializes the class with a x_class_mysql object, table name, and an optional section name. <code>request($url, $payload, $token = false, $section = false)</code> Sends an HTTP POST request to the specified URL with token and payload. <code>token_add_incoming($token, $section = false)</code> Adds an incoming API token to the database. <code>token_add_outgoing($token, $section = false)</code> Adds an outgoing API token to the database. <code>token_generate_incoming($section = false, $len = 32, $comb = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890')</code> Generates and stores a new incoming API token. <code>token_delete_incoming($token, $section = false)</code> Deletes an incoming API token from the database. <code>token_delete_outgoing($token, $section = false)</code> Deletes an outgoing API token from the database. <code>token_check_incoming($token, $section = false)</code> Verifies if an incoming API token exists and updates its last use timestamp."},{"location":"classes/x_class_api.html#method-details","title":"Method Details","text":""},{"location":"classes/x_class_api.html#__construct","title":"<code>__construct(...)</code>","text":"Parameter Type Default Description <code>$mysql</code> Object MySQLi connection object. <code>$table</code> String The name of the table to store API tokens. <code>$section</code> String <code>\"\"</code> Optional section name to categorize tokens. <p>Description: Initializes the <code>x_class_api</code> object, sets up the database connection, and creates the API token table if it does not exist. The optional <code>$section</code> parameter allows categorizing tokens under different sections.</p>"},{"location":"classes/x_class_api.html#request","title":"<code>request(...)</code>","text":"Parameter Type Default Description <code>$url</code> String The URL to send the HTTP POST request to. <code>$payload</code> String/Array The data to send in the request body. <code>$token</code> String/Bool <code>false</code> The API token for authentication (optional). <code>$section</code> String/Bool <code>false</code> The section name to filter the token (optional). Return Type Description String Returns the result of the HTTP POST request. <p>Description: Sends an HTTP POST request to the specified URL with the given payload. If no token is provided, the method attempts to fetch one from the database based on the section. The payload can be a string, numeric, array, or object. If the request is successful, it returns the server's response.</p> <p>Special Considerations: - If the payload is an array or object, it is serialized before sending. - Handles cURL operations with timeouts and SSL settings.</p>"},{"location":"classes/x_class_api.html#token_add_incoming","title":"<code>token_add_incoming(...)</code>","text":"Parameter Type Default Description <code>$token</code> String The incoming API token to store. <code>$section</code> String <code>false</code> The section name under which to store the token. Return Type Description Bool Returns <code>true</code> on success, <code>false</code> on failure. <p>Description: Stores a new incoming API token in the database, categorized by section if provided.</p>"},{"location":"classes/x_class_api.html#token_add_outgoing","title":"<code>token_add_outgoing(...)</code>","text":"Parameter Type Default Description <code>$token</code> String The outgoing API token to store. <code>$section</code> String <code>false</code> The section name under which to store the token. Return Type Description Bool Returns <code>true</code> on success, <code>false</code> on failure. <p>Description: Stores a new outgoing API token in the database, categorized by section if provided.</p>"},{"location":"classes/x_class_api.html#token_generate_incoming","title":"<code>token_generate_incoming(...)</code>","text":"Parameter Type Default Description <code>$section</code> String <code>false</code> The section name under which to store the token. <code>$len</code> Integer <code>32</code> Length of the generated token. <code>$comb</code> String <code>'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'</code> Characters used to generate the token. Return Type Description String Returns the generated API token. <p>Description: Generates a random API token and stores it in the database as an incoming token. The token is created using the specified character set and length.</p>"},{"location":"classes/x_class_api.html#token_delete_incoming","title":"<code>token_delete_incoming(...)</code>","text":"Parameter Type Default Description <code>$token</code> String The incoming API token to delete. <code>$section</code> String <code>false</code> The section under which the token is stored. Return Type Description Bool Returns <code>true</code> on success, <code>false</code> on failure. <p>Description: Deletes an incoming API token from the database based on the token value and section.</p>"},{"location":"classes/x_class_api.html#token_delete_outgoing","title":"<code>token_delete_outgoing(...)</code>","text":"Parameter Type Default Description <code>$token</code> String The outgoing API token to delete. <code>$section</code> String <code>false</code> The section under which the token is stored. Return Type Description Bool Returns <code>true</code> on success, <code>false</code> on failure. <p>Description: Deletes an outgoing API token from the database based on the token value and section.</p>"},{"location":"classes/x_class_api.html#token_check_incoming","title":"<code>token_check_incoming(...)</code>","text":"Parameter Type Default Description <code>$token</code> String The incoming API token to verify. <code>$section</code> String <code>false</code> The section under which the token is stored. Return Type Description Bool Returns <code>true</code> if the token is valid, <code>false</code> otherwise. <p>Description: Verifies if an incoming API token exists in the database and updates its <code>last_use</code> timestamp if valid.</p>"},{"location":"classes/x_class_benchmark.html","title":"PHP Benchmark","text":""},{"location":"classes/x_class_benchmark.html#class-documentation-x_class_benchmark","title":"Class Documentation: <code>x_class_benchmark</code>","text":""},{"location":"classes/x_class_benchmark.html#documentation","title":"Documentation","text":"<p>The <code>x_class_benchmark</code> class is designed for benchmarking various aspects of a web application's performance, such as load time, memory usage, and query count. It stores these metrics in a MySQL database for later analysis. The class also allows you to filter records by section and URL path.</p> <ul> <li>Table Initialization: The <code>create_table()</code> method ensures that the necessary table structure is created in the database, with columns for storing performance metrics and other relevant data.</li> <li>URL Preparation: The <code>prepareUrl()</code> method sanitizes and formats the URL path for consistent storage.</li> </ul> <p>The class assumes that the MySQL connection object and <code>x_class_debug</code> instance are correctly implemented. Ensure proper error handling and logging are in place for production environments.</p>"},{"location":"classes/x_class_benchmark.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_benchmark.html#php-modules","title":"PHP Modules","text":"<ul> <li><code>MySQLi</code>: Required for database operations.</li> </ul>"},{"location":"classes/x_class_benchmark.html#external-classes","title":"External Classes","text":"<ul> <li>x_class_debug: This class should be implemented separately to provide performance metrics.</li> <li>x_class_mysql: Required for Database Logging Operations.</li> </ul>"},{"location":"classes/x_class_benchmark.html#table-structure","title":"Table Structure","text":"<p>This section describes the structure of the database table that the class automatically creates to log benchmarking data. This table tracks various performance metrics such as site loading time, memory usage, and query counts. The table will be automatically installed by the class when required by its functionality.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each record in the table. <code>full_url</code> <code>varchar(512)</code> <code>NOT NULL</code>, <code>DEFAULT '0'</code>, <code>UNIQUE KEY</code> The full URL of the related domain or resource being benchmarked. This is the primary reference. <code>value_time</code> <code>varchar(64)</code> <code>DEFAULT '0'</code> The site loading time, representing the duration it took for the site to load during the benchmark. <code>value_memory</code> <code>varchar(64)</code> <code>DEFAULT '0'</code> The amount of memory used during the site loading process, measured during the benchmark. <code>value_load</code> <code>varchar(64)</code> <code>DEFAULT '0'</code> The overall load time for the site, which may include additional performance metrics. <code>value_queries</code> <code>varchar(64)</code> <code>DEFAULT '0'</code> The number of database queries executed during the benchmarked request. <code>section</code> <code>varchar(128)</code> <code>NULL</code>, <code>DEFAULT ''</code> For Multi Site Purposes to split database data in categories. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The timestamp when the record was created. Automatically set when a new record is inserted. <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> The timestamp of the last modification. Automatically updated whenever the record changes. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures each record is uniquely identifiable. <code>UNIQUE KEY</code> Unique <code>full_url</code> Prevents duplicate entries for the same <code>full_url</code>, ensuring each URL is logged only once."},{"location":"classes/x_class_benchmark.html#class-usage","title":"Class Usage","text":""},{"location":"classes/x_class_benchmark.html#method-library","title":"Method Library","text":"Method Description <code>__construct($x_class_mysql, $table, $section = \"\")</code> Initializes the class with a x_class_mysql object, table name, and optional section filter. <code>only200($bool = true)</code> Sets whether to only log metrics for successful HTTP 200 responses. <code>get_array_full()</code> Retrieves all benchmark records from the database. <code>get_array_section($section)</code> Retrieves benchmark records filtered by a specific section. <code>execute($querie_counter = 0)</code> Logs benchmark metrics for the current URL and section."},{"location":"classes/x_class_benchmark.html#method-details","title":"Method Details","text":""},{"location":"classes/x_class_benchmark.html#__construct","title":"<code>__construct(...)</code>","text":"Parameter Type Default Description <code>$thecon</code> Object MySQLi connection object. <code>$table</code> String The name of the table to store benchmark data. <code>$section</code> String <code>\"\"</code> Optional section name to filter records. <p>Description: Initializes the <code>x_class_benchmark</code> object, sets up the database connection, and creates the benchmark table if it does not exist. It also prepares the current URL path for storage and calculates its MD5 hash.</p>"},{"location":"classes/x_class_benchmark.html#only200","title":"<code>only200(...)</code>","text":"Parameter Type Default Description <code>$bool</code> Boolean <code>true</code> Whether to only log metrics for HTTP 200 responses. <p>Description: Sets the flag to determine if only successful (HTTP 200) responses should be logged.</p>"},{"location":"classes/x_class_benchmark.html#get_array_full","title":"<code>get_array_full(...)</code>","text":"Return Type Description Array Returns an array of all benchmark records. <p>Description: Retrieves all benchmark records from the database table.</p>"},{"location":"classes/x_class_benchmark.html#get_array_section","title":"<code>get_array_section(...)</code>","text":"Parameter Type Description <code>$section</code> String The section to filter the benchmark records by. Return Type Description Array Returns an array of benchmark records for the specified section. <p>Description: Retrieves benchmark records filtered by the specified section from the database table.</p>"},{"location":"classes/x_class_benchmark.html#execute","title":"<code>execute(...)</code>","text":"Parameter Type Default Description <code>$querie_counter</code> Integer <code>0</code> The number of queries executed (for logging). <p>Description: Logs benchmarking metrics for the current URL and section. It inserts a new record or updates an existing one with the current metrics such as load time, memory usage, CPU load, and query count. </p> <p>Special Notes: - Metrics are collected using the <code>x_class_debug</code> class, which must provide methods for <code>timer()</code>, <code>memory_usage()</code>, and <code>cpu_load()</code>. - The class checks if the response code is 200 (if <code>only200</code> is set) before logging metrics.</p>"},{"location":"classes/x_class_block.html","title":"PHP Session Blocking","text":""},{"location":"classes/x_class_block.html#class-documentation-x_class_block","title":"Class Documentation: <code>x_class_block</code>","text":""},{"location":"classes/x_class_block.html#documentation","title":"Documentation","text":"<p>The <code>x_class_block</code> class is designed to manage access control based on a counter mechanism. It uses PHP sessions to track and limit actions, blocking further attempts if a predefined limit is exceeded within a specified time frame. This class is useful for implementing rate limiting or blocking mechanisms.</p> <ul> <li>Dummy Mode: When <code>dummy</code> mode is enabled, the class bypasses all blocking logic. This mode is useful for testing purposes or when you want to disable blocking temporarily.  </li> <li>Session Management: The class relies on PHP sessions to store the count and block state. Ensure sessions are properly configured and started to avoid issues with state persistence.  </li> <li>Time Calculation: The <code>block_time</code> is handled in seconds. The block state will be cleared after the specified duration if a time limit is set.  </li> </ul> <p>This class provides functionality to track and block actions based on a counter and a time limit. It uses PHP sessions to store state information, including the current count and block timestamps.</p>"},{"location":"classes/x_class_block.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_block.html#php-modules","title":"PHP Modules","text":"<ul> <li>Session: Required for session management. Ensure session support is enabled in your PHP configuration.</li> </ul>"},{"location":"classes/x_class_block.html#external-classes","title":"External Classes","text":"<ul> <li>None: This class does not depend on any external classes.</li> </ul>"},{"location":"classes/x_class_block.html#class-properties","title":"Class Properties","text":""},{"location":"classes/x_class_block.html#key","title":"<code>key</code>","text":"Property Type Description <code>key</code> string A unique session key for tracking block state."},{"location":"classes/x_class_block.html#dummy","title":"<code>dummy</code>","text":"Property Type Description <code>dummy</code> bool A flag indicating if the class is in dummy mode (for testing or bypassing functionality)."},{"location":"classes/x_class_block.html#maxcount","title":"<code>maxcount</code>","text":"Property Type Description <code>maxcount</code> int The maximum number of attempts allowed before blocking occurs."},{"location":"classes/x_class_block.html#block_time","title":"<code>block_time</code>","text":"Property Type Description <code>block_time</code> int The time (in seconds) for which blocking remains active. If <code>false</code>, blocking is permanent until reset."},{"location":"classes/x_class_block.html#blocked","title":"<code>blocked</code>","text":"Property Type Description <code>blocked</code> bool True if currently blocked, false otherwise."},{"location":"classes/x_class_block.html#class-methods","title":"Class Methods","text":""},{"location":"classes/x_class_block.html#__construct","title":"<code>__construct(...)</code>","text":"Parameter Type Description <code>$pre_key</code> string Prefix for session key to avoid conflicts. <code>$maxcount</code> int The maximum number of attempts allowed. <code>$block_time</code> int Optional. The duration (in seconds) to remain blocked. Defaults to <code>false</code> (no time limit). <code>$dummy</code> bool Optional. If <code>true</code>, the class operates in dummy mode (bypassing actual functionality). Defaults to <code>false</code>. <ul> <li>Description: Initializes the <code>x_class_block</code> object, starts a session if necessary, and sets up the session variables for tracking block state.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_block.html#blocked_1","title":"<code>blocked(...)</code>","text":"Parameter Type Description None None Checks if the current state is blocked based on the count and time limit. <ul> <li> <p>Returns: <code>true</code> if blocked; <code>false</code> otherwise.</p> </li> <li> <p>Description: Determines whether the current action is blocked based on the count and the block time. Updates the <code>blocked</code> property accordingly.</p> </li> </ul>"},{"location":"classes/x_class_block.html#increase","title":"<code>increase(...)</code>","text":"Parameter Type Description <code>$int</code> int The number of attempts to increment (default is <code>1</code>). <ul> <li>Description: Increases the attempt count by the specified amount and checks if the block condition is met.</li> <li>Returns: <code>false</code> if in dummy mode; otherwise, <code>true</code>.</li> </ul>"},{"location":"classes/x_class_block.html#decrease","title":"<code>decrease(...)</code>","text":"Parameter Type Description <code>$int</code> int The number of attempts to decrement (default is <code>1</code>). <ul> <li>Description: Decreases the attempt count by the specified amount and checks if the block condition is met.</li> <li>Returns: <code>true</code> if in normal mode; otherwise, <code>false</code>.</li> </ul>"},{"location":"classes/x_class_block.html#reset","title":"<code>reset(...)</code>","text":"Parameter Type Description None None Resets the attempt count and clears the block state. <ul> <li>Description: Resets the attempt count to zero and clears any block timestamp, effectively removing any active block.</li> <li>Returns: <code>true</code> if in normal mode; otherwise, <code>false</code>.</li> </ul>"},{"location":"classes/x_class_comment.html","title":"PHP Comment","text":""},{"location":"classes/x_class_comment.html#class-documentation-x_class_comment","title":"Class Documentation: <code>x_class_comment</code>","text":""},{"location":"classes/x_class_comment.html#documentation","title":"Documentation","text":"<p>The <code>x_class_comment</code> class is designed to manage a commenting system. It allows users to post comments, upvote comments, and manage the display and storage of comments in a MySQL database. This class integrates with a MySQL database and uses sessions to track user votes.</p> <ul> <li>Session Management: Ensure sessions are started before using the class.</li> <li>Database Table Creation: The class automatically creates a table if it does not exist.</li> <li>Captcha Verification: Validates captcha if provided; otherwise, expects no captcha.</li> </ul> <p>The <code>x_class_comment</code> class is designed to be flexible and integrate easily with various MySQL-backed systems. Ensure that all dependencies are met and that the MySQL wrapper class methods (<code>query</code>, <code>update</code>, etc.) are compatible with the usage in this class.</p>"},{"location":"classes/x_class_comment.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_comment.html#php-modules","title":"PHP Modules","text":"<ul> <li><code>MySQLi</code>: For database interactions.</li> <li><code>Session</code>: For session management.</li> </ul>"},{"location":"classes/x_class_comment.html#external-classes","title":"External Classes","text":"<ul> <li><code>x_class_mysql</code>: External x_class_mysql Object (<code>$mysqlobj</code>).</li> </ul>"},{"location":"classes/x_class_comment.html#table-structure","title":"Table Structure","text":"<p>This section explains the structure of the database table that will be automatically created by the class to log activities. The table captures information such as the target entity, user details, activity text, and status. Below is a summary of the columns and keys used in the table, along with their purposes.</p> Column Name Data Type Attributes Description <code>id</code> <code>int</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each record in the table. <code>target</code> <code>varchar(256)</code> <code>DEFAULT NULL</code> The name of the target entity associated with the activity (e.g., post, user, product). <code>targetid</code> <code>varchar(256)</code> <code>DEFAULT NULL</code> The identifier of the target entity, allowing precise tracking of which entity the activity refers to. <code>name</code> <code>varchar(256)</code> <code>NOT NULL</code> The name of the author who performed the activity. <code>text</code> <code>text</code> <code>NOT NULL</code> The description or content of the activity logged. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The timestamp when the activity was created. This value is automatically set when a new record is added. <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> The timestamp of the last modification. This value is automatically updated whenever the record is changed. <code>status</code> <code>tinyint(1)</code> <code>DEFAULT NULL</code> The status of the activity, represented by numerical codes: 0 for Waiting, 1 for OK, 2 for Internal, 3 for System. <code>upvotes</code> <code>int(9)</code> <code>DEFAULT '0'</code> The number of upvotes received by the activity, useful for assessing its popularity or relevance. <code>section</code> <code>varchar(128)</code> <code>DEFAULT NULL</code> For Multi Site Purposes to split database data in categories. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures each record in the table is uniquely identifiable by its <code>id</code>."},{"location":"classes/x_class_comment.html#methods-and-functions","title":"Methods and Functions","text":""},{"location":"classes/x_class_comment.html#__construct","title":"<code>__construct(...)</code>","text":"Parameter Type Description <code>$x_class_mysql</code> object MySQL database connection object. <code>$table</code> string Name of the table to use for storing comments. <code>$precookie</code> string Prefix for session cookies. <code>$module</code> string Identifier for the module (e.g., blog post ID). <code>$target</code> string Target ID for comments (e.g., article ID). <code>$section</code> string Section identifier (optional). <p>Description: Initializes the class, sets up session management, and checks for table existence. Creates the table if it does not exist.</p>"},{"location":"classes/x_class_comment.html#sys_name","title":"<code>sys_name(...)</code>","text":"Parameter Type Description <code>$name</code> string System name for comments. <p>Description: Sets the system name for the comments.</p>"},{"location":"classes/x_class_comment.html#sys_text","title":"<code>sys_text(...)</code>","text":"Parameter Type Description <code>$text</code> string System initialization text. <p>Description: Sets the default system text.</p>"},{"location":"classes/x_class_comment.html#vote_show","title":"<code>vote_show(...)</code>","text":"<p>Description: Displays the upvote button and current upvote count. Shows a message if the user has already voted.</p>"},{"location":"classes/x_class_comment.html#form_show","title":"<code>form_show(...)</code>","text":"Parameter Type Description <code>$captchaurl</code> string URL to the captcha image. <p>Description: Displays the comment form including fields for name, comment, and captcha.</p>"},{"location":"classes/x_class_comment.html#comment_show","title":"<code>comment_show(...)</code>","text":"Parameter Type Description <code>$hide_system_msg</code> boolean Whether to hide system messages (status = 3). <code>$hide_internal_msg</code> boolean Whether to hide internal messages (status = 2). <code>$hide_confirmed</code> boolean Whether to hide confirmed comments (status = 1). <code>$hide_unconfirmed</code> boolean Whether to hide unconfirmed comments (status = 0). <code>$sorting</code> string SQL sorting clause (default: \" ORDER BY id DESC\"). <p>Description: Displays comments based on the provided filter options. Returns an array of comments.</p>"},{"location":"classes/x_class_comment.html#comment_get","title":"<code>comment_get(...)</code>","text":"Parameter Type Description <code>$hide_system_msg</code> boolean Whether to hide system messages (status = 3). <code>$hide_internal_msg</code> boolean Whether to hide internal messages (status = 2). <code>$hide_confirmed</code> boolean Whether to hide confirmed comments (status = 1). <code>$hide_unconfirmed</code> boolean Whether to hide unconfirmed comments (status = 0). <code>$sorting</code> string SQL sorting clause (default: \" ORDER BY id DESC\"). <p>Description: Retrieves comments based on the filter options. Returns an array of comments.</p>"},{"location":"classes/x_class_comment.html#init","title":"<code>init(...)</code>","text":"Parameter Type Description <code>$captcha_code_if_delivered</code> string The expected captcha code for validation. <p>Description: Initializes the commenting system by checking for system entries, handling votes, and processing new comments. Returns different status codes based on the outcome: - <code>1</code>: System message inserted. - <code>2</code>: Vote registered successfully. - <code>3</code>: Missing fields in the comment form.  - <code>4</code>: Captcha validation error. - <code>5</code>: Comment added successfully.  </p>"},{"location":"classes/x_class_crypt.html","title":"PHP Crypt","text":""},{"location":"classes/x_class_crypt.html#class-documentation-x_class_crypt","title":"Class Documentation: <code>x_class_crypt</code>","text":""},{"location":"classes/x_class_crypt.html#documentation","title":"Documentation","text":"<p>The <code>x_class_crypt</code> class provides encryption and decryption methods using the AES-256-CBC algorithm by default. It allows for secure data handling by encrypting and decrypting data with a specified key.</p>"},{"location":"classes/x_class_crypt.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_crypt.html#php-modules","title":"PHP Modules","text":"<ul> <li><code>openssl</code> (for encryption and decryption)</li> </ul>"},{"location":"classes/x_class_crypt.html#external-classes","title":"External Classes","text":"<ul> <li>None</li> </ul>"},{"location":"classes/x_class_crypt.html#class-methods","title":"Class Methods","text":""},{"location":"classes/x_class_crypt.html#__construct","title":"<code>__construct(...)</code>","text":"<p>Description: Initializes the <code>x_class_crypt</code> object and sets the encryption algorithm. The default algorithm is AES-256-CBC.</p> Parameter Type Description <code>algo</code> <code>string</code> The encryption algorithm to use (e.g., 'aes-256-cbc'). Default is 'aes-256-cbc'. <p>Returns: - <code>void</code></p>"},{"location":"classes/x_class_crypt.html#encrypt","title":"<code>encrypt(...)</code>","text":"<p>Description: Encrypts the provided data using the specified encryption key and algorithm. Returns the encrypted data encoded in Base64.</p> Parameter Type Description <code>data</code> <code>string</code> The data to be encrypted. <code>key</code> <code>string</code> The encryption key, Base64 encoded. <p>Returns: - <code>string</code> - The encrypted data, Base64 encoded, with an appended initialization vector (IV).</p>"},{"location":"classes/x_class_crypt.html#decrypt","title":"<code>decrypt(...)</code>","text":"<p>Description: Decrypts the provided data using the specified encryption key and algorithm. Returns the decrypted data.</p> Parameter Type Description <code>data</code> <code>string</code> The encrypted data, Base64 encoded, with an appended IV. <code>key</code> <code>string</code> The decryption key, Base64 encoded. <p>Returns: - <code>string</code> - The decrypted data.</p>"},{"location":"classes/x_class_crypt.html#method-examples","title":"Method Examples","text":""},{"location":"classes/x_class_crypt.html#__construct_1","title":"<code>__construct()</code>","text":"<p>Initializes the <code>x_class_crypt</code> instance with a specified encryption algorithm.</p> <p>Example Usage: </p><pre><code>$crypt = new x_class_crypt(); // Uses default 'aes-256-cbc' algorithm\n$crypt = new x_class_crypt('aes-128-cbc'); // Uses 'aes-128-cbc' algorithm\n</code></pre>"},{"location":"classes/x_class_crypt.html#encrypt_1","title":"<code>encrypt()</code>","text":"<p>Encrypts data with the specified key and algorithm, returning it in a Base64 encoded format.</p> <p>Example Usage: </p><pre><code>$crypt = new x_class_crypt();\n$key = base64_encode('your-secret-key'); // Ensure key is Base64 encoded\n$data = 'Sensitive data';\n$encrypted = $crypt-&gt;encrypt($data, $key);\necho $encrypted;\n</code></pre>"},{"location":"classes/x_class_crypt.html#decrypt_1","title":"<code>decrypt()</code>","text":"<p>Decrypts Base64 encoded encrypted data using the specified key and algorithm.</p> <p>Example Usage: </p><pre><code>$crypt = new x_class_crypt();\n$key = base64_encode('your-secret-key'); // Ensure key is Base64 encoded\n$decrypted = $crypt-&gt;decrypt($encrypted, $key);\necho $decrypted;\n</code></pre>"},{"location":"classes/x_class_csrf.html","title":"PHP CSRF","text":""},{"location":"classes/x_class_csrf.html#class-documentation-x_class_csrf","title":"Class Documentation: <code>x_class_csrf</code>","text":""},{"location":"classes/x_class_csrf.html#documentation","title":"Documentation","text":"<p>This document provides an in-depth explanation of the <code>x_class_csrf</code> class, which is designed to manage Cross-Site Request Forgery (CSRF) tokens in a PHP application. It explains the class structure, required PHP modules, and provides detailed descriptions of the methods and their parameters. The documentation is aimed at developers who need to integrate this class into their applications and require clear guidance on how to use it effectively.</p> <ul> <li>The <code>norenewal</code> and <code>external_action</code> properties provide flexibility for different use cases, such as handling tokens across external systems or preventing token renewal.</li> <li>The <code>check_lkey</code> method is particularly important when validating tokens from a previous session, useful in scenarios involving persistent tokens.</li> </ul> <p>This documentation ensures that developers can effectively integrate and use the <code>x_class_csrf</code> class in their PHP applications, maintaining security against CSRF attacks.</p> <p>This class manages CSRF tokens, which are crucial for preventing unauthorized actions from being executed in web applications. It handles the generation, validation, and management of CSRF tokens across multiple sessions. Special functionalities include the ability to disable token renewal, handle external actions, and validate tokens with custom validity periods.</p>"},{"location":"classes/x_class_csrf.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_csrf.html#php-modules","title":"PHP Modules","text":"<ul> <li><code>session</code>: For managing session data where CSRF tokens are stored.</li> </ul>"},{"location":"classes/x_class_csrf.html#external-classes","title":"External Classes","text":"<p>None required.</p>"},{"location":"classes/x_class_csrf.html#class-usage","title":"Class Usage","text":""},{"location":"classes/x_class_csrf.html#properties","title":"Properties","text":"Property Type Description <code>$extension</code> <code>string</code> Optional prefix for session keys, useful when using multiple instances of the class. <code>$valid_time</code> <code>int</code> The duration (in seconds) for which the CSRF token remains valid. Default is 300 seconds. <code>$norenewal</code> <code>bool</code> Indicates whether the CSRF token should not be renewed. <code>$external_action</code> <code>bool</code> Determines whether the CSRF token is being used for external actions. <code>$c_key</code> <code>int</code> The current CSRF token value. <code>$c_key_time</code> <code>int</code> The timestamp of the current CSRF token. <code>$l_key</code> <code>int</code> The last session\u2019s CSRF token, used for validation. <code>$l_key_time</code> <code>int</code> The timestamp of the last session\u2019s CSRF token."},{"location":"classes/x_class_csrf.html#methods","title":"Methods","text":""},{"location":"classes/x_class_csrf.html#__construct","title":"<code>__construct(...)</code>","text":"Parameter Type Description <code>$cookie_extension</code> <code>string</code> Optional. Sets a prefix for session keys to avoid conflicts. <code>$second_valid</code> <code>int</code> Optional. Defines the validity time for the CSRF token in seconds. Default is 300 seconds. <code>$external_action</code> <code>bool</code> Optional. If true, disables token renewal and handles external actions. Default is <code>false</code>. <p>Description: Initializes the CSRF class, generates a new CSRF token, and manages the session keys and their timestamps. Handles special cases like external actions and token renewal.</p>"},{"location":"classes/x_class_csrf.html#disablerenewal","title":"<code>disableRenewal(...)</code>","text":"Parameter Type Description <code>$bool</code> <code>bool</code> Optional. Disables the renewal of CSRF tokens if set to <code>true</code>. <p>Description: Allows disabling the automatic renewal of CSRF tokens, useful in specific cases like persistent sessions.</p>"},{"location":"classes/x_class_csrf.html#norenewal","title":"<code>norenewal(...)</code>","text":"Parameter Type Description <code>$bool</code> <code>bool</code> Optional. Alias for <code>disableRenewal()</code>. Disables token renewal. <p>Description: Sets the <code>$norenewal</code> property, determining if tokens should not be renewed after validation.</p>"},{"location":"classes/x_class_csrf.html#isdisabled","title":"<code>isDisabled(...)</code>","text":"Parameter Type Description None N/A <p>Description: Checks if the CSRF token renewal is disabled.</p> <p>Returns: <code>bool</code> \u2013 Returns <code>true</code> if token renewal is disabled.</p>"},{"location":"classes/x_class_csrf.html#external_action","title":"<code>external_action(...)</code>","text":"Parameter Type Description <code>$bool</code> <code>bool</code> Optional. Enables or disables external action mode. <p>Description: Sets the <code>$external_action</code> property, which modifies the behavior of token validation and renewal.</p>"},{"location":"classes/x_class_csrf.html#get","title":"<code>get(...)</code>","text":"Parameter Type Description None N/A <p>Description: Retrieves the current CSRF token.</p> <p>Returns: <code>int</code> \u2013 The current CSRF token value.</p>"},{"location":"classes/x_class_csrf.html#get_time","title":"<code>get_time(...)</code>","text":"Parameter Type Description None N/A <p>Description: Retrieves the timestamp of the current CSRF token.</p> <p>Returns: <code>int</code> \u2013 The timestamp when the current CSRF token was generated.</p>"},{"location":"classes/x_class_csrf.html#get_lkey","title":"<code>get_lkey(...)</code>","text":"Parameter Type Description None N/A <p>Description: Retrieves the last session\u2019s CSRF token.</p> <p>Returns: <code>int</code> \u2013 The last session's CSRF token value.</p>"},{"location":"classes/x_class_csrf.html#get_lkey_time","title":"<code>get_lkey_time(...)</code>","text":"Parameter Type Description None N/A <p>Description: Retrieves the timestamp of the last session\u2019s CSRF token.</p> <p>Returns: <code>int</code> \u2013 The timestamp of the last session's CSRF token.</p>"},{"location":"classes/x_class_csrf.html#getfield","title":"<code>getField(...)</code>","text":"Parameter Type Description <code>$name</code> <code>string</code> The <code>name</code> attribute for the generated hidden input field. <code>$id</code> <code>string</code> Optional. The <code>id</code> attribute for the generated input field. <p>Description: Outputs an HTML hidden input field containing the current CSRF token.</p>"},{"location":"classes/x_class_csrf.html#crypto","title":"<code>crypto(...)</code>","text":"Parameter Type Description None N/A <p>Description: Returns the CSRF token, either for external or current session based on the mode.</p> <p>Returns: <code>int</code> \u2013 The relevant CSRF token value (current or last session).</p>"},{"location":"classes/x_class_csrf.html#time","title":"<code>time(...)</code>","text":"Parameter Type Description None N/A <p>Description: Returns the timestamp of the CSRF token, either for external or current session based on the mode.</p> <p>Returns: <code>int</code> \u2013 The relevant timestamp (current or last session).</p>"},{"location":"classes/x_class_csrf.html#validate","title":"<code>validate(...)</code>","text":"Parameter Type Description <code>$code</code> <code>int</code> The CSRF token value to validate. <code>$override_valid_time</code> <code>int</code> Optional. Custom validity duration for the token in seconds. <p>Description: Validates the provided CSRF token against the stored session token, checking the time validity as well.</p> <p>Returns: <code>bool</code> \u2013 <code>true</code> if the token is valid, <code>false</code> otherwise.</p>"},{"location":"classes/x_class_csrf.html#check","title":"<code>check(...)</code>","text":"Parameter Type Description <code>$code</code> <code>int</code> The CSRF token value to validate. <code>$override_valid_time</code> <code>int</code> Optional. Custom validity duration for the token in seconds. <p>Description: Internal method for validating the current CSRF token within the session.</p> <p>Returns: <code>bool</code> \u2013 <code>true</code> if the token is valid, <code>false</code> otherwise.</p>"},{"location":"classes/x_class_csrf.html#check_lkey","title":"<code>check_lkey(...)</code>","text":"Parameter Type Description <code>$code</code> <code>int</code> The CSRF token value to validate. <code>$override_valid_time</code> <code>int</code> Optional. Custom validity duration for the token in seconds. <p>Description: Internal method for validating the last session\u2019s CSRF token, used for external actions.</p> <p>Returns: <code>bool</code> \u2013 <code>true</code> if the token is valid, <code>false</code> otherwise.</p>"},{"location":"classes/x_class_csrf.html#__destruct","title":"<code>__destruct(...)</code>","text":"Parameter Type Description None N/A <p>Description: Automatically called when the object is destroyed. It saves the current CSRF token and its timestamp in the session unless renewal is disabled.</p>"},{"location":"classes/x_class_curl.html","title":"PHP Curl","text":""},{"location":"classes/x_class_curl.html#class-documentation-x_class_curl","title":"Class Documentation: <code>x_class_curl</code>","text":""},{"location":"classes/x_class_curl.html#documentation","title":"Documentation","text":"<p>The <code>x_class_curl</code> class is designed to facilitate various types of HTTP requests, including file downloads and uploads, while optionally logging requests and responses to a database. It provides a straightforward interface for making <code>GET</code>, <code>POST</code>, or custom requests and converting between XML and JSON formats.</p> <ol> <li>Logging: The class supports logging, which can be enabled using the <code>logging()</code> method. The log data is stored in a specified MySQL table. Ensure the MySQL table exists, or the class will automatically create it.</li> <li>Curl Settings: The <code>settings</code> array passed to the <code>request()</code>, <code>download()</code>, and <code>upload()</code> methods allows customization of the <code>curl</code> request by using <code>CURLOPT_*</code> options.</li> </ol> <p>The <code>x_class_curl</code> class provides several methods to make HTTP requests, log interactions, and convert data formats. Below is a detailed explanation of each method and its parameters.</p>"},{"location":"classes/x_class_curl.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_curl.html#php-modules","title":"PHP Modules","text":"<ul> <li><code>curl</code> (to execute HTTP requests)</li> <li><code>json</code> (for JSON conversions)</li> <li><code>simplexml</code> (for XML conversions)</li> </ul>"},{"location":"classes/x_class_curl.html#external-classes","title":"External Classes","text":"<ul> <li><code>x_class_mysql</code> class.</li> </ul>"},{"location":"classes/x_class_curl.html#table-structure","title":"Table Structure","text":"<p>This section describes the table structure that the cURL class will automatically create to log HTTP requests made using cURL. The table is designed to store detailed information about each request, such as the URL, request type, and response data. Below is an overview of the columns and keys used in the table, along with their intended purpose.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each logged request. <code>url</code> <code>text</code> The remote URL to which the cURL request was made. <code>request</code> <code>varchar(64)</code> The type of request or function name used (e.g., <code>GET</code>, <code>POST</code>, <code>PUT</code>). <code>filename</code> <code>text</code> The filename involved if the request was related to file uploads. <code>settings</code> <code>text</code> The configuration settings or parameters used for the cURL request. <code>output</code> <code>text</code> The response or output returned by the cURL request. <code>section</code> <code>varchar(128)</code> <code>DEFAULT ''</code> For Multi Site Purposes to split database data in categories. <code>type</code> <code>varchar(64)</code> The type of cURL request made, providing further context (e.g., <code>API</code>, <code>File Transfer</code>). <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The timestamp when the request was logged, automatically set when the record is created. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each log entry is uniquely identifiable."},{"location":"classes/x_class_curl.html#class-usage","title":"Class Usage","text":""},{"location":"classes/x_class_curl.html#methods-library","title":"Methods Library","text":"Method Parameters Description Return Value <code>logging</code> <code>mysql</code>, <code>logging</code>, <code>logging_settings</code>, <code>logging_table</code>, <code>section</code> Configures logging for requests. Initializes the logging table if it doesn\u2019t exist. <code>void</code> <code>request</code> <code>url</code>, <code>request = \"GET\"</code>, <code>settings = array()</code> Executes an HTTP request to the specified URL using the specified method (<code>GET</code>, <code>POST</code>, etc.). <code>string</code> (response) <code>download</code> <code>remote</code>, <code>local</code>, <code>request = \"GET\"</code>, <code>settings = array()</code> Downloads a file from the specified remote URL to the local file system. <code>string</code> (response) <code>upload</code> <code>remote</code>, <code>local</code>, <code>request = \"POST\"</code>, <code>settings = array()</code> Uploads a file from the local file system to the specified remote URL. <code>string</code> (response) <code>xml_to_array</code> <code>xml</code> Converts an XML string to a PHP associative array. <code>array</code> <code>xml_to_json</code> <code>xml</code> Converts an XML string to a JSON string. <code>string</code> (JSON) <code>json_to_array</code> <code>json</code> Converts a JSON string to a PHP associative array. <code>array</code> <code>json_to_xml</code> <code>json</code> Converts a JSON string to an XML string. <code>string</code> (XML) <code>array_to_xml</code> <code>array</code> Converts a PHP associative array to an XML string. <code>string</code> (XML) <code>array_to_json</code> <code>array</code> Converts a PHP associative array to a JSON string. <code>string</code> (JSON)"},{"location":"classes/x_class_curl.html#method-details","title":"Method Details","text":""},{"location":"classes/x_class_curl.html#logging","title":"<code>logging(...)</code>","text":"<p>Configures logging for the requests made using this class.</p> Parameter Type Description <code>mysql</code> object MySQL connection object. <code>logging</code> bool Enable or disable logging. <code>logging_settings</code> bool Determines if the request settings should be logged. <code>logging_table</code> string Name of the MySQL table where logs are stored. <code>section</code> string Optional. A string identifier for the section of the application related to the request."},{"location":"classes/x_class_curl.html#request","title":"<code>request(...)</code>","text":"<p>Executes an HTTP request and returns the response.</p> Parameter Type Description <code>url</code> string The URL to which the request is made. <code>request</code> string The HTTP request method (default is <code>GET</code>). <code>settings</code> array Optional. An associative array of additional <code>curl</code> options (<code>CURLOPT_*</code>) to customize the request. <p>Returns: The response from the server as a string.</p>"},{"location":"classes/x_class_curl.html#download","title":"<code>download(...)</code>","text":"<p>Downloads a file from a remote server to a local path.</p> Parameter Type Description <code>remote</code> string The URL of the remote file to be downloaded. <code>local</code> string The local path where the file should be saved. <code>request</code> string The HTTP request method (default is <code>GET</code>). <code>settings</code> array Optional. An associative array of additional <code>curl</code> options (<code>CURLOPT_*</code>) to customize the request. <p>Returns: The response from the server as a string.</p>"},{"location":"classes/x_class_curl.html#upload","title":"<code>upload(...)</code>","text":"<p>Uploads a local file to a remote server.</p> Parameter Type Description <code>remote</code> string The URL where the file should be uploaded. <code>local</code> string The local path of the file to be uploaded. <code>request</code> string The HTTP request method (default is <code>POST</code>). <code>settings</code> array Optional. An associative array of additional <code>curl</code> options (<code>CURLOPT_*</code>) to customize the request. <p>Returns: The response from the server as a string.</p>"},{"location":"classes/x_class_curl.html#conversion-methods","title":"Conversion Methods","text":"<p>These methods convert between XML, JSON, and PHP associative arrays:</p> <ul> <li><code>xml_to_array($xml)</code>: Converts XML to an array.</li> <li><code>xml_to_json($xml)</code>: Converts XML to JSON.</li> <li><code>json_to_array($json)</code>: Converts JSON to an array.</li> <li><code>json_to_xml($json)</code>: Converts JSON to XML.</li> <li><code>array_to_xml($array)</code>: Converts an array to XML.</li> <li><code>array_to_json($array)</code>: Converts an array to JSON.</li> </ul>"},{"location":"classes/x_class_debug.html","title":"PHP Debug","text":""},{"location":"classes/x_class_debug.html#class-documentation-x_class_debug","title":"Class Documentation: <code>x_class_debug</code>","text":""},{"location":"classes/x_class_debug.html#documentation","title":"Documentation","text":"<p>The <code>x_class_debug</code> class is designed to aid in debugging and monitoring of PHP applications. It provides functionality to check for required PHP modules, display error screens, log errors, and gather system information. This class is useful for developers who need to ensure that their application has all necessary PHP extensions and to monitor the application\u2019s resource usage and performance.</p> <ul> <li>Error Screen Customization: The <code>error_screen()</code> method provides a basic HTML template for displaying critical errors. Customize the HTML/CSS as needed for your application.</li> <li>Database Logging: The <code>js_error_action()</code> method requires a valid <code>x_class_mysql</code> instance. Ensure that the database connection and table creation logic aligns with your database schema.</li> <li>System Resource Monitoring: Methods like <code>memory_usage()</code>, <code>cpu_load()</code>, and <code>upload_max_filesize()</code> provide insights into system resource usage and configuration settings.</li> </ul> <p>This class provides various debugging tools to help with monitoring and troubleshooting PHP applications. It includes methods for: - Displaying error screens. - Checking for required PHP modules. - Gathering system resource usage. - Logging JavaScript errors to a database.  </p>"},{"location":"classes/x_class_debug.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_debug.html#php-modules","title":"PHP Modules","text":"<ul> <li>None Required: The class utilizes built-in PHP functions and does not have external module dependencies beyond PHP itself.</li> </ul>"},{"location":"classes/x_class_debug.html#external-classes","title":"External Classes","text":"<ul> <li>x_class_mysql: Required for methods that interact with MySQL databases for logging errors. Ensure that the <code>x_class_mysql</code> class is properly included and instantiated in your application.</li> </ul>"},{"location":"classes/x_class_debug.html#table-structure","title":"Table Structure","text":"<p>This section explains the table structure that will be automatically created by the debugging class to log JavaScript errors encountered by users. The table captures essential details such as the error message, user information, and the URL where the error occurred. Below is a summary of the columns and keys used in the table, along with their intended usage.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(11)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each error log entry. <code>fk_user</code> <code>int(11)</code> <code>NOT NULL</code>, <code>DEFAULT 0</code> The foreign key referencing the user who encountered the error. Defaults to <code>0</code> if user is unknown. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The timestamp when the error was logged. Automatically set when a new record is inserted. <code>errormsg</code> <code>longtext</code> <code>DEFAULT NULL</code> The full error message captured from the JavaScript error. <code>urlstring</code> <code>varchar(512)</code> <code>DEFAULT NULL</code> The URL where the error occurred, providing context for the source of the error. <code>section</code> <code>varchar(128)</code> <code>DEFAULT NULL</code> For Multi Site Purposes to split database data in categories. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each error log entry is uniquely identifiable."},{"location":"classes/x_class_debug.html#class-properties","title":"Class Properties","text":"Property Type Description <code>microtime_start</code> float The timestamp when the object was instantiated, used for measuring elapsed time."},{"location":"classes/x_class_debug.html#class-methods","title":"Class Methods","text":""},{"location":"classes/x_class_debug.html#__construct","title":"<code>__construct(...)</code>","text":"Parameter Type Description None None Initializes the <code>microtime_start</code> property with the current timestamp. <ul> <li>Description: Sets up the initial state of the object by recording the current time.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_debug.html#error_screen","title":"<code>error_screen(...)</code>","text":"Parameter Type Description <code>$text</code> string The error message to display on the error screen. <ul> <li>Description: Displays a styled error page with a critical error message. This method sets the HTTP response code to 503 (Service Unavailable).</li> <li>Returns: None. Exits the script execution.</li> </ul>"},{"location":"classes/x_class_debug.html#required_php_modules","title":"<code>required_php_modules(...)</code>","text":"Parameter Type Description <code>$array</code> array An array of PHP module names to check. <code>$errorscreen</code> bool Optional. If <code>true</code>, will display an error screen if any module is missing (default is <code>false</code>). <ul> <li>Description: Checks if the specified PHP modules are loaded. If some modules are missing and <code>$errorscreen</code> is <code>true</code>, it will display an error screen.</li> <li>Returns: An array of missing module names if any; otherwise, an empty array.</li> </ul>"},{"location":"classes/x_class_debug.html#required_php_module","title":"<code>required_php_module(...)</code>","text":"Parameter Type Description <code>$name</code> string The name of the PHP module to check. <code>$errorscreen</code> bool Optional. If <code>true</code>, will display an error screen if the module is missing (default is <code>false</code>). <ul> <li>Description: Checks if a specific PHP module is loaded. If the module is missing and <code>$errorscreen</code> is <code>true</code>, it will display an error screen.</li> <li>Returns: <code>true</code> if the module is loaded; <code>false</code> otherwise.</li> </ul>"},{"location":"classes/x_class_debug.html#php_modules","title":"<code>php_modules(...)</code>","text":"Parameter Type Description None None Returns the list of currently loaded PHP extensions. <ul> <li>Description: Retrieves the list of PHP modules currently loaded in the environment.</li> <li>Returns: An array of loaded PHP module names.</li> </ul>"},{"location":"classes/x_class_debug.html#memory_usage","title":"<code>memory_usage(...)</code>","text":"Parameter Type Description None None Returns the current memory usage. <ul> <li>Description: Retrieves the current memory usage of the script.</li> <li>Returns: A string representing the memory usage in kilobytes (e.g., <code>\"1024KB\"</code>).</li> </ul>"},{"location":"classes/x_class_debug.html#memory_limit","title":"<code>memory_limit(...)</code>","text":"Parameter Type Description None None Returns the maximum memory limit. <ul> <li>Description: Retrieves the memory limit set for the PHP script.</li> <li>Returns: A string representing the memory limit (e.g., <code>\"128M\"</code>).</li> </ul>"},{"location":"classes/x_class_debug.html#cpu_load","title":"<code>cpu_load(...)</code>","text":"Parameter Type Description None None Returns the current CPU load average. <ul> <li>Description: Retrieves the system\u2019s average CPU load. Uses <code>sys_getloadavg()</code> if available.</li> <li>Returns: A float representing the average CPU load; <code>\"intl-mod-missing\"</code> if the function is not available.</li> </ul>"},{"location":"classes/x_class_debug.html#upload_max_filesize","title":"<code>upload_max_filesize(...)</code>","text":"Parameter Type Description None None Returns the maximum file upload size. <ul> <li>Description: Retrieves the maximum file upload size allowed by the PHP configuration.</li> <li>Returns: A string representing the maximum upload size (e.g., <code>\"2M\"</code>).</li> </ul>"},{"location":"classes/x_class_debug.html#timer","title":"<code>timer(...)</code>","text":"Parameter Type Description None None Returns the elapsed time. <ul> <li>Description: Calculates and returns the elapsed time since the object was instantiated.</li> <li>Returns: A float representing the elapsed time in seconds, rounded to three decimal places.</li> </ul>"},{"location":"classes/x_class_debug.html#js_error_script","title":"<code>js_error_script(...)</code>","text":"Parameter Type Description <code>$action_url</code> string The URL where JavaScript errors should be sent. <ul> <li>Description: Outputs JavaScript code to capture JavaScript errors and send them to the specified URL via a POST request.</li> <li>Returns: None. The JavaScript code is output directly.</li> </ul>"},{"location":"classes/x_class_debug.html#js_error_action","title":"<code>js_error_action(...)</code>","text":"Parameter Type Description <code>$x_class_mysql</code> object An instance of the <code>x_class_mysql</code> class. <code>$table</code> string The name of the table where errors should be logged. <code>$current_user_id</code> int Optional. The ID of the current user (default is <code>0</code>). <code>$section</code> string Optional. Additional context or section name (default is <code>\"\"</code>). <ul> <li>Description: Logs JavaScript error details into a MySQL database. Creates the error table if it does not exist.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_debug.html#js_error_create_db","title":"<code>js_error_create_db(...)</code>","text":"Parameter Type Description <code>$x_class_mysql</code> object An instance of the <code>x_class_mysql</code> class. <code>$table</code> string The name of the table to create if it does not exist. <ul> <li>Description: Creates a MySQL table for logging JavaScript errors if it does not already exist.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_eventbox.html","title":"PHP Eventbox","text":""},{"location":"classes/x_class_eventbox.html#class-documentation-x_class_eventbox","title":"Class Documentation: <code>x_class_eventbox</code>","text":""},{"location":"classes/x_class_eventbox.html#documentation","title":"Documentation","text":"<p>The <code>x_class_eventbox</code> class provides a mechanism for managing and displaying event messages within a web application. It utilizes PHP sessions to store messages temporarily and allows for various types of messages to be displayed or skipped.</p> <ul> <li>Session Management: The class uses PHP sessions to store and manage messages. Ensure that sessions are properly configured and started.</li> <li>Message Types: The class supports various types of messages such as \"ok\", \"warning\", \"error\", and \"info\". These types are used to style the messages differently when displayed.</li> <li>Message Display: The <code>show()</code> method can include an optional close button and HTML escaping for message text. This allows for customizable display options and security against XSS attacks.</li> </ul> <p>This class manages messages in a web application, allowing you to add, display, and control various types of messages (e.g., error, warning, info). It uses PHP sessions to store message data.</p>"},{"location":"classes/x_class_eventbox.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_eventbox.html#php-modules","title":"PHP Modules","text":"<ul> <li><code>Session</code>: Required for session management. Ensure session support is enabled in your PHP configuration.</li> </ul>"},{"location":"classes/x_class_eventbox.html#external-classes","title":"External Classes","text":"<ul> <li><code>None</code>: This class does not depend on any external classes.</li> </ul>"},{"location":"classes/x_class_eventbox.html#class-properties","title":"Class Properties","text":"Property Type Description <code>cookie</code> string A string used to prefix session variable names for isolation."},{"location":"classes/x_class_eventbox.html#class-methods","title":"Class Methods","text":""},{"location":"classes/x_class_eventbox.html#__construct","title":"<code>__construct(...)</code>","text":"Parameter Type Description <code>$cookie</code> string Optional. A prefix for session variables (default is an empty string). <ul> <li>Description: Initializes the <code>x_class_eventbox</code> object. Starts a PHP session if not already active and sets up session variables for storing messages.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_eventbox.html#ok","title":"<code>ok(...)</code>","text":"Parameter Type Description <code>$text</code> string The message text to add. <ul> <li>Description: Adds a message of type \"ok\" to the messages array. Calls the <code>add()</code> method.</li> <li>Returns: Result of the <code>add()</code> method.</li> </ul>"},{"location":"classes/x_class_eventbox.html#warning","title":"<code>warning(...)</code>","text":"Parameter Type Description <code>$text</code> string The message text to add. <ul> <li>Description: Adds a message of type \"warning\" to the messages array. Calls the <code>add()</code> method.</li> <li>Returns: Result of the <code>add()</code> method.</li> </ul>"},{"location":"classes/x_class_eventbox.html#error","title":"<code>error(...)</code>","text":"Parameter Type Description <code>$text</code> string The message text to add. <ul> <li>Description: Adds a message of type \"error\" to the messages array. Calls the <code>add()</code> method.</li> <li>Returns: Result of the <code>add()</code> method.</li> </ul>"},{"location":"classes/x_class_eventbox.html#info","title":"<code>info(...)</code>","text":"Parameter Type Description <code>$text</code> string The message text to add. <ul> <li>Description: Adds a message of type \"info\" to the messages array. Calls the <code>add()</code> method.</li> <li>Returns: Result of the <code>add()</code> method.</li> </ul>"},{"location":"classes/x_class_eventbox.html#add","title":"<code>add(...)</code>","text":"Parameter Type Description <code>$text</code> string The message text to add. <code>$type</code> string The type of message (e.g., \"ok\", \"warning\", \"error\", \"info\"). <ul> <li>Description: Adds a message to the session's messages array with the specified type.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_eventbox.html#get","title":"<code>get(...)</code>","text":"Parameter Type Description None None Retrieves the current messages array from the session. <ul> <li>Returns: An array of messages from the session.</li> </ul>"},{"location":"classes/x_class_eventbox.html#override","title":"<code>override(...)</code>","text":"Parameter Type Description <code>$text</code> string The message text to display. <code>$type</code> string The type of message (e.g., \"ok\", \"warning\", \"error\", \"info\"). <ul> <li>Description: Clears all current messages and sets a single message with the specified type.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_eventbox.html#reset","title":"<code>reset(...)</code>","text":"Parameter Type Description None None Resets all messages and skips the event box. <ul> <li>Description: Clears all messages from the session and sets the skip flag to <code>false</code>.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_eventbox.html#skip","title":"<code>skip(...)</code>","text":"Parameter Type Description None None Sets the skip flag to <code>true</code>. <ul> <li>Description: Sets a flag to skip displaying messages in the event box on the next show call.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_eventbox.html#noskip","title":"<code>noskip(...)</code>","text":"Parameter Type Description None None Sets the skip flag to <code>false</code>. <ul> <li>Description: Resets the skip flag to <code>false</code>, allowing messages to be displayed.</li> <li>Returns: None.</li> </ul>"},{"location":"classes/x_class_eventbox.html#show","title":"<code>show(...)</code>","text":"Parameter Type Description <code>$closebutton</code> mixed Optional. HTML content or text for a close button (default is <code>false</code>). <code>$filter</code> bool Optional. If <code>true</code>, HTML special characters will be escaped (default is <code>false</code>). <ul> <li>Description: Displays the event box with the current messages. Optionally includes a close button and applies HTML escaping if required.</li> <li>Returns: <code>true</code> if messages are shown; otherwise, <code>false</code>.</li> </ul>"},{"location":"classes/x_class_hitcounter.html","title":"PHP Hitcounter","text":""},{"location":"classes/x_class_hitcounter.html#class-documentation-x_class_hitcounter","title":"Class Documentation: <code>x_class_hitcounter</code>","text":""},{"location":"classes/x_class_hitcounter.html#documentation","title":"Documentation","text":"<p>The <code>x_class_hitcounter</code> class is designed to track and manage hits on specific URLs within a section of a website. It counts both unique \"arrivals\" (first visits by a user) and \"switches\" (subsequent hits to the same URL during a session). The class relies on MySQL for data storage and can dynamically create its own table if it doesn't exist.</p> <ul> <li>Session Management: The class relies on PHP sessions to track arrivals and switches, ensuring unique hits within a session.</li> <li>URL Cleaning: The <code>prepareUrl</code> method ensures URLs are stored consistently by removing protocol, subdomain, and GET parameters when configured to do so.</li> <li>Switches vs. Arrivals: Switches refer to repeated hits on the same URL during a session, while arrivals count the first visit.</li> </ul> <p>This class handles the counting and tracking of page hits and switches in a web application, storing the data in a MySQL database.</p>"},{"location":"classes/x_class_hitcounter.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_hitcounter.html#php-modules","title":"PHP Modules","text":"<ul> <li><code>mysqli</code> or equivalent for database interaction.</li> <li><code>session</code> module for tracking user sessions.</li> </ul>"},{"location":"classes/x_class_hitcounter.html#external-classes","title":"External Classes","text":"<ul> <li>A MySQL wrapper class or object that provides methods such as <code>select</code>, <code>query</code>, <code>update</code>, <code>table_exists</code>, and <code>free_all</code>.</li> </ul>"},{"location":"classes/x_class_hitcounter.html#table-structure","title":"Table Structure","text":"<p>This section explains the table structure that will be automatically created by the hit counter class to log site visits. The table captures detailed information about each visit, including the URL, visit counts, and associated sections. Below is a summary of the columns and keys used in the table, along with their intended purpose.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each visit log entry. <code>full_url</code> <code>varchar(512)</code> <code>NOT NULL</code>, <code>DEFAULT '0'</code> The full URL of the site being tracked, associated with the visit. <code>switches</code> <code>int(10)</code> <code>DEFAULT '0'</code> The number of changes or switches made to the site during the session. <code>arrivals</code> <code>int(10)</code> <code>NOT NULL</code>, <code>DEFAULT '0'</code> The number of arrivals at the site for the given URL. <code>section</code> <code>varchar(128)</code> <code>NOT NULL</code>, <code>DEFAULT ''</code> For Multi Site Purposes to split database data in categories. <code>summarized</code> <code>int(10)</code> <code>NOT NULL</code>, <code>DEFAULT '0'</code> The total number of hits for the specific URL, summarizing all visits. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The timestamp when the visit record was created. Automatically set when a new entry is added. <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> The timestamp of the last modification to the visit record. Automatically updated on changes. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures each log entry is uniquely identifiable. <code>x_class_hitcounter</code> Unique <code>full_url</code>, <code>section</code> Ensures that each unique URL and section combination is only logged once, avoiding duplicate entries."},{"location":"classes/x_class_hitcounter.html#method-library","title":"Method Library","text":"Method Parameters Description <code>__construct</code> <code>$x_class_mysql</code>, <code>$table</code>, <code>$precookie = \"\"</code>, <code>$section = \"\"</code> Initializes the class, setting up the database connection and ensuring the table exists. <code>enabled</code> <code>$bool = true</code> Enables or disables hit counting. <code>clearget</code> <code>$bool = true</code> Configures whether to clean GET parameters from URLs. <code>get_array</code> None Returns all records from the hit counter table as an array. <code>refresh_counters</code> None Refreshes the internal counters based on the current URL and section. <code>prepareUrl</code> <code>$tmpcode</code> Prepares and cleans the URL for consistent storage and comparison. <code>execute</code> None Main method to track a hit or switch, updating the database accordingly."},{"location":"classes/x_class_hitcounter.html#method-details","title":"Method Details","text":""},{"location":"classes/x_class_hitcounter.html#__construct","title":"<code>__construct(...)</code>","text":"<p>Initializes the hit counter instance. This method starts the session, stores key information, and ensures the MySQL table exists.</p> Parameter Type Description <code>$thecon</code> Object The MySQL connection object. <code>$table</code> String Name of the table to store hit counter data. <code>$precookie</code> String Prefix for session cookies to avoid collisions. <code>$section</code> String Section name to differentiate URLs by context."},{"location":"classes/x_class_hitcounter.html#enabled","title":"<code>enabled(...)</code>","text":"<p>Enables or disables the hit counter. If disabled, no hits or switches are counted.</p> Parameter Type Description <code>$bool</code> Boolean Whether to enable the counter."},{"location":"classes/x_class_hitcounter.html#clearget","title":"<code>clearget(...)</code>","text":"<p>Configures the behavior to remove GET parameters from the URL before processing. If enabled, the URL is cleaned for consistent storage and comparison.</p> Parameter Type Description <code>$bool</code> Boolean Whether to clean GET parameters from the URL before processing."},{"location":"classes/x_class_hitcounter.html#get_array","title":"<code>get_array(...)</code>","text":"<p>Returns all records in the hit counter table as an array.</p> Parameter Type Description None N/A Returns an array of data."},{"location":"classes/x_class_hitcounter.html#refresh_counters","title":"<code>refresh_counters(...)</code>","text":"<p>Refreshes the internal counters (<code>$switches</code>, <code>$arrivals</code>, <code>$summarized</code>) for the current URL and section. It queries the database for existing records and updates the class properties.</p> Parameter Type Description None N/A Updates internal counters."},{"location":"classes/x_class_hitcounter.html#prepareurl","title":"<code>prepareUrl(...)</code>","text":"<p>Cleans and standardizes a URL for consistent storage in the database.</p> Parameter Type Description <code>$tmpcode</code> String The raw URL to be cleaned and standardized."},{"location":"classes/x_class_hitcounter.html#execute","title":"<code>execute(...)</code>","text":"<p>Performs the main hit counting and updating operations. This method manages session-based hit counting and ensures accurate tracking of unique arrivals and switches.</p> Parameter Type Description None N/A Tracks the hit or switch for the current session."},{"location":"classes/x_class_hitcounter.html#example-usage","title":"Example Usage","text":"<pre><code>// Initialize the MySQL connection and table\n$mysql = new MySQLWrapper();\n$hitcounter = new x_class_hitcounter($mysql, 'hitcounter_table');\n\n// Enable the counter and clean GET parameters from URLs\n$hitcounter-&gt;enabled(true);\n$hitcounter-&gt;clearget(true);\n\n// Execute the hit counting process\n$hitcounter-&gt;execute();\n\n// Retrieve the summarized data\n$switches = $hitcounter-&gt;switches;\n$arrivals = $hitcounter-&gt;arrivals;\n$totalHits = $hitcounter-&gt;summarized;\n</code></pre>"},{"location":"classes/x_class_ipbl.html","title":"PHP IP Blacklist","text":""},{"location":"classes/x_class_ipbl.html#class-documentation-x_class_ipbl","title":"Class Documentation: <code>x_class_ipbl</code>","text":""},{"location":"classes/x_class_ipbl.html#documentation","title":"Documentation","text":"<p>The <code>x_class_ipbl</code> class is used for managing IP-based blocking and failure counters using a MySQL database. It allows you to track IP addresses that have failed specific criteria and manage their block status accordingly. The class includes methods for checking if an IP is blocked, retrieving and updating counters, and unblocking IP addresses.</p> <ul> <li>Error Handling: The class uses error suppression (<code>@</code>) for database queries. Consider replacing this with proper exception handling in production code.</li> <li>Prefix Handling: The class does not support key prefixes; all table operations are based on the table name provided.</li> <li>Blocking Logic: The class uses a failure counter to determine if an IP should be blocked. The threshold is configurable via the <code>maxvalue</code> parameter.</li> </ul>"},{"location":"classes/x_class_ipbl.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_ipbl.html#php-modules","title":"PHP Modules","text":"<ul> <li><code>MySQLi</code>: The PHP MySQLi extension must be installed and enabled.</li> </ul>"},{"location":"classes/x_class_ipbl.html#external-classes","title":"External Classes","text":"<ul> <li><code>x_class_mysql</code>: This class requires the x_class_mysql Class for database operations.</li> </ul>"},{"location":"classes/x_class_ipbl.html#table-structure","title":"Table Structure","text":"<p>This section describes the structure of the table used for logging IP addresses that have been blacklisted due to failure counts. The table will be automatically created by the class if required by its functionality. Below is a summary of the columns and keys in the table, along with their usage.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each blacklisted IP entry. <code>fail</code> <code>int(10)</code> <code>DEFAULT '1'</code> The count of failures associated with the IP address. This value increases with each failure. <code>ip_adr</code> <code>varchar(256)</code> <code>NOT NULL</code> The IP address that is being blacklisted. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The date and time when the IP address was blacklisted. Automatically set upon insertion. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures each blacklisted IP entry is uniquely identifiable. <code>x_class_ipbl</code> Unique <code>ip_adr</code> Ensures that each IP address is only recorded once in the table, preventing duplicate entries."},{"location":"classes/x_class_ipbl.html#method-library","title":"Method Library","text":"Method Description <code>__construct($x_class_mysql, $tablename, $maxvalue = 50000)</code> Initializes the class, connects to the database, and sets up the table if it does not exist. <code>blocked($renew = false)</code> Checks if the current IP is blocked or renews the block status if <code>$renew</code> is <code>true</code>. <code>banned($renew = false)</code> Alias for <code>blocked()</code>. Checks if the IP is banned or renews the status. <code>isbanned($renew = false)</code> Alias for <code>blocked()</code>. Checks if the IP is banned or renews the status. <code>isblocked($renew = false)</code> Alias for <code>blocked()</code>. Checks if the IP is blocked or renews the status. <code>get_array()</code> Retrieves all records from the block table as an array. <code>unblock($ip)</code> Unblocks a specified IP address by removing it from the block table. <code>get_counter($renew = false)</code> Retrieves the failure counter for the current IP or renews the counter if <code>$renew</code> is <code>true</code>. <code>counter($renew = false)</code> Alias for <code>get_counter()</code>. Retrieves the failure counter for the current IP. <code>ip_counter($ip)</code> Retrieves the failure counter for a specified IP address. <code>raise($value = 1)</code> Increases the failure counter for the current IP by a specified value. <code>increase($value = 1)</code> Alias for <code>raise()</code>. Increases the failure counter for the current IP by a specified value."},{"location":"classes/x_class_ipbl.html#method-details","title":"Method Details","text":""},{"location":"classes/x_class_ipbl.html#__construct","title":"<code>__construct(...)</code>","text":"Parameter Type Default Description <code>$mysql</code> Object The MySQLi connection object. <code>$tablename</code> String The name of the table to use for IP blocking. <code>$maxvalue</code> Integer <code>50000</code> The maximum number of failures before blocking an IP. <p>Description: Initializes the <code>x_class_ipbl</code> object by connecting to the MySQL database and creating the block table if it does not exist. Sets up the maximum failure threshold and retrieves the current IP address.</p>"},{"location":"classes/x_class_ipbl.html#blocked","title":"<code>blocked(...)</code>","text":"Parameter Type Default Description <code>$renew</code> Boolean <code>false</code> Whether to renew the block status. Return Type Description Boolean Returns <code>true</code> if the current IP is blocked; otherwise, <code>false</code>. <p>Description: Checks if the current IP is blocked. If <code>$renew</code> is <code>true</code>, it updates the block status.</p>"},{"location":"classes/x_class_ipbl.html#banned","title":"<code>banned(...)</code>","text":"Parameter Type Default Description <code>$renew</code> Boolean <code>false</code> Whether to renew the banned status. Return Type Description Boolean Returns <code>true</code> if the current IP is banned; otherwise, <code>false</code>. <p>Description: Alias for <code>blocked()</code>. Checks if the IP is banned or renews the status if <code>$renew</code> is <code>true</code>.</p>"},{"location":"classes/x_class_ipbl.html#isbanned","title":"<code>isbanned(...)</code>","text":"Parameter Type Default Description <code>$renew</code> Boolean <code>false</code> Whether to renew the banned status. Return Type Description Boolean Returns <code>true</code> if the current IP is banned; otherwise, <code>false</code>. <p>Description: Alias for <code>blocked()</code>. Checks if the IP is banned or renews the status if <code>$renew</code> is <code>true</code>.</p>"},{"location":"classes/x_class_ipbl.html#isblocked","title":"<code>isblocked(...)</code>","text":"Parameter Type Default Description <code>$renew</code> Boolean <code>false</code> Whether to renew the blocked status. Return Type Description Boolean Returns <code>true</code> if the current IP is blocked; otherwise, <code>false</code>. <p>Description: Alias for <code>blocked()</code>. Checks if the IP is blocked or renews the status if <code>$renew</code> is <code>true</code>.</p>"},{"location":"classes/x_class_ipbl.html#get_array","title":"<code>get_array(...)</code>","text":"Return Type Description Array Returns an array of all records from the block table. <p>Description: Retrieves all records from the IP block table as an array.</p>"},{"location":"classes/x_class_ipbl.html#unblock","title":"<code>unblock(...)</code>","text":"Parameter Type Description <code>$ip</code> String The IP address to unblock. Return Type Description Void The function does not return a value. <p>Description: Unblocks the specified IP address by deleting it from the block table.</p>"},{"location":"classes/x_class_ipbl.html#get_counter","title":"<code>get_counter(...)</code>","text":"Parameter Type Default Description <code>$renew</code> Boolean <code>false</code> Whether to renew the counter. Return Type Description Integer Returns the failure counter for the current IP. <p>Description: Retrieves the failure counter for the current IP address. If <code>$renew</code> is <code>true</code>, it updates the counter.</p>"},{"location":"classes/x_class_ipbl.html#counter","title":"<code>counter(...)</code>","text":"Parameter Type Default Description <code>$renew</code> Boolean <code>false</code> Whether to renew the counter. Return Type Description Integer Returns the failure counter for the current IP. <p>Description: Alias for <code>get_counter()</code>. Retrieves the failure counter for the current IP address.</p>"},{"location":"classes/x_class_ipbl.html#ip_counter","title":"<code>ip_counter(...)</code>","text":"Parameter Type Description <code>$ip</code> String The IP address for which to get the counter. Return Type Description Integer Returns the failure counter for the specified IP. <p>Description: Retrieves the failure counter for a specified IP address.</p>"},{"location":"classes/x_class_ipbl.html#raise","title":"<code>raise(...)</code>","text":"Parameter Type Default Description <code>$value</code> Integer <code>1</code> The amount to increase the failure counter by. Return Type Description Integer Returns the updated failure counter for the current IP. <p>Description: Increases the failure counter for the current IP by the specified value.</p>"},{"location":"classes/x_class_ipbl.html#increase","title":"<code>increase(...)</code>","text":"Parameter Type Default Description <code>$value</code> Integer <code>1</code> The amount to increase the failure counter by. Return Type Description Integer Returns the updated failure counter for the current IP. <p>Description: Alias for <code>raise()</code>. Increases the failure counter for the current IP by the specified value.</p>"},{"location":"classes/x_class_lang.html","title":"PHP Translations","text":""},{"location":"classes/x_class_lang.html#class-documentation-x_class_lang","title":"Class Documentation: <code>x_class_lang</code>","text":""},{"location":"classes/x_class_lang.html#documentation","title":"Documentation","text":"<p>The <code>x_class_lang</code> class is a PHP-based localization and translation management utility that helps manage multilingual content in applications. It supports database-backed translation, with optional file-based fallback. This class is designed to store, retrieve, add, and manage language-specific key-value pairs for different sections of an application, facilitating seamless translation and localization.</p> <ul> <li>File-based vs Database-based Operation: If a <code>$file_name</code> is provided in the constructor, the class operates in file mode and will not interact with the database.  </li> <li>Table Creation: If the table does not exist, it is automatically created.  </li> <li>Substitutions: Use <code>%repsub%</code> as a placeholder in translations to dynamically insert content.   </li> </ul>"},{"location":"classes/x_class_lang.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_lang.html#php-modules","title":"PHP Modules","text":"<ul> <li><code>PDO</code> or MySQLi (for database access)</li> <li><code>File handling functions</code> (e.g., <code>file_exists</code>, <code>file</code>, etc.)</li> </ul>"},{"location":"classes/x_class_lang.html#external-classes","title":"External Classes","text":"<ul> <li>x_class_mysql: Required for database operations.</li> </ul>"},{"location":"classes/x_class_lang.html#table-structure","title":"Table Structure","text":"<p>This section describes the table structure used by the Translation class to store translation keys and their corresponding values. The table is automatically created by the class if needed. Below is a summary of the columns and keys used in the table, along with their purposes.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(9)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each translation entry, ensuring that each record can be uniquely tracked. <code>identificator</code> <code>varchar(512)</code> <code>NOT NULL</code> A descriptor or key for the translation, used to identify the specific string or text to be translated. <code>lang</code> <code>varchar(16)</code> <code>NOT NULL</code> Indicates the language code (e.g., 'en', 'fr') for the translation, specifying the language of the text. <code>translation</code> <code>text</code> <code>NULL</code> Contains the translated text or description, providing the actual translation for the key. <code>section</code> <code>varchar(128)</code> <code>DEFAULT ''</code> For Multi Site Purposes to split database data in categories. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> Records the date and time when the translation entry was created. Automatically set upon insertion. <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> Logs the date and time of the last modification to the translation entry. Automatically updated on changes. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each translation entry is uniquely identifiable, allowing for precise record management. <code>x_class_lang</code> Unique <code>identificator</code>, <code>lang</code>, <code>section</code> Ensures that each combination of <code>identificator</code>, <code>lang</code>, and <code>section</code> is unique, preventing duplicate translations for the same key, language, and section."},{"location":"classes/x_class_lang.html#class-variables","title":"Class Variables","text":"Variable Name Type Access Description <code>$mysql</code> object private MySQL connection object for database interactions. <code>$table</code> string private Database table name for storing translations. <code>$section</code> string private The section or module within the application to which the translations belong. <code>$lang</code> string private Current language code (e.g., 'en', 'fr'). <code>$array</code> array public In-memory array to store translations for quick access. <code>$filemode</code> boolean private Flag to indicate if the class operates in file-based mode instead of database mode."},{"location":"classes/x_class_lang.html#constructor","title":"Constructor","text":"<pre><code>function __construct($x_class_mysql = false, $table = false, $lang = \"none\", $section = \"none\", $file_name = false)\n</code></pre> <ul> <li>Parameters:</li> </ul> Parameter Type Description <code>$mysql</code> object MySQL database object, required if using database mode. <code>$table</code> string Table name where translations are stored. <code>$lang</code> string Language code (e.g., 'en'). <code>$section</code> string Section name to scope translations. <code>$file_name</code> string Optional: Path to a file for file-based translations. <ul> <li>Description: Initializes the class either in database mode or file mode, depending on provided parameters.</li> </ul>"},{"location":"classes/x_class_lang.html#class-methods","title":"Class Methods","text":""},{"location":"classes/x_class_lang.html#create_table","title":"<code>create_table(..)</code>","text":"<pre><code>private function create_table()\n</code></pre> <ul> <li>Parameters: None</li> <li>Description: Creates the translations table in the database if it doesn't already exist.</li> <li>Returns: Boolean (True on success, False on failure)</li> </ul>"},{"location":"classes/x_class_lang.html#init","title":"<code>init(..)</code>","text":"<pre><code>private function init()\n</code></pre> <ul> <li>Parameters: None</li> <li>Description: Loads translations from the database into the <code>$array</code> variable for the current language and section.</li> <li>Returns: Void</li> </ul>"},{"location":"classes/x_class_lang.html#delete","title":"<code>delete(..)</code>","text":"<pre><code>public function delete($key, $lang = false)\n</code></pre> Parameter Type Description <code>$key</code> string The translation key to delete. <code>$lang</code> string Optional: Language code to delete the key from, defaults to current language. <ul> <li>Description: Deletes a translation entry for a specific key from the database.</li> <li>Returns: Boolean (True on success, False on failure)</li> </ul>"},{"location":"classes/x_class_lang.html#add","title":"<code>add(..)</code>","text":"<pre><code>public function add($key, $text, $lang = false)\n</code></pre> Parameter Type Description <code>$key</code> string The translation key to add. <code>$text</code> string The translation text to add. <code>$lang</code> string Optional: Language code, defaults to the current language. <ul> <li>Description: Adds a new translation entry to the database for a specific key.</li> <li>Returns: Boolean (True on success, False on failure)</li> </ul>"},{"location":"classes/x_class_lang.html#translate","title":"<code>translate(..)</code>","text":"<pre><code>public function translate($key, $substitution = false)\n</code></pre> Parameter Type Description <code>$key</code> string The translation key to fetch. <code>$substitution</code> array Optional: Array of substitutions for placeholders in the translation text. <ul> <li>Description: Retrieves a translation for the current language. If substitutions are provided, they replace placeholders in the translation.</li> <li>Returns: String (Translation text)</li> </ul>"},{"location":"classes/x_class_lang.html#extend","title":"<code>extend(..)</code>","text":"<pre><code>public function extend($key, $value, $overwrite = true)\n</code></pre> Parameter Type Description <code>$key</code> string The translation key to extend. <code>$value</code> string The translation text to associate with the key. <code>$overwrite</code> boolean Whether to overwrite existing translation if the key already exists. <ul> <li>Description: Adds or updates an in-memory translation without affecting the database.</li> <li>Returns: Void</li> </ul>"},{"location":"classes/x_class_log.html","title":"PHP Logging","text":""},{"location":"classes/x_class_log.html#class-documentation-x_class_log","title":"Class Documentation: <code>x_class_log</code>","text":""},{"location":"classes/x_class_log.html#documentation","title":"Documentation","text":"<p>The <code>x_class_log</code> class provides functionality for logging messages to a database table. It supports various log levels (such as errors, warnings, and notifications) and includes methods for retrieving, posting, and managing log entries.</p> <ul> <li>Table Management: The class ensures that the log table exists and is created if necessary. This includes managing the table schema and auto-increment settings.</li> <li>Alias Methods: Methods like <code>post()</code>, <code>send()</code>, and <code>write()</code> are aliases for <code>message()</code>, providing various ways to log messages with different naming conventions.</li> <li>**Logging</li> </ul> <p>Levels: The class supports different log levels (error, warning, notification) which are defined by integer values. The <code>type</code> parameter in <code>message()</code> and its aliases determines the log level. - Error Handling**: The class does not explicitly handle errors or exceptions; it relies on the underlying MySQL connection to manage errors.  </p> <p>This class manages log entries in a MySQL database, allowing you to create, retrieve, and delete log messages categorized by type.</p>"},{"location":"classes/x_class_log.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_log.html#php-modules","title":"PHP Modules","text":"<ul> <li><code>MySQLi</code>: Required for database operations.</li> <li><code>Session</code>: Used for managing sessions if needed (not directly used in this class but might be required by associated classes).</li> </ul>"},{"location":"classes/x_class_log.html#external-classes","title":"External Classes","text":"<ul> <li>x_class_mysql: x_class_mysql for Database Operations.</li> </ul>"},{"location":"classes/x_class_log.html#table-structure","title":"Table Structure","text":"<p>This section details the structure of the table used by the logging class to record various activities, such as errors, warnings, and notifications. The table is automatically created by the class if needed for functionality. Below is a summary of the columns and keys in the table, along with their intended use.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each log entry, ensuring that each activity is individually trackable. <code>type</code> <code>int(10)</code> <code>DEFAULT '0'</code> Indicates the type of log entry: <code>0</code> - Unspecified, <code>1</code> - Error, <code>2</code> - Warning, <code>3</code> - Notification. <code>message</code> <code>text</code> Contains the main text of the log message, providing details about the logged activity. <code>ref</code> <code>text</code> Includes any reference related to the message, such as a file name or error code, for additional context. <code>section</code> <code>varchar(128)</code> <code>NULL</code> For Multi Site Purposes to split database data in categories. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> Records the timestamp when the log entry was created, allowing for chronological tracking. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each log entry is uniquely identifiable."},{"location":"classes/x_class_log.html#class-properties","title":"Class Properties","text":""},{"location":"classes/x_class_log.html#mysql","title":"<code>mysql</code>","text":"Property Type Description <code>x_class_mysql</code> object An instance of a MySQL connection object, expected to have methods for querying and table management."},{"location":"classes/x_class_log.html#table","title":"<code>table</code>","text":"Property Type Description <code>table</code> string The name of the table used for storing log entries."},{"location":"classes/x_class_log.html#section","title":"<code>section</code>","text":"Property Type Description <code>section</code> string The section or category of logs."},{"location":"classes/x_class_log.html#class-methods","title":"Class Methods","text":""},{"location":"classes/x_class_log.html#__construct","title":"<code>__construct(...)</code>","text":"Parameter Type Description <code>$x_class_mysql</code> object An instance of the x_class_mysql object. <code>$tablename</code> string The name of the table to store logs. <code>$section</code> string Optional. The section or category for the logs. <ul> <li>Description: Initializes the <code>x_class_log</code> object, sets up the table if it does not exist.</li> </ul>"},{"location":"classes/x_class_log.html#create_table","title":"<code>create_table(...)</code>","text":"Parameter Type Description None None Creates the log table in the database if it does not exist. <ul> <li>Description: This private method executes a SQL query to create the table schema.</li> </ul>"},{"location":"classes/x_class_log.html#get_array","title":"<code>get_array(...)</code>","text":"Parameter Type Description None None Retrieves all log entries as an array. <ul> <li>Returns: An array of log entries from the table.</li> </ul>"},{"location":"classes/x_class_log.html#post","title":"<code>post(...)</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$type</code> int Optional. Type of log (default is 3 - Notification). <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Inserts a log entry with the given message and type. Calls the <code>message()</code> method.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#send","title":"<code>send(...)</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$type</code> int Optional. Type of log (default is 3 - Notification). <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Alias for <code>post()</code>. Inserts a log entry with the given message and type.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#write","title":"<code>write(...)</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$type</code> int Optional. Type of log (default is 3 - Notification). <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Alias for <code>post()</code>. Inserts a log entry with the given message and type.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#message","title":"<code>message(...)</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$type</code> int Type of log (1 - Error, 2 - Warning, 3 - Notification). <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Inserts a log entry into the table with the specified type and reference.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#info","title":"<code>info(...)</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Alias for <code>notify()</code>. Inserts a notification log entry.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#notify","title":"<code>notify(...)</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Inserts a notification log entry.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#warn","title":"<code>warn(...)</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Alias for <code>warning()</code>. Inserts a warning log entry.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#warning","title":"<code>warning(...)</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Inserts a warning log entry.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#err","title":"<code>err(...)</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Alias for <code>error()</code>. Inserts an error log entry.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#failure","title":"<code>failure(...)</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Alias for <code>error()</code>. Inserts an error log entry.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#fail","title":"<code>fail(...)</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Alias for <code>error()</code>. Inserts an error log entry.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#error","title":"<code>error(...)</code>","text":"Parameter Type Description <code>$message</code> string The log message to store. <code>$ref</code> mixed Optional. A reference or additional info. <ul> <li>Description: Inserts an error log entry.</li> <li>Returns: Result of the database query execution.</li> </ul>"},{"location":"classes/x_class_log.html#list_get","title":"<code>list_get(...)</code>","text":"Parameter Type Description <code>$limit</code> int Optional. The number of log entries to retrieve (default is 50). <ul> <li>Description: Retrieves the most recent log entries from the table, limited by the <code>$limit</code> parameter.</li> <li>Returns: An array of log entries.</li> </ul>"},{"location":"classes/x_class_log.html#list_flush_section","title":"<code>list_flush_section(...)</code>","text":"Parameter Type Description None None Deletes all log entries for the current section and resets the auto-increment value. <ul> <li>Description: Removes all entries for the current section and resets the table's auto-increment counter.</li> <li>Returns: <code>true</code> if successful.</li> </ul>"},{"location":"classes/x_class_log.html#list_flush","title":"<code>list_flush(...)</code>","text":"Parameter Type Description None None Deletes all log entries and resets the auto-increment value. <ul> <li>Description: Removes all entries from the table and resets the table's auto-increment counter.</li> <li>Returns: <code>true</code> if successful.</li> </ul>"},{"location":"classes/x_class_mail.html","title":"PHP Mail","text":""},{"location":"classes/x_class_mail.html#class-documentation-x_class_mail","title":"Class Documentation: <code>x_class_mail</code>","text":""},{"location":"classes/x_class_mail.html#documentation","title":"Documentation","text":"<p>The <code>x_class_mail</code> class provides an interface for sending emails using the PHPMailer library. It offers various configuration options and logging capabilities to manage email sending effectively. This class allows you to set up SMTP details, manage email content, handle attachments, and log email activities to a database.</p>"},{"location":"classes/x_class_mail.html#requirements","title":"Requirements","text":"<p>To use the <code>x_class_mail</code> class, ensure the following PHP modules and external classes are available:</p> <p><code>x_class_mail_phpmailer</code>: The PHPMailer library is required for sending emails.    - Install via Composer: <code>composer require phpmailer/phpmailer</code> <code>x_class_mysql</code>: Required for logging email activities if enabled.  </p>"},{"location":"classes/x_class_mail.html#table-structure","title":"Table Structure","text":"<p>This section describes the table structure used by the mail class to log email sending activities, including both successful and failed attempts. The table is automatically created by the class if required for its functionality. Below is a summary of the columns and keys used in the table, along with their purposes.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each email log entry, ensuring that each record can be individually tracked. <code>receiver</code> <code>text</code> <code>DEFAULT NULL</code> Stores the serialized list of email recipients. <code>bcc</code> <code>text</code> <code>DEFAULT NULL</code> Stores the serialized list of BCC (blind carbon copy) recipients. <code>cc</code> <code>text</code> <code>DEFAULT NULL</code> Stores the serialized list of CC (carbon copy) recipients. <code>attach</code> <code>text</code> <code>DEFAULT NULL</code> Contains the serialized list of attachments sent with the email. <code>subject</code> <code>varchar(512)</code> <code>DEFAULT NULL</code> The subject line of the email. <code>msgtext</code> <code>text</code> The main body text of the email. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The timestamp when the email log entry was created. Automatically set when the record is added. <code>success</code> <code>tinyint(1)</code> <code>DEFAULT NULL</code> Indicates the result of the email sending attempt: <code>1</code> for success, <code>0</code> for failure, or <code>NULL</code> if not set. <code>debugmsg</code> <code>text</code> Contains any debug messages related to the email sending process, useful for troubleshooting. <code>section</code> <code>varchar(128)</code> <code>DEFAULT NULL</code> For Multi Site Purposes to split database data in categories. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each email log entry is uniquely identifiable."},{"location":"classes/x_class_mail.html#class-usage","title":"Class Usage","text":""},{"location":"classes/x_class_mail.html#constructor","title":"Constructor","text":"Method Parameters Description <code>__construct</code> <code>host</code> (string), <code>port</code> (int, default 25), <code>auth_type</code> (string, default false), <code>user</code> (string, default false), <code>pass</code> (string, default false), <code>from_mail</code> (string, default false), <code>from_name</code> (string, default false) Initializes the mail settings including SMTP configuration and default sender information."},{"location":"classes/x_class_mail.html#public-methods","title":"Public Methods","text":"Method Parameters Description <code>keep_alive</code> <code>bool</code> (default false) Set whether to keep the SMTP connection alive. <code>encoding</code> <code>encode</code> (string, default 'base64') Set the encoding type for the email. <code>charset</code> <code>charset</code> (string, default 'UTF-8') Set the character set for the email. <code>allow_insecure_ssl_connections</code> <code>bool</code> (default false) Allow insecure SSL connections. <code>smtpdebuglevel</code> <code>int</code> (default 0) Set the SMTP debug level (0 - no debugging, 1 - client/server communication, 2 - server responses, 3 - detailed debugging). <code>all_default_html</code> <code>bool</code> (default false) Set whether all emails should default to HTML format. <code>change_default_template</code> <code>header</code> (string), <code>footer</code> (string) Set default header and footer templates for emails. <code>initFrom</code> <code>mail</code> (string), <code>name</code> (string, default false) Initialize the default 'From' address and name. <code>initReplyTo</code> <code>mail</code> (string), <code>name</code> (string, default false) Initialize the default 'Reply-To' address and name. <code>test_mode</code> <code>val</code> (string or bool) Set the test mode to a specific email address or disable it. <code>log_disable</code> - Disable logging of email activities. <code>log_enable</code> - Enable logging of email activities. <code>logging</code> <code>connection</code> (x_class_mysql object), <code>table</code> (string), <code>log_success_mail</code> (bool, default false), <code>section</code> (string, default \"\") Configure and enable logging of email activities. <code>last_info</code> - Retrieve the last recorded information or error message from the last email operation. <code>send</code> <code>to</code> (string or array), <code>toname</code> (string), <code>title</code> (string), <code>mailContent</code> (string), <code>ishtml</code> (bool, default false), <code>FOOTER</code> (string, default false), <code>HEADER</code> (string, default false), <code>attachments</code> (string or array, default false) Send an email with specified parameters including recipients, content, attachments, and optional HTML formatting. <code>mail</code> <code>subject</code> (string), <code>content</code> (string), <code>receiver</code> (array), <code>cc</code> (array), <code>bcc</code> (array), <code>attachment</code> (array), <code>settings</code> (array, default empty array) Send an email using the provided settings and parameters, allowing for advanced configuration and overriding of default settings. <code>object</code> - Create and return a new instance of <code>x_class_mail_item</code>, allowing further adjustments and sending of emails."},{"location":"classes/x_class_mail.html#private-methods","title":"Private Methods","text":"Method Parameters Description <code>log_execute</code> <code>subject</code> (string), <code>content</code> (string), <code>receiver</code> (array), <code>attachments</code> (array), <code>cc</code> (array), <code>bcc</code> (array), <code>success</code> (bool), <code>debug_message</code> (string), <code>settings</code> (array) Log the details of the email operation to the database if logging is enabled. <code>create_table</code> - Create the logging table in the database if it does not already exist."},{"location":"classes/x_class_mail.html#details-about-transmission-methods","title":"Details about Transmission Methods","text":""},{"location":"classes/x_class_mail.html#send-method","title":"<code>send</code> Method","text":"<p>The <code>send</code> method in the <code>x_class_mail</code> class is used to send an email with specified parameters. It utilizes PHPMailer for sending emails and includes options for handling attachments, HTML content, and default templates.</p>"},{"location":"classes/x_class_mail.html#method-signature","title":"Method Signature","text":"<pre><code>public function send(\n    $to, \n    $toname, \n    $title, \n    $mailContent, \n    $ishtml = false, \n    $FOOTER = false, \n    $HEADER = false, \n    $attachments = false\n)\n</code></pre>"},{"location":"classes/x_class_mail.html#parameters","title":"Parameters","text":"Parameter Type Description <code>$to</code> <code>string</code> or <code>array</code> The recipient's email address. If an array, it should contain multiple recipient email addresses. <code>$toname</code> <code>string</code> The name of the recipient. <code>$title</code> <code>string</code> The subject line of the email. <code>$mailContent</code> <code>string</code> The body content of the email. <code>$ishtml</code> <code>bool</code> Indicates whether the email content is in HTML format. Defaults to <code>false</code> (plain text). <code>$FOOTER</code> <code>string</code> or <code>bool</code> Optional footer to append to the email content. If <code>false</code>, the class's default footer will be used. <code>$HEADER</code> <code>string</code> or <code>bool</code> Optional header to prepend to the email content. If <code>false</code>, the class's default header will be used. <code>$attachments</code> <code>string</code>, <code>array</code>, or <code>bool</code> Path(s) to file attachments. Can be a single path (string) or an array of paths. If <code>false</code>, no attachments are added."},{"location":"classes/x_class_mail.html#functionality","title":"Functionality","text":"<ol> <li>PHPMailer Initialization:</li> <li>Creates a new instance of <code>PHPMailer</code>.</li> <li> <p>Configures SMTP settings using the class properties.</p> </li> <li> <p>SMTP Configuration:</p> </li> <li>Sets the SMTP server details (<code>Host</code>, <code>SMTPAuth</code>, <code>Username</code>, <code>Password</code>, <code>SMTPSecure</code>, <code>Port</code>).</li> <li> <p>Configures additional options like keeping the SMTP connection alive and setting debug levels.</p> </li> <li> <p>HTML Content Handling:</p> </li> <li>Checks if <code>$ishtml</code> is <code>false</code> and <code>$this-&gt;html</code> is <code>true</code>. If so, it sets the email to be sent as HTML.</li> <li> <p>Uses <code>$ishtml</code> to decide if the email content is in HTML format or plain text.</p> </li> <li> <p>Insecure Connection Handling:</p> </li> <li> <p>If insecure SSL connections are allowed (<code>$this-&gt;allow_insecure_connection</code>), it configures SMTP options to ignore SSL certificate verification.</p> </li> <li> <p>Setting Sender and Reply-To:</p> </li> <li>Sets the 'From' address and name using <code>setFrom()</code>.</li> <li> <p>Sets the 'Reply-To' address and name using <code>addReplyTo()</code>.</p> </li> <li> <p>Recipient and Address Handling:</p> </li> <li>If <code>$this-&gt;test_mode</code> is set, it adds a test email address.</li> <li> <p>Adds recipients to the email using <code>addAddress()</code>. Handles both single and multiple recipients.</p> </li> <li> <p>Attachment Handling:</p> </li> <li> <p>Adds attachments if <code>$attachments</code> is provided. Supports both single and multiple attachments.</p> </li> <li> <p>Email Content Preparation:</p> </li> <li>Prepares the email body by combining the <code>$HEADER</code>, <code>$mailContent</code>, and <code>$FOOTER</code>.</li> <li> <p>Sets the email body using <code>Body</code>.</p> </li> <li> <p>Sending the Email:</p> </li> <li>Attempts to send the email using <code>send()</code>.</li> <li>Logs the outcome and updates the last information if logging is enabled.</li> </ol>"},{"location":"classes/x_class_mail.html#return-value","title":"Return Value","text":"<ul> <li>Returns <code>true</code> if the email is successfully sent.</li> <li>Returns <code>false</code> if there is an error sending the email.</li> </ul>"},{"location":"classes/x_class_mail.html#mail-method","title":"<code>mail</code> Method","text":"<p>The <code>mail</code> method provides more advanced email sending capabilities with the option to override default settings using a configuration array.</p>"},{"location":"classes/x_class_mail.html#method-signature_1","title":"Method Signature","text":"<pre><code>public function mail(\n    $subject, \n    $content, \n    $receiver, \n    $cc, \n    $bcc, \n    $attachment, \n    $settings = array()\n)\n</code></pre>"},{"location":"classes/x_class_mail.html#parameters_1","title":"Parameters","text":"Parameter Type Description <code>$subject</code> <code>string</code> The subject line of the email. <code>$content</code> <code>string</code> The body content of the email. <code>$receiver</code> <code>array</code> Recipients of the email. Format: <code>array(array(email, name), ...)</code>. <code>$cc</code> <code>array</code> CC recipients. Format: <code>array(array(email, name), ...)</code>. <code>$bcc</code> <code>array</code> BCC recipients. Format: <code>array(array(email, name), ...)</code>. <code>$attachment</code> <code>array</code> Attachments. Format: <code>array(array(path, name), ...)</code> or <code>array(path, ...)</code>. <code>$settings</code> <code>array</code> Configuration array to override default settings."},{"location":"classes/x_class_mail.html#functionality_1","title":"Functionality","text":"<ol> <li>PHPMailer Initialization:</li> <li>Creates a new instance of <code>PHPMailer</code>.</li> <li> <p>Configures SMTP settings based on the provided settings or defaults.</p> </li> <li> <p>SMTP Configuration:</p> </li> <li> <p>Overrides default SMTP settings if specified in <code>$settings</code>.</p> </li> <li> <p>HTML Content Handling:</p> </li> <li> <p>Configures HTML format based on <code>$settings</code> or defaults.</p> </li> <li> <p>Insecure Connection Handling:</p> </li> <li> <p>Configures SMTP options for insecure SSL connections based on <code>$settings</code>.</p> </li> <li> <p>Setting Sender and Reply-To:</p> </li> <li>Sets 'From' address and name using <code>setFrom()</code> from <code>$settings</code> or defaults.</li> <li> <p>Sets 'Reply-To' address and name using <code>addReplyTo()</code> from <code>$settings</code> or defaults.</p> </li> <li> <p>Recipient and Address Handling:</p> </li> <li> <p>Adds recipients to the email using <code>addAddress()</code>, <code>addCC()</code>, and <code>addBCC()</code>.</p> </li> <li> <p>Attachment Handling:</p> </li> <li> <p>Adds attachments using <code>addAttachment()</code> from <code>$settings</code>.</p> </li> <li> <p>Email Content Preparation:</p> </li> <li> <p>Prepares the email body by combining the <code>$HEADER</code>, <code>$content</code>, and <code>$FOOTER</code> from <code>$settings</code>.</p> </li> <li> <p>Sending the Email:</p> </li> <li>Attempts to send the email using <code>send()</code>.</li> <li>Logs the outcome and updates the last information if logging is enabled.</li> </ol>"},{"location":"classes/x_class_mail.html#return-value_1","title":"Return Value","text":"<ul> <li>Returns <code>true</code> if the email is successfully sent.</li> <li>Returns <code>false</code> if there is an error sending the email.</li> </ul>"},{"location":"classes/x_class_mail.html#summary","title":"Summary","text":"<ul> <li><code>send</code> Method: A straightforward method for sending emails with specific parameters and default settings. Ideal for most common email-sending scenarios.</li> <li><code>mail</code> Method: Provides advanced email-sending capabilities with customizable settings through a configuration array. Useful for scenarios requiring detailed customization or different settings for individual emails.</li> </ul> <p>Both methods leverage PHPMailer for email sending and include robust handling for various email features, ensuring flexibility and control over email dispatching.</p>"},{"location":"classes/x_class_mail_item.html","title":"PHP Mail Item","text":""},{"location":"classes/x_class_mail_item.html#class-documentation-x_class_mail_item","title":"Class Documentation: <code>x_class_mail_item</code>","text":""},{"location":"classes/x_class_mail_item.html#documentation","title":"Documentation","text":"<p>The <code>x_class_mail_item</code> class provides a structured way to prepare and send emails with customizable parameters such as recipients, attachments, and settings. It integrates with an external mail handling class (<code>x_class_mail</code>) to actually send the email.</p>"},{"location":"classes/x_class_mail_item.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_mail_item.html#php-modules","title":"PHP Modules","text":"<ul> <li>None (relies on an external mail handling class)</li> </ul>"},{"location":"classes/x_class_mail_item.html#external-classes","title":"External Classes","text":"<ul> <li><code>x_class_mail</code> (for sending emails)</li> </ul>"},{"location":"classes/x_class_mail_item.html#class-methods","title":"Class Methods","text":""},{"location":"classes/x_class_mail_item.html#__construct","title":"<code>__construct(...)</code>","text":"<p>Description: Initializes the <code>x_class_mail_item</code> instance with an <code>x_class_mail</code> object, which is used to send emails.</p> Parameter Type Description <code>x_class_mail</code> <code>x_class_mail</code> An instance of the <code>x_class_mail</code> class, responsible for sending the email. <p>Returns: - <code>void</code></p>"},{"location":"classes/x_class_mail_item.html#add_attachment","title":"<code>add_attachment(...)</code>","text":"<p>Description: Adds an attachment to the email. The attachment is specified by its path and a name.</p> Parameter Type Description <code>path</code> <code>string</code> The file path to the attachment. <code>name</code> <code>string</code> The name of the attachment as it will appear in the email. <p>Returns: - <code>void</code></p> <p>Example Usage: </p><pre><code>$mailItem-&gt;add_attachment('/path/to/file.pdf', 'file.pdf');\n</code></pre>"},{"location":"classes/x_class_mail_item.html#get_attachment","title":"<code>get_attachment(...)</code>","text":"<p>Description: Returns an array of all attachments added to the email.</p> Returns Type Description <code>array</code> <code>array</code> An array of attachments, each with its path and name. <p>Example Usage: </p><pre><code>$attachments = $mailItem-&gt;get_attachment();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#clear_attachment","title":"<code>clear_attachment(...)</code>","text":"<p>Description: Clears all attachments from the email.</p> Returns Type Description <code>void</code> <code>void</code> No return value. <p>Example Usage: </p><pre><code>$mailItem-&gt;clear_attachment();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#add_receiver","title":"<code>add_receiver(...)</code>","text":"<p>Description: Adds a recipient to the email.</p> Parameter Type Description <code>mail</code> <code>string</code> The recipient's email address. <code>name</code> <code>string</code> The recipient's name. <p>Returns: - <code>void</code></p> <p>Example Usage: </p><pre><code>$mailItem-&gt;add_receiver('recipient@example.com', 'Recipient Name');\n</code></pre>"},{"location":"classes/x_class_mail_item.html#get_receiver","title":"<code>get_receiver(...)</code>","text":"<p>Description: Returns an array of all recipients added to the email.</p> Returns Type Description <code>array</code> <code>array</code> An array of recipients, each with their email and name. <p>Example Usage: </p><pre><code>$receivers = $mailItem-&gt;get_receiver();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#clear_receiver","title":"<code>clear_receiver(...)</code>","text":"<p>Description: Clears all recipients from the email.</p> Returns Type Description <code>void</code> <code>void</code> No return value. <p>Example Usage: </p><pre><code>$mailItem-&gt;clear_receiver();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#add_cc","title":"<code>add_cc(...)</code>","text":"<p>Description: Adds a recipient to the CC (carbon copy) list.</p> Parameter Type Description <code>mail</code> <code>string</code> The CC recipient's email address. <code>name</code> <code>string</code> The CC recipient's name. <p>Returns: - <code>void</code></p> <p>Example Usage: </p><pre><code>$mailItem-&gt;add_cc('cc@example.com', 'CC Name');\n</code></pre>"},{"location":"classes/x_class_mail_item.html#get_cc","title":"<code>get_cc(...)</code>","text":"<p>Description: Returns an array of all CC recipients added to the email.</p> Returns Type Description <code>array</code> <code>array</code> An array of CC recipients, each with their email and name. <p>Example Usage: </p><pre><code>$cc = $mailItem-&gt;get_cc();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#clear_cc","title":"<code>clear_cc(...)</code>","text":"<p>Description: Clears all CC recipients from the email.</p> Returns Type Description <code>void</code> <code>void</code> No return value. <p>Example Usage: </p><pre><code>$mailItem-&gt;clear_cc();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#add_bcc","title":"<code>add_bcc(...)</code>","text":"<p>Description: Adds a recipient to the BCC (blind carbon copy) list.</p> Parameter Type Description <code>mail</code> <code>string</code> The BCC recipient's email address. <code>name</code> <code>string</code> The BCC recipient's name. <p>Returns: - <code>void</code></p> <p>Example Usage: </p><pre><code>$mailItem-&gt;add_bcc('bcc@example.com', 'BCC Name');\n</code></pre>"},{"location":"classes/x_class_mail_item.html#get_bcc","title":"<code>get_bcc(...)</code>","text":"<p>Description: Returns an array of all BCC recipients added to the email.</p> Returns Type Description <code>array</code> <code>array</code> An array of BCC recipients, each with their email and name. <p>Example Usage: </p><pre><code>$bcc = $mailItem-&gt;get_bcc();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#clear_bcc","title":"<code>clear_bcc(...)</code>","text":"<p>Description: Clears all BCC recipients from the email.</p> Returns Type Description <code>void</code> <code>void</code> No return value. <p>Example Usage: </p><pre><code>$mailItem-&gt;clear_bcc();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#add_setting","title":"<code>add_setting(...)</code>","text":"<p>Description: Adds a setting for the email, such as SMTP parameters or custom headers.</p> Parameter Type Description <code>name</code> <code>string</code> The name of the setting. <code>value</code> <code>mixed</code> The value of the setting. <p>Returns: - <code>void</code></p> <p>Example Usage: </p><pre><code>$mailItem-&gt;add_setting('smtp_server', 'smtp.example.com');\n</code></pre>"},{"location":"classes/x_class_mail_item.html#get_setting","title":"<code>get_setting(...)</code>","text":"<p>Description: Returns an array of all settings added to the email.</p> Returns Type Description <code>array</code> <code>array</code> An array of settings, each with a name and value. <p>Example Usage: </p><pre><code>$settings = $mailItem-&gt;get_setting();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#clear_setting","title":"<code>clear_setting(...)</code>","text":"<p>Description: Clears all settings from the email.</p> Returns Type Description <code>void</code> <code>void</code> No return value. <p>Example Usage: </p><pre><code>$mailItem-&gt;clear_setting();\n</code></pre>"},{"location":"classes/x_class_mail_item.html#send","title":"<code>send(...)</code>","text":"<p>Description: Sends the email with the configured parameters, including subject, content, recipients, CC, BCC, attachments, and settings.</p> Parameter Type Description <code>subject</code> <code>string</code> The subject of the email. <code>content</code> <code>string</code> The content/body of the email. <p>Returns: - <code>mixed</code> - The return value depends on the <code>mail</code> method of the <code>x_class_mail</code> class. Typically, this might be a boolean indicating success or failure.</p> <p>Example Usage: </p><pre><code>$mailItem-&gt;send('Subject Here', 'Email body content.');\n</code></pre>"},{"location":"classes/x_class_mail_template.html","title":"PHP Mail Template","text":""},{"location":"classes/x_class_mail_template.html#class-documentation-x_class_mail_template","title":"Class Documentation: <code>x_class_mail_template</code>","text":""},{"location":"classes/x_class_mail_template.html#documentation","title":"Documentation","text":"<p>The <code>x_class_mail_template</code> class provides a powerful interface for managing email templates in PHP applications. It allows you to set up, modify, retrieve, and delete email templates stored in a MySQL database. Templates can be customized with content substitutions and dynamically generated, making it highly adaptable for various scenarios such as newsletters, notifications, and other email-based communications.</p> <ul> <li>Substitutions: The class uses an internal array to manage substitutions. These are key-value pairs where the keys represent placeholders within the template content that should be replaced by specific values when generating the email.</li> <li>Table Management: The class automatically creates the required table if it doesn\u2019t exist, making it easier to integrate into new environments without requiring additional setup.</li> </ul>"},{"location":"classes/x_class_mail_template.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_mail_template.html#php-modules","title":"PHP Modules","text":"<ul> <li>MySQLi: Required for database operations.</li> </ul>"},{"location":"classes/x_class_mail_template.html#external-classes","title":"External Classes","text":"<ul> <li><code>x_class_mysql</code> (MySQL Database Connection Class): The class expects a MySQL connection object that provides methods like <code>select</code>, <code>query</code>, and <code>table_exists</code>.</li> </ul>"},{"location":"classes/x_class_mail_template.html#table-structure","title":"Table Structure","text":"<p>This section describes the table structure used by the Mail Template class to store email templates. The table is automatically created by the class if necessary for its functionality. Below is a summary of the columns and keys used in the table, along with their purposes.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each email template, ensuring that each template is individually trackable. <code>name</code> <code>varchar(256)</code> <code>NOT NULL</code> The name or identifier of the template. <code>subject</code> <code>text</code> <code>NULL</code> The subject line for the email template, providing context for the email. <code>description</code> <code>text</code> <code>NULL</code> A description of the template's purpose or content, useful for understanding the template's use case. <code>content</code> <code>text</code> <code>DEFAULT NULL</code> The main content of the email template, including the body of the email. <code>section</code> <code>varchar(128)</code> <code>DEFAULT NULL</code> For Multi Site Purposes to split database data in categories. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The timestamp when the template was created. Automatically set upon insertion. <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> The timestamp of the last modification to the template. Automatically updated on changes. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each email template is uniquely identifiable. <code>x_class_mail_template</code> Unique <code>name</code>, <code>section</code> Ensures that each combination of template name and section is unique, preventing duplicate entries for the same section."},{"location":"classes/x_class_mail_template.html#class-usage","title":"Class Usage","text":"Method/Variable Description Parameters Return Type <code>$x_class_mysql</code> Stores the x_class_mysql object. N/A Object <code>$table</code> Stores the name of the table used for storing templates. N/A String <code>$section</code> Section associated with templates, allowing categorization. N/A String <code>set_header</code> Sets the header for the email content. <code>string $header</code>: Header content. void <code>set_footer</code> Sets the footer for the email content. <code>string $footer</code>: Footer content. void <code>set_content</code> Sets the email body content along with the subject. <code>string $content</code>: Main content of the email.<code>string $subject</code>: Email subject. void <code>set_template</code> Loads a template from the database using the name and section. <code>string $name</code>: Template name. <code>bool</code> <code>create_table</code> Creates the table structure for storing email templates if it doesn\u2019t already exist. N/A void <code>reset_substitution</code> Resets all stored substitutions for template content. N/A void <code>add_substitution</code> Adds a substitution pair for replacing placeholders in the content. <code>string $name</code>: Placeholder text.<code>string $replace</code>: Replacement text. void <code>do_substitute</code> Applies the substitutions to a given text. <code>string $text</code>: The content to process. <code>string</code> <code>get_content</code> Retrieves the email content with optional substitution applied. <code>bool $substitute</code> (optional): Whether to apply substitutions. Default is <code>false</code>. <code>string</code> <code>get_subject</code> Retrieves the email subject with optional substitution applied. <code>bool $substitute</code> (optional): Whether to apply substitutions. Default is <code>false</code>. <code>string</code> <code>setup</code> Sets up a new template or overwrites an existing one. <code>string $name</code>: Template name.<code>string $subject</code>: Subject.<code>string $content</code>: Main content.<code>string $description</code> (optional): Description.<code>bool $overwrite</code> (optional): Whether to overwrite an existing template. <code>mixed</code> (insert ID or void) <code>change</code> Modifies an existing template by ID. <code>int $id</code>: Template ID.<code>string $name</code>: New name.<code>string $subject</code>: New subject.<code>string $content</code>: New content.<code>string $description</code> (optional): New description. void <code>name_exists</code> Checks if a template with a specific name exists in the current section. <code>string $name</code>: Name of the template. <code>bool</code> <code>get_name_by_id</code> Retrieves the name of a template based on its ID. <code>int $id</code>: Template ID. <code>string|bool</code> <code>id_exists</code> Checks if a template with a specific ID exists in the current section. <code>int $id</code>: Template ID. <code>bool</code> <code>id_delete</code> Deletes a template based on its ID. <code>int $id</code>: Template ID. <code>bool</code> <code>get_full</code> Retrieves all details of a template based on its ID. <code>int $id</code>: Template ID. <code>array|bool</code>"},{"location":"classes/x_class_mail_template.html#return-values","title":"Return Values","text":"<ul> <li>Functions that check for the existence of templates (<code>name_exists</code>, <code>id_exists</code>, etc.) return a boolean indicating success or failure.</li> <li>Functions like <code>setup</code> and <code>change</code> can return mixed values, such as insert IDs or boolean, depending on the context.</li> </ul>"},{"location":"classes/x_class_mysql.html","title":"PHP MySQL","text":""},{"location":"classes/x_class_mysql.html#class-documentation-x_class_mysql","title":"Class Documentation: <code>x_class_mysql</code>","text":""},{"location":"classes/x_class_mysql.html#documentation","title":"Documentation","text":"<p>The <code>x_class_mysql</code> class provides an interface for interacting with a MySQL database. It encapsulates common database operations and includes additional features for error handling and logging.</p> <ul> <li>Error Handling: Errors are managed by the <code>handler</code> method which updates internal error states and logs errors if configured.  </li> <li>Benchmarking: Provides a simple benchmarking system to count operations.  </li> <li>Logging: Allows configuration of logging to both the database and log files, with options to control logging behavior.  </li> <li>Parameter Binding: When using prepared statements, ensure that <code>bindarray</code> is correctly formatted. The <code>type</code> key in each array element specifies the type of data being bound.  </li> </ul>"},{"location":"classes/x_class_mysql.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_mysql.html#php-modules","title":"PHP Modules","text":"<ul> <li><code>MySQLi</code>: Required for database interactions.  </li> <li>Exception Handling: Required for handling errors.  </li> </ul>"},{"location":"classes/x_class_mysql.html#external-classes","title":"External Classes","text":"<ul> <li><code>none</code>: None External Classes are Required.  </li> </ul>"},{"location":"classes/x_class_mysql.html#table-structure","title":"Table Structure","text":"<p>This section describes the table structure used by the MySQL class to log failures if logging is activated. The table is automatically created by the class if necessary. Below is a summary of the columns and keys used in the table, along with their purposes.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each log entry, ensuring that each record can be individually tracked. <code>url</code> <code>varchar(256)</code> <code>DEFAULT NULL</code> Stores the URL related to the log entry, providing context for where the failure occurred. <code>init</code> <code>text</code> <code>NULL</code> Contains initialization data, if available, that might provide additional context about the failure. <code>exception</code> <code>text</code> <code>NULL</code> Logs the text of any exception that was thrown, useful for diagnosing issues. <code>sqlerror</code> <code>text</code> <code>NULL</code> Records the MySQL error message if there was an SQL error, aiding in troubleshooting. <code>output</code> <code>text</code> <code>NULL</code> Stores the output related to the error, which can provide additional details about the failure. <code>success</code> <code>int(1)</code> <code>NULL</code> Indicates the result of the query: <code>1</code> for success, <code>2</code> for error, or <code>NULL</code> if not applicable. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> Records the timestamp when the log entry was created, allowing for chronological tracking. <code>section</code> <code>varchar(128)</code> <code>DEFAULT NULL</code> For Multi Site Purposes to split database data in categories. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each log entry is uniquely identifiable."},{"location":"classes/x_class_mysql.html#class-usage","title":"Class Usage","text":""},{"location":"classes/x_class_mysql.html#constructors","title":"Constructors","text":"Method/Function Parameters Description <code>__construct</code> <code>($hostname, $username, $password, $database, $port)</code> Initializes a new MySQL connection using the provided credentials and database information. <code>construct</code> - Returns a new instance of <code>x_class_mysql</code> with the same connection parameters. <code>construct_copy</code> - Returns the current instance of <code>x_class_mysql</code>."},{"location":"classes/x_class_mysql.html#status-and-errors","title":"Status and Errors","text":"Method/Function Parameters Description <code>status</code> - Alias for <code>ping()</code>. Checks if the database connection is alive. <code>con</code> - Returns the MySQLi connection object. <code>lastError</code> - Returns the last error that occurred during database operations. <code>fullError</code> - Returns detailed error information. <code>ping</code> - Checks if the MySQL server is reachable. Uses <code>mysqli_ping()</code>. <code>inject</code> <code>$mysqli</code> Injects an external MySQLi connection object. <code>displayError</code> <code>$exit = true, $response_code = 503</code> Displays an error message and optionally exits the script."},{"location":"classes/x_class_mysql.html#benchmarking","title":"Benchmarking","text":"Method/Function Parameters Description <code>benchmark_get</code> - Retrieves the current benchmark count. <code>benchmark_raise</code> <code>$raise = 1</code> Increments the benchmark counter. <code>benchmark_config</code> <code>$bool = false, $preecookie = \"\"</code> Configures benchmarking and session cookie prefix."},{"location":"classes/x_class_mysql.html#logging","title":"Logging","text":"Method/Function Parameters Description <code>logfile_messages</code> <code>$bool = false</code> Enables or disables logging of error messages to a file. <code>log_disable</code> - Disables logging. <code>log_status</code> - Returns whether logging is active. <code>log_enable</code> - Enables logging if the logging table is configured. <code>log_config</code> <code>$table = \"mysqllogging\", $section = \"\", $logall = false</code> Configures logging settings including table name, section, and whether to log all messages. <code>stop_on_error</code> <code>$bool = false</code> Configures whether to stop execution on error. <code>display_on_error</code> <code>$bool = false</code> Configures whether to display errors."},{"location":"classes/x_class_mysql.html#table-functions","title":"Table Functions","text":"Method Name Description Parameters Return Value <code>table_exists</code> Checks if a table exists in the database by trying to select from it. - <code>$tablename</code>: Name of the table to check. Returns the result of the query. <code>true</code> if the table exists, <code>false</code> otherwise. <code>table_delete</code> Deletes (drops) a specified table from the database. - <code>$tablename</code>: Name of the table to delete. Executes the <code>DROP TABLE</code> query and returns the result of the operation. <code>table_create</code> Creates a table with the given name. - <code>$tablename</code>: Name of the table to create. Executes the <code>CREATE TABLE</code> query and returns the result of the operation. <code>auto_increment</code> Sets the auto-increment value for a specified table. - <code>$table</code>: Name of the table.  - <code>$value</code>: The new auto-increment value. Executes the <code>ALTER TABLE</code> query to set auto-increment and returns the result of the operation. <code>table_backup</code> Backs up the structure and optionally the data of a specified table, saving it to a file if provided. - <code>$table</code>: Name of the table to back up.  - <code>$filepath</code> (optional): Path to save the backup file.  - <code>$withdata</code> (optional): Boolean to include table data (default: <code>true</code>).  - <code>$dropstate</code> (optional): Boolean to include <code>DROP TABLE IF EXISTS</code> in backup (default: <code>false</code>). Returns the table structure and data as a string. Optionally writes the backup to a file if <code>$filepath</code> is provided."},{"location":"classes/x_class_mysql.html#database-functions","title":"Database Functions","text":"Method Name Description Parameters Return Value <code>database_delete</code> Deletes (drops) a specified database. - <code>$database</code>: The name of the database to delete. Executes the <code>DROP DATABASE</code> query and returns the result of the operation. <code>database_create</code> Creates a new database with the given name. - <code>$database</code>: The name of the database to create. Executes the <code>CREATE DATABASE</code> query and returns the result of the operation. <code>database_select</code> Selects a specific database for subsequent queries. - <code>$database</code>: The name of the database to select. Returns <code>true</code> if the database is selected successfully, or handles errors and returns <code>false</code> on failure."},{"location":"classes/x_class_mysql.html#transactions","title":"Transactions","text":"Method Name Description Parameters Return Value <code>transaction</code> Starts a database transaction if none is already running. Optionally disables auto-commit. - <code>$autocommit</code>: Boolean flag to set whether auto-commit is enabled (default: <code>false</code>). Returns <code>true</code> if the transaction starts successfully, <code>false</code> if already running, or handles exceptions gracefully. <code>rollback</code> Rolls back the current transaction if one is running. N/A Returns <code>true</code> if rollback is successful, <code>false</code> if no transaction is running, or handles exceptions. <code>transactionStatus</code> Checks whether a transaction is currently active. N/A Returns <code>true</code> if a transaction is running, <code>false</code> otherwise. <code>commit</code> Commits the current transaction if one is running. N/A Returns <code>true</code> if commit is successful, <code>false</code> if no transaction is running, or handles exceptions."},{"location":"classes/x_class_mysql.html#alias-functions","title":"Alias Functions","text":"Method Name Description Parameters Return Value <code>__destruct</code> Destructor method that closes the connection or performs cleanup when the object is destroyed. N/A No return value. The function doesn't perform any operations but is defined to properly destroy the object. <code>escape</code> Escapes a variable to make it safe for use in an SQL query. Handles both simple values and arrays/objects. - <code>$val</code>: The value to escape. Can be a string, object, or array. Returns the escaped string using <code>mysqli_real_escape_string()</code> or serialized object/array (escaped). <code>next_result</code> Advances the result pointer to the next result in a multi-query execution. N/A Returns the result of <code>mysqli_next_result()</code>, or <code>false</code> if an error occurs. <code>store_result</code> Stores the result set from the last query in the multi-query execution. N/A Returns the result set from <code>mysqli_store_result()</code>, or <code>false</code> on failure. <code>more_results</code> Checks if there are more results available in the multi-query execution. N/A Returns the result of <code>mysqli_more_results()</code>, or <code>false</code> on failure. <code>fetch_array</code> Fetches a result row as an associative array, numeric array, or both. - <code>$result</code>: The result set resource returned from a query. Returns the result row as an array, or <code>false</code> if an error occurs. <code>fetch_object</code> Fetches a result row as an object. - <code>$result</code>: The result set resource returned from a query. Returns the result row as an object, or <code>false</code> on failure. <code>free_result</code> Frees the memory associated with a result set. - <code>$result</code>: The result set resource to free. Returns <code>true</code> on success, or <code>false</code> on failure. <code>use_result</code> Initiates retrieval of a result set from a query that is to be retrieved row by row. N/A Returns the result of <code>mysqli_use_result()</code>, or <code>false</code> on failure. <code>free_all</code> Frees all result sets and fetches the remaining results in a multi-query execution. N/A Returns an array of all results fetched from the multi-query execution."},{"location":"classes/x_class_mysql.html#multi-query","title":"Multi Query","text":"Method Name Description Parameters Return Value <code>multi_query</code> Executes a multi-query SQL string. Allows executing multiple SQL statements in a single query. - <code>$query</code>: The SQL query string containing multiple statements. Returns the result of <code>multi_query()</code> or, if an exception occurs, handles it and returns <code>false</code>. <code>multi_query_file</code> Executes a multi-query SQL from a file. Reads an SQL file and runs the queries contained within it. - <code>$file</code>: The path to the file containing the SQL queries. Returns the result of the <code>multi_query()</code> operation on the SQL file's content or <code>false</code> if the file doesn't exist."},{"location":"classes/x_class_mysql.html#row-functions","title":"Row Functions","text":"Method Name Description Parameters Return Value <code>row_element_increase</code> Increases a numeric field in a specified table by a given value (defaults to 1). - <code>$table</code>: The table name.  - <code>$nameidfield</code>: The column name used for identifying the row.  - <code>$id</code>: The identifier value for the row.  - <code>$increasefield</code>: The field to increase.  - <code>$increasevalue</code>: Amount to add. Returns <code>false</code> if <code>$id</code> or <code>$increasevalue</code> is not numeric; otherwise, it returns the result of the SQL <code>UPDATE</code> query. <code>row_element_decrease</code> Decreases a numeric field in a specified table by a given value (defaults to 1). - <code>$table</code>: The table name.  - <code>$nameidfield</code>: The column name used for identifying the row.  - <code>$id</code>: The identifier value for the row.  - <code>$decreasefield</code>: The field to decrease.  - <code>$decreasevalue</code>: Amount to subtract. Returns <code>false</code> if <code>$id</code> or <code>$decreasevalue</code> is not numeric; otherwise, it returns the result of the SQL <code>UPDATE</code> query. <code>row_get</code> Retrieves an entire row from a specified table based on the row ID. - <code>$table</code>: The table name.  - <code>$id</code>: The identifier value for the row.  - <code>$row</code>: The column name used to locate the row (default is <code>\"id\"</code>). Returns the row data as an array. <code>row_element_get</code> Retrieves a specific element from a row in the table. If the element is not found, it returns a fallback value. - <code>$table</code>: The table name.  - <code>$id</code>: The identifier value for the row.  - <code>$elementrow</code>: The column from which to fetch the value.  - <code>$fallback</code>: The value to return if the element isn't found.  - <code>$row</code>: Identifier column (default: <code>\"id\"</code>). Returns the value of the specified column or <code>$fallback</code> if not found. <code>row_element_change</code> Changes the value of a specific column in a row. - <code>$table</code>: The table name.  - <code>$id</code>: The identifier value for the row.  - <code>$element</code>: The new value to set.  - <code>$elementrow</code>: The column to change.  - <code>$row</code>: Identifier column (default: <code>\"id\"</code>). Returns the result of the SQL <code>UPDATE</code> query. <code>row_exist</code> Checks if a row with a specific ID exists in the table. - <code>$table</code>: The table name.  - <code>$id</code>: The identifier value for the row.  - <code>$row</code>: The column to match for existence (default: <code>\"id\"</code>). Returns <code>true</code> if the row exists, otherwise <code>false</code>. <code>rows_get</code> Retrieves multiple rows from the table where the column matches the specified value. - <code>$table</code>: The table name.  - <code>$id</code>: The identifier value for the rows.  - <code>$row</code>: The column name used for filtering rows (default: <code>\"id\"</code>). Returns an array of rows that match the condition. <code>row_del</code> Deletes a row in the specified table based on the row's ID. - <code>$table</code>: The table name.  - <code>$id</code>: The identifier value for the row.  - <code>$row</code>: The column to identify the row (default: <code>\"id\"</code>). Returns the result of the SQL <code>DELETE</code> query."},{"location":"classes/x_class_mysql.html#private-methods","title":"Private Methods","text":"Method/Function Parameters Description <code>log</code> <code>$output, $sqlerror, $exception, $init, $boolsuccess, $nolog = false</code> Logs the error details to the database or file if logging is enabled. <code>handler</code> <code>$excecution, $exception, $init, $nolog = false</code> Handles the execution and error logging."},{"location":"classes/x_class_mysql.html#primary","title":"Primary","text":""},{"location":"classes/x_class_mysql.html#select","title":"<code>select(...)</code>","text":"<p>Retrieves data from the database based on the provided query. It supports fetching single or multiple rows.</p> Method <code>select</code> Parameters <code>string $query</code>  SQL query to execute  <code>bool $multiple</code>  Whether to fetch multiple rows (default: <code>false</code>)  <code>mixed $bindarray</code>  Array of binding parameters or <code>false</code> for direct query  <code>int $fetch_type</code>  Type of result array (e.g., <code>MYSQLI_ASSOC</code>, <code>MYSQLI_NUM</code>) Return Value Returns an array of results if successful; <code>false</code> if failed"},{"location":"classes/x_class_mysql.html#query","title":"<code>query(...)</code>","text":"<p>Executes a general query (e.g., INSERT, DELETE, etc.) and returns the result set.</p> Method <code>query</code> Parameters <code>string $query</code>  SQL query to execute  <code>mixed $bindarray</code>  Array of binding parameters or <code>false</code> for direct query Return Value Returns the result set object if successful; <code>false</code> if failed"},{"location":"classes/x_class_mysql.html#update","title":"<code>update(...)</code>","text":"<p>Executes an update statement and returns the number of affected rows.</p> Method <code>update</code> Parameters <code>string $query</code>  SQL query to execute  <code>mixed $bindarray</code>  Array of binding parameters or <code>false</code> for direct query Return Value Number of affected rows if successful; <code>false</code> if failed"},{"location":"classes/x_class_mysql.html#insert","title":"<code>insert(...)</code>","text":"<p>Inserts a new record into a specified table and returns the ID of the inserted record.</p> Method <code>insert</code> Parameters <code>string $table</code>  Name of the table  <code>array $array</code>  Associative array of field names and values  <code>mixed $bindarray</code>  Array of binding parameters or <code>false</code> for direct query Return Value Inserted ID if successful; <code>false</code> if failed"},{"location":"classes/x_class_mysql.html#binding-information","title":"Binding Information","text":"<p>If <code>$bindarray</code> is provided for secure data transmission via mysql buffer:</p> <code>bindarray</code> Format Description <code>Array[X][\"value\"]</code> Value to be bound to the query <code>Array[X][\"type\"]</code> Data type of the value (<code>s</code> = string, <code>i</code> = integer, <code>d</code> = double, <code>b</code> = blob)"},{"location":"classes/x_class_mysql_item.html","title":"PHP MySQL Item","text":""},{"location":"classes/x_class_mysql_item.html#class-documentation-x_class_mysql_item","title":"Class Documentation: <code>x_class_mysql_item</code>","text":""},{"location":"classes/x_class_mysql_item.html#documentation","title":"Documentation","text":"<p>The <code>x_class_mysql_item</code> class is designed to manage database records efficiently. It provides a convenient way to interact with a single database item by abstracting common operations such as retrieving, updating, and deleting records based on a specified primary key. This class simplifies CRUD (Create, Read, Update, Delete) operations, especially when dealing with single-row queries in a MySQL database.</p> <ul> <li>Parameter Binding: The <code>update()</code> method uses parameter binding to prevent SQL injection, making it a secure option for dynamic queries.  </li> <li>Flexible ID Field: The class allows for the use of custom ID fields through the <code>$id_field</code> parameter, enabling interaction with tables that use non-standard primary keys.</li> </ul>"},{"location":"classes/x_class_mysql_item.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_mysql_item.html#php-modules","title":"PHP Modules","text":"<ul> <li><code>MySQLi</code>: Required for executing database queries.</li> </ul>"},{"location":"classes/x_class_mysql_item.html#external-classes","title":"External Classes","text":"<ul> <li><code>x_class_mysql</code>: Assumes a MySQL connection object that supports <code>select()</code> and <code>query()</code> methods.</li> </ul>"},{"location":"classes/x_class_mysql_item.html#method-library","title":"Method Library","text":"Method Description <code>__construct($x_class_mysql, $tablename, $id, $id_field = \"id\")</code> Initializes the class with a MySQL connection, table name, item ID, and optional ID field. <code>get($field)</code> Retrieves the value of a specific field for the current item. <code>get_array()</code> Returns an associative array of the current item\u2019s fields and values. <code>update($field, $value)</code> Updates a specific field of the current item with a new value. <code>update_null($field)</code> Sets a specific field of the current item to NULL. <code>delete()</code> Deletes the current item from the database. <code>clone($id)</code> Creates a new <code>x_class_mysql_item</code> instance for another item using the same table structure."},{"location":"classes/x_class_mysql_item.html#method-details","title":"Method Details","text":""},{"location":"classes/x_class_mysql_item.html#__construct","title":"<code>__construct(...)</code>","text":"Parameter Type Default Description <code>$mysql</code> Object MySQLi connection object. <code>$tablename</code> String The name of the table to interact with. <code>$id</code> Mixed The ID of the current item (can be numeric or string). <code>$id_field</code> String <code>\"id\"</code> The name of the ID field in the table. <p>Description: This constructor initializes the <code>x_class_mysql_item</code> object with a MySQL connection, the table name, the ID of the item, and the ID field name. The ID field defaults to <code>\"id\"</code> but can be customized as needed.</p>"},{"location":"classes/x_class_mysql_item.html#get","title":"<code>get(...)</code>","text":"Parameter Type Description <code>$field</code> String The name of the field to retrieve. Return Type Description Mixed Returns the value of the specified field or <code>false</code> if the field does not exist. <p>Description: Fetches the value of a specific field for the current item based on the provided ID. If the item or field does not exist, it returns <code>false</code>.</p>"},{"location":"classes/x_class_mysql_item.html#get_array","title":"<code>get_array(...)</code>","text":"Return Type Description Array Returns an associative array of the current item's fields and values. <p>Description: Retrieves the entire row for the current item as an associative array, with the field names as keys and their corresponding values as the array values. If the item is not found, it returns <code>false</code>.</p>"},{"location":"classes/x_class_mysql_item.html#update","title":"<code>update(...)</code>","text":"Parameter Type Description <code>$field</code> String The field to update. <code>$value</code> Mixed The new value to set for the field. Return Type Description Bool Returns <code>true</code> on success, <code>false</code> on failure. <p>Description: Updates a specific field of the current item with a new value. This method uses parameter binding to protect against SQL injection.</p>"},{"location":"classes/x_class_mysql_item.html#update_null","title":"<code>update_null(...)</code>","text":"Parameter Type Description <code>$field</code> String The field to set to <code>NULL</code>. Return Type Description Bool Returns <code>true</code> on success, <code>false</code> on failure. <p>Description: Sets a specific field of the current item to <code>NULL</code>. This operation is useful for resetting fields that may need to have their values removed.</p>"},{"location":"classes/x_class_mysql_item.html#delete","title":"<code>delete(...)</code>","text":"Return Type Description Bool Returns <code>true</code> on success, <code>false</code> on failure. <p>Description: Deletes the current item from the database based on its ID. This method removes the row corresponding to the ID in the specified table.</p>"},{"location":"classes/x_class_mysql_item.html#clone","title":"<code>clone(...)</code>","text":"Parameter Type Description <code>$id</code> Mixed The ID of the item to clone. Return Type Description Object Returns a new <code>x_class_mysql_item</code> instance for the specified ID. <p>Description: Creates and returns a new <code>x_class_mysql_item</code> object that references another item in the same table but with a different ID. This allows for easy manipulation of different items without needing to reinitialize the class.</p>"},{"location":"classes/x_class_perm.html","title":"PHP Permission","text":""},{"location":"classes/x_class_perm.html#class-documentation-x_class_perm","title":"Class Documentation: <code>x_class_perm</code>","text":""},{"location":"classes/x_class_perm.html#documentation","title":"Documentation","text":"<p>The <code>x_class_perm</code> class provides a comprehensive system for managing permissions associated with references in a database. It supports creating tables, retrieving, adding, and removing permissions for specific references.</p>"},{"location":"classes/x_class_perm.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_perm.html#php-modules","title":"PHP Modules","text":"Module Description <code>mysqli</code> PHP extension for MySQL database interaction."},{"location":"classes/x_class_perm.html#external-classes","title":"External Classes","text":"Class Description <code>x_class_mysql</code> Custom class or wrapper for MySQL database operations (assumed). <code>x_class_perm_item</code> Custom class for managing permissions at a reference level (assumed)."},{"location":"classes/x_class_perm.html#table-structure","title":"Table Structure","text":"<p>This section describes the table structure used by the Permissions class to store permissions for various objects. The table is automatically created by the class if required for its functionality. Below is a summary of the columns and keys used in the table, along with their purposes.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each permission entry, ensuring that each record can be individually tracked. <code>ref</code> <code>int(10)</code> <code>NOT NULL</code> A reference number associated with the permission, used to link the permission to a specific object or entity. <code>content</code> <code>text</code> <code>NOT NULL</code> Contains the permission data in serialized or structured format, defining the access rights. <code>section</code> <code>varchar(128)</code> <code>DEFAULT NULL</code> For Multi Site Purposes to split database data in categories. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> The timestamp when the permission entry was created. Automatically set upon insertion. <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> The timestamp of the last modification to the permission entry. Automatically updated on changes. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each permission entry is uniquely identifiable. <code>x_class_perm</code> Unique <code>ref</code>, <code>section</code> Ensures that each combination of reference and section is unique, preventing duplicate permissions for the same section."},{"location":"classes/x_class_perm.html#class-usage","title":"Class Usage","text":""},{"location":"classes/x_class_perm.html#__construct","title":"<code>__construct(...)</code>","text":"<p>Initializes an instance of the <code>x_class_perm</code> class and creates the table if it does not exist.</p> Parameter Type Description <code>$mysql</code> <code>object</code> An instance of the MySQL class used for database operations. <code>$tablename</code> <code>string</code> The name of the table where permissions are stored. <code>$section</code> <code>string</code> Optional section identifier for permissions. Default is an empty string."},{"location":"classes/x_class_perm.html#create_table","title":"<code>create_table(...)</code>","text":"<p>Creates the permissions table if it does not exist.</p> Parameter Type Description None - Creates a table with columns for ID, reference, content, section, creation, and modification timestamps."},{"location":"classes/x_class_perm.html#get_perm","title":"<code>get_perm(...)</code>","text":"<p>Retrieves permissions for a specific reference.</p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier to get permissions for. <p>Returns: <code>array</code> - An array of permissions associated with the reference.</p>"},{"location":"classes/x_class_perm.html#has_perm","title":"<code>has_perm(...)</code>","text":"<p>Checks if a specific permission is assigned to a reference.</p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier to check permissions for. <code>$permname</code> <code>string</code> The name of the permission to check. <p>Returns: <code>bool</code> - <code>true</code> if the permission exists, <code>false</code> otherwise.</p>"},{"location":"classes/x_class_perm.html#add_perm","title":"<code>add_perm(...)</code>","text":"<p>Adds a new permission to a reference.</p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier to add a permission to. <code>$permname</code> <code>string</code> The name of the permission to add. <p>Returns: <code>bool</code> - Always returns <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm.html#check_perm","title":"<code>check_perm(...)</code>","text":"<p>Checks if a reference has multiple permissions.</p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier to check permissions for. <code>$array</code> <code>array</code> Array of permission names to check. <code>$or</code> <code>bool</code> Optional. If <code>true</code>, checks if any permission matches; if <code>false</code>, checks if all match. Default is <code>false</code>. <p>Returns: <code>bool</code> - <code>true</code> if the condition is met based on the <code>$or</code> parameter.</p>"},{"location":"classes/x_class_perm.html#set_perm","title":"<code>set_perm(...)</code>","text":"<p>Sets permissions for a specific reference. </p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier to set permissions for. <code>$array</code> <code>array</code> The array of permissions to set. <p>Returns: <code>bool</code> - <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm.html#remove_perm","title":"<code>remove_perm(...)</code>","text":"<p>Removes a specific permission from a reference.</p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier to remove a permission from. <code>$permname</code> <code>string</code> The name of the permission to remove. <p>Returns: <code>bool</code> - <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm.html#remove_perms","title":"<code>remove_perms(...)</code>","text":"<p>Removes all permissions for a specific reference.</p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier to remove all permissions for. <p>Returns: <code>bool</code> - <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm.html#delete_ref","title":"<code>delete_ref(...)</code>","text":"<p>Deletes a reference and its associated permissions from the table.</p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier to delete from the table. <p>Returns: <code>bool</code> - <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm.html#item","title":"<code>item(...)</code>","text":"<p>Gets an instance of <code>x_class_perm_item</code> for a specific reference.</p> Parameter Type Description <code>$ref</code> <code>int</code> The reference identifier for which to get an item. <p>Returns: <code>x_class_perm_item</code> - An instance of the <code>x_class_perm_item</code> class with permissions for the specified reference.</p>"},{"location":"classes/x_class_perm_item.html","title":"PHP Permission Item","text":""},{"location":"classes/x_class_perm_item.html#class-documentation-x_class_perm_item","title":"Class Documentation: <code>x_class_perm_item</code>","text":""},{"location":"classes/x_class_perm_item.html#documentation","title":"Documentation","text":"<p>The <code>x_class_perm_item</code> class provides functionality for managing permissions associated with a reference in a database table. It supports operations such as adding, removing, checking permissions, and managing the permissions of a specific reference.</p>"},{"location":"classes/x_class_perm_item.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_perm_item.html#php-modules","title":"PHP Modules","text":"Module/Class Description <code>mysqli</code> PHP extension for MySQL database interaction."},{"location":"classes/x_class_perm_item.html#external-classes","title":"External Classes","text":"Module/Class Description <code>x_class_mysql</code> Custom class or wrapper for MySQL database operations (assumed)."},{"location":"classes/x_class_perm_item.html#class-usage","title":"Class Usage","text":""},{"location":"classes/x_class_perm_item.html#__construct","title":"<code>__construct(...)</code>","text":"<p>Initializes an instance of the <code>x_class_perm_item</code> class.</p> Parameter Type Description <code>$mysql</code> <code>object</code> An instance of the MySQL class used for database operations. <code>$tablename</code> <code>string</code> The name of the table where permissions are stored. <code>$section</code> <code>string</code> The section identifier for permissions. <code>$ref</code> <code>string</code> The reference identifier for which permissions are managed. <code>$permissions</code> <code>array</code> Optional array of initial permissions. Default is an empty array."},{"location":"classes/x_class_perm_item.html#refresh","title":"<code>refresh(...)</code>","text":"<p>Updates the local permissions array by fetching data from the database.</p> Parameter Type Description None - Fetches permissions from the database and updates the local <code>permissions</code> array."},{"location":"classes/x_class_perm_item.html#has_perm","title":"<code>has_perm(...)</code>","text":"<p>Checks if a specific permission is present in the current permissions.</p> Parameter Type Description <code>$permname</code> <code>string</code> The name of the permission to check. <p>Returns: <code>bool</code> - <code>true</code> if the permission exists, <code>false</code> otherwise.</p>"},{"location":"classes/x_class_perm_item.html#add_perm","title":"<code>add_perm(...)</code>","text":"<p>Adds a new permission to the current set of permissions.</p> Parameter Type Description <code>$permname</code> <code>string</code> The name of the permission to add. <p>Returns: <code>bool</code> - Always returns <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm_item.html#check_perm","title":"<code>check_perm(...)</code>","text":"<p>Checks if the current permissions satisfy a set of conditions.</p> Parameter Type Description <code>$array</code> <code>array</code> Array of permission names to check. <code>$or</code> <code>bool</code> Optional. If <code>true</code>, checks if any permission matches; if <code>false</code>, checks if all match. Default is <code>false</code>. <p>Returns: <code>bool</code> - <code>true</code> if the condition is met based on the <code>$or</code> parameter.</p>"},{"location":"classes/x_class_perm_item.html#remove_perm","title":"<code>remove_perm(...)</code>","text":"<p>Removes a specific permission from the current set of permissions.</p> Parameter Type Description <code>$permname</code> <code>string</code> The name of the permission to remove. <p>Returns: <code>bool</code> - <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm_item.html#set_perm","title":"<code>set_perm(...)</code>","text":"<p>Updates or inserts permissions for the reference in the database.</p> Parameter Type Description <code>$ref</code> <code>string</code> The reference identifier. <code>$array</code> <code>array</code> The array of permissions to set. <p>Returns: <code>bool</code> - <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm_item.html#remove_perms","title":"<code>remove_perms(...)</code>","text":"<p>Removes all permissions associated with the reference.</p> Parameter Type Description None - Removes all permissions for the current reference. <p>Returns: <code>bool</code> - <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_perm_item.html#delete_ref","title":"<code>delete_ref(...)</code>","text":"<p>Deletes the reference and its associated permissions from the database.</p> Parameter Type Description None - Deletes the record for the current reference. <p>Returns: <code>bool</code> - <code>true</code> if the operation is successful.</p>"},{"location":"classes/x_class_redis.html","title":"PHP Redis","text":""},{"location":"classes/x_class_redis.html#class-documentation-x_class_redis","title":"Class Documentation: <code>x_class_redis</code>","text":""},{"location":"classes/x_class_redis.html#documentation","title":"Documentation","text":"<p>The <code>x_class_redis</code> class provides a wrapper for interacting with a Redis database. It includes methods for connecting to Redis, checking connection status, and performing various operations such as adding and retrieving strings and lists.</p> <ul> <li>Error Logging: The class logs errors to the PHP error log if the Redis connection fails.  </li> <li>Prefix Handling: The optional prefix (<code>$pre</code>) is prepended to all Redis keys to avoid key collisions.  </li> <li>Redis Methods: Methods like <code>set</code>, <code>get</code>, <code>lpush</code>, and <code>lrange</code> are directly invoked on the Redis instance. Ensure that these methods are supported by the Redis extension.  </li> </ul>"},{"location":"classes/x_class_redis.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_redis.html#php-modules","title":"PHP Modules","text":"<ul> <li>Redis: The PHP Redis extension must be installed and enabled.</li> </ul>"},{"location":"classes/x_class_redis.html#external-classes","title":"External Classes","text":"<p>None external classes required.</p>"},{"location":"classes/x_class_redis.html#method-library","title":"Method Library","text":"Method Description <code>__construct($host, $port, $pre = \"\")</code> Constructor for initializing the Redis connection. Requires Redis server host, port, and an optional prefix. <code>valid()</code> Checks if the Redis connection is valid. <code>redis()</code> Returns the Redis instance if connected; otherwise, returns <code>false</code>. <code>ping()</code> Sends a ping command to the Redis server to check if it is responsive. <code>keys($pre = false, $after = \"\")</code> Retrieves keys from Redis matching the specified prefix and suffix. <code>add_string($name, $value)</code> Adds a string value to Redis with a specified key. <code>add_list($name, $value)</code> Adds multiple values to a Redis list with a specified key. <code>get_string($name)</code> Retrieves a string value from Redis by key. <code>get_list($name, $start, $end)</code> Retrieves a range of values from a Redis list by key."},{"location":"classes/x_class_redis.html#method-details","title":"Method Details","text":""},{"location":"classes/x_class_redis.html#__construct","title":"<code>__construct(...)</code>","text":"Parameter Type Default Description <code>$host</code> String The hostname or IP address of the Redis server. <code>$port</code> Integer The port number on which the Redis server is listening. <code>$pre</code> String <code>\"\"</code> Optional prefix to be prepended to Redis keys. <p>Description: Initializes the Redis client, attempts to connect to the specified Redis server, and sets an optional prefix for keys. Logs an error if the connection fails.</p>"},{"location":"classes/x_class_redis.html#valid","title":"<code>valid(...)</code>","text":"Return Type Description Boolean Returns <code>true</code> if the Redis connection is valid; otherwise, <code>false</code>. <p>Description: Checks if the Redis connection was successfully established.</p>"},{"location":"classes/x_class_redis.html#redis","title":"<code>redis(...)</code>","text":"Return Type Description Redis / Boolean Returns the Redis instance if connected; otherwise, <code>false</code>. <p>Description: Provides access to the Redis instance if the connection is valid.</p>"},{"location":"classes/x_class_redis.html#ping","title":"<code>ping(...)</code>","text":"Return Type Description String / Boolean Returns the response from the Redis server to the ping command, or <code>false</code> if not connected. <p>Description: Sends a ping command to the Redis server and returns the server's response to verify connectivity.</p>"},{"location":"classes/x_class_redis.html#keys","title":"<code>keys(...)</code>","text":"Parameter Type Default Description <code>$pre</code> String <code>false</code> Optional prefix to filter keys. If not provided, uses the class-level prefix. <code>$after</code> String <code>\"\"</code> Optional suffix to append to the prefix for filtering keys. Return Type Description Array / Boolean Returns an array of keys matching the specified pattern, or <code>false</code> if not connected. <p>Description: Retrieves keys from Redis that match the specified prefix and suffix.</p>"},{"location":"classes/x_class_redis.html#add_string","title":"<code>add_string(...)</code>","text":"Parameter Type Description <code>$name</code> String The key under which to store the string value. <code>$value</code> String The string value to be stored. Return Type Description Boolean Returns <code>true</code> if the string was successfully added, <code>false</code> otherwise. <p>Description: Adds a string value to Redis with the specified key. Returns <code>false</code> if the parameters are invalid or if the Redis connection is not established.</p>"},{"location":"classes/x_class_redis.html#add_list","title":"<code>add_list(...)</code>","text":"Parameter Type Description <code>$name</code> String The key under which to store the list. <code>$value</code> Array An array of values to be added to the list. Return Type Description Boolean Returns <code>true</code> if the list was successfully updated, <code>false</code> otherwise. <p>Description: Adds multiple values to a Redis list with the specified key. Each value is pushed to the beginning of the list.</p>"},{"location":"classes/x_class_redis.html#get_string","title":"<code>get_string(...)</code>","text":"Parameter Type Description <code>$name</code> String The key of the string value to retrieve. Return Type Description String / Boolean Returns the string value stored under the specified key, or <code>false</code> if not connected or key does not exist. <p>Description: Retrieves a string value from Redis by key.</p>"},{"location":"classes/x_class_redis.html#get_list","title":"<code>get_list(...)</code>","text":"Parameter Type Description <code>$name</code> String The key of the list to retrieve. <code>$start</code> Integer The starting index of the range to retrieve. <code>$end</code> Integer The ending index of the range to retrieve. Return Type Description Array / Boolean Returns an array of values from the list within the specified range, or <code>false</code> if not connected or key does not exist. <p>Description: Retrieves a range of values from a Redis list by key. The range is defined by the <code>start</code> and <code>end</code> indices.</p>"},{"location":"classes/x_class_referer.html","title":"PHP Referer","text":""},{"location":"classes/x_class_referer.html#class-documentation-x_class_referer","title":"Class Documentation: <code>x_class_referer</code>","text":""},{"location":"classes/x_class_referer.html#documentation","title":"Documentation","text":"<p>The <code>x_class_referer</code> class is designed to manage and track referer URLs for websites. It interacts with a MySQL database to store and update information about incoming traffic, including the referer URL, site URL, and associated metadata.</p> <ul> <li>URL Preparation: The method <code>prepareUrl()</code> is used internally to clean up the referer URL by removing query parameters, protocols (<code>http://</code>, <code>https://</code>), and <code>www.</code> prefix.  </li> <li>Database Table: The <code>create_table()</code> method ensures the database table structure is set up with columns for referer URL, site URL, hit count, and metadata.  </li> </ul> <p>The class assumes that the <code>x_class_mysql</code> class handles errors related to database operations. Ensure that appropriate error handling is implemented in the <code>x_class_mysql</code> class.</p>"},{"location":"classes/x_class_referer.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_referer.html#php-modules","title":"PHP Modules","text":"<ul> <li>MySQLi: Required for database interactions.</li> <li>PDO: Optional, depending on how database interactions are handled.</li> <li>URL Functions: Built-in PHP functions like <code>parse_url</code>.</li> </ul>"},{"location":"classes/x_class_referer.html#external-classes","title":"External Classes","text":"<ul> <li><code>x_class_mysql</code>: Expected to handle MySQL operations such as querying, updating, and checking table existence.</li> </ul>"},{"location":"classes/x_class_referer.html#table-structure","title":"Table Structure","text":"<p>This section describes the table structure used by the Referer class to log referer information. The table is automatically created by the class if needed. Below is a summary of the columns and keys used in the table, along with their purposes.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(10)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> A unique identifier for each referer log entry, ensuring that each record can be individually tracked. <code>full_url</code> <code>varchar(256)</code> <code>NOT NULL</code>, <code>DEFAULT '0'</code> Stores the full URL of the referer, identifying the source of the traffic. <code>site_url</code> <code>varchar(256)</code> <code>NOT NULL</code>, <code>DEFAULT '0'</code> Contains the URL of the site where the referer is located, providing context to the referer. <code>hits</code> <code>int(10)</code> <code>NOT NULL</code>, <code>DEFAULT '0'</code> Records the number of hits or visits from the referer URL, useful for tracking traffic volume. <code>section</code> <code>varchar(128)</code> <code>NOT NULL</code>, <code>DEFAULT ''</code> For Multi Site Purposes to split database data in categories. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> Captures the date and time when the referer log entry was created. Automatically set upon insertion. <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> Logs the date and time of the last modification to the entry. Automatically updated on changes. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each referer log entry is uniquely identifiable. <code>x_class_referer</code> Unique <code>full_url</code>, <code>section</code>, <code>site_url</code> Ensures that each combination of <code>full_url</code>, <code>section</code>, and <code>site_url</code> is unique, preventing duplicate entries for the same referer."},{"location":"classes/x_class_referer.html#method-library","title":"Method Library","text":"Method Description <code>__construct($mysql, $table, $refurlnowww)</code> Constructor to initialize the class. Requires an instance of the MySQL class, the table name, and the referer URL. <code>enabled($bool = true)</code> Sets whether the referer tracking is enabled. <code>get_array()</code> Retrieves all records from the database table as an associative array. <code>execute($section = \"\")</code> Processes the current HTTP referer and updates the database with the referer URL information."},{"location":"classes/x_class_referer.html#method-details","title":"Method Details","text":""},{"location":"classes/x_class_referer.html#__construct","title":"<code>__construct(...)</code>","text":"Parameter Type Description <code>$mysql</code> Object An instance of the MySQL class for database operations. <code>$table</code> String The name of the MySQL table to use. <code>$refurlnowww</code> String The URL to exclude from tracking. <p>Description: Initializes the class with the given MySQL instance, table name, and referer URL. It also checks if the table exists and creates it if necessary.</p>"},{"location":"classes/x_class_referer.html#enabled","title":"<code>enabled(...)</code>","text":"Parameter Type Default Description <code>$bool</code> Bool <code>true</code> Whether referer tracking is enabled or disabled. <p>Description: Enables or disables the referer tracking based on the boolean value provided.</p>"},{"location":"classes/x_class_referer.html#get_array","title":"<code>get_array(...)</code>","text":"Return Type Description Array An associative array containing all rows from the database table. <p>Description: Fetches all records from the MySQL table as an associative array.</p>"},{"location":"classes/x_class_referer.html#execute","title":"<code>execute(...)</code>","text":"Parameter Type Default Description <code>$section</code> String <code>\"\"</code> The section to categorize the referer URL. <p>Description: Processes the current HTTP referer. If the referer is not the same as the excluded URL and not empty, it updates the hit count or inserts a new record into the database. It also checks if the referer URL contains query parameters and cleans it before storing.</p> <p>Return Value: Returns <code>true</code> upon successful execution.</p>"},{"location":"classes/x_class_table.html","title":"PHP Table","text":""},{"location":"classes/x_class_table.html#class-documentation-x_class_table","title":"Class Documentation: <code>x_class_table</code>","text":""},{"location":"classes/x_class_table.html#documentation","title":"Documentation","text":"<p>The <code>x_class_table</code> class is a PHP utility designed for easy manipulation and management of database tables. It facilitates creating, editing, deleting, and displaying records through a straightforward API. The class is intended for developers who need to handle these operations consistently and securely, incorporating CSRF protection.</p> <ul> <li>CSRF Handling: All <code>exec_*</code> methods incorporate CSRF protection using <code>x_class_csrf</code>.  </li> <li>Array Configurations: Fields must be configured properly in the <code>$create</code> and <code>$edit</code> arrays using <code>config_array()</code>.  </li> </ul> <p>The <code>x_class_table</code> class provides methods to create, edit, delete, and display data from a MySQL table. It includes automatic CSRF protection and a flexible structure for handling different types of data inputs.</p>"},{"location":"classes/x_class_table.html#requirements","title":"Requirements","text":"<ul> <li>PHP Modules:</li> <li><code>mysqli</code> (or compatible library for MySQL operations)</li> <li> <p><code>HTML/Forms Handling</code> functions (if applicable)</p> </li> <li> <p>External Classes:</p> </li> <li><code>x_class_csrf</code>: Handles CSRF protection.</li> </ul>"},{"location":"classes/x_class_table.html#constructor","title":"Constructor","text":"<pre><code>function __construct($mysql, $table_name, $id = false, $id_field = \"id\")\n</code></pre> Parameter Type Description <code>$mysql</code> object MySQL connection object (e.g., MySQLi instance). <code>$table_name</code> string The name of the database table to operate on. <code>$id</code> mixed (Optional) The ID of the current record (default: <code>false</code>). <code>$id_field</code> string (Optional) The name of the ID field in the table (default: <code>\"id\"</code>). <p>Special Notes: - If <code>$id</code> is provided, the class will load an existing record. Otherwise, it operates on new records. - The CSRF protection is initialized for each instance with a unique identifier.</p>"},{"location":"classes/x_class_table.html#public-methods","title":"Public Methods","text":""},{"location":"classes/x_class_table.html#exec_delete","title":"<code>exec_delete(...)</code>","text":"<p>Deletes a record from the table based on the submitted form data.</p> Parameter Type Description <code>$ovr_csrf</code> boolean Whether to override CSRF protection (default: <code>false</code>). <p>Returns: <code>\"deleted\"</code> if the record is successfully deleted, <code>\"csrf\"</code> if CSRF validation fails.</p>"},{"location":"classes/x_class_table.html#config_rel_url","title":"<code>config_rel_url(...)</code>","text":"<p>Configures the relative URL used in forms for this instance.</p> Parameter Type Description <code>$rel_url</code> string The URL to which forms will be submitted."},{"location":"classes/x_class_table.html#config_array","title":"<code>config_array(...)</code>","text":"<p>Sets up the creation and editing arrays used in forms.</p> Parameter Type Description <code>$create</code> array The array defining the fields for creation. <code>$edit</code> array The array defining the fields for editing."},{"location":"classes/x_class_table.html#exec_edit","title":"<code>exec_edit(...)</code>","text":"<p>Processes and updates a record based on the edit form submission.</p> <p>Returns: <code>\"edited\"</code> if the record is successfully edited, <code>\"csrf\"</code> if CSRF validation fails.</p>"},{"location":"classes/x_class_table.html#exec_create","title":"<code>exec_create(...)</code>","text":"<p>Creates a new record based on the submitted form data.</p> <p>Returns: <code>\"created\"</code> if the record is successfully created, <code>\"csrf\"</code> if CSRF validation fails.</p>"},{"location":"classes/x_class_table.html#spawn_return","title":"<code>spawn_return(...)</code>","text":"<p>Displays a message box indicating the result of the last operation.</p> Parameter Type Description <code>$deleted</code> string Message to display if a record was deleted. <code>$csrf</code> string Message to display if CSRF validation fails. <code>$edited</code> string Message to display if a record was edited. <code>$created</code> string Message to display if a record was created."},{"location":"classes/x_class_table.html#spawn_create","title":"<code>spawn_create(...)</code>","text":"<p>Generates a form for creating a new record.</p> Parameter Type Description <code>$button_name</code> string Text for the submit button (default: <code>\"Create Item\"</code>). <code>$button_class</code> string CSS classes for the submit button (default: <code>\"\"</code>). <code>$add_info</code> array Additional information for customizing the form."},{"location":"classes/x_class_table.html#spawn_edit","title":"<code>spawn_edit(...)</code>","text":"<p>Generates a form for editing an existing record.</p> Parameter Type Description <code>$button_name</code> string Text for the submit button (default: <code>\"Edit Item\"</code>). <code>$button_class</code> string CSS classes for the submit button (default: <code>\"\"</code>). <code>$add_info</code> array Additional information for customizing the form."},{"location":"classes/x_class_table.html#spawn_table","title":"<code>spawn_table(...)</code>","text":"<p>Displays a table with data from the database.</p> Parameter Type Description <code>$title_array</code> array Column headers for the table. <code>$value_array</code> array Data rows to be displayed. <code>$editing</code> mixed Enables edit buttons if set (default: <code>false</code>). <code>$deleting</code> mixed Enables delete buttons if set (default: <code>false</code>). <code>$creating</code> mixed Displays a \"Create New\" button if set (default: <code>false</code>). <code>$action_column</code> string Text for the action column header (default: <code>\"Action\"</code>). <code>$classes</code> string CSS classes for styling the table. <code>$add_info</code> array Additional information for customizing the table."},{"location":"classes/x_class_user.html","title":"PHP User","text":""},{"location":"classes/x_class_user.html#class-documentation-x_class_user","title":"Class Documentation: <code>x_class_user</code>","text":""},{"location":"classes/x_class_user.html#documentation","title":"Documentation","text":"<p>The <code>x_class_user</code> PHP class is a versatile and robust solution designed for seamless integration of user management into web projects. As a core component of the Bugfish Framework, it offers essential features for managing user sessions, authentication, and profile customization.</p>"},{"location":"classes/x_class_user.html#key-features","title":"Key Features","text":""},{"location":"classes/x_class_user.html#user-registration-and-authentication","title":"User Registration and Authentication","text":"<ul> <li>Secure Password Handling: Implements secure password hashing and supports persistent authentication using cookies.</li> <li>User Sessions: Efficiently manages user sessions for a consistent user experience.</li> </ul>"},{"location":"classes/x_class_user.html#profile-customization","title":"Profile Customization","text":"<ul> <li>User Groups and Settings: Supports the creation and management of user groups, additional profile fields, and user settings.</li> </ul>"},{"location":"classes/x_class_user.html#session-management","title":"Session Management","text":"<ul> <li>PHP Sessions and MySQL Integration: Combines PHP sessions with MySQL for reliable session handling.</li> </ul>"},{"location":"classes/x_class_user.html#security-measures","title":"Security Measures","text":"<ul> <li>SQL Injection Protection: Includes mechanisms to protect against MySQL injection, though it does not guarantee complete security.</li> </ul>"},{"location":"classes/x_class_user.html#user-activity-management","title":"User Activity Management","text":"<ul> <li>Account Activation and Recovery: Manages email-based activation codes, password recovery, and secure login procedures.</li> </ul>"},{"location":"classes/x_class_user.html#multi-login-control-and-login-flexibility","title":"Multi-Login Control and Login Flexibility","text":"<ul> <li>Control Over Multi-Login: Allows enabling or disabling multi-login for users.</li> <li>Customizable Login Credentials: Configures the login field to be either the username or email address.</li> </ul>"},{"location":"classes/x_class_user.html#reference-management","title":"Reference Management","text":"<ul> <li>Internal Reference Handling: Manages and resets internal references to ensure clean user management operations.</li> </ul>"},{"location":"classes/x_class_user.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_user.html#php-modules","title":"PHP Modules","text":"<ul> <li><code>mysqli</code>: Required for data storage, using the <code>x_class_mysql</code> object.  </li> <li><code>openssl</code>: Used for cryptographic functions, such as token generation.  </li> <li><code>mbstring</code>: Required for handling multibyte character encodings.  </li> </ul>"},{"location":"classes/x_class_user.html#external-classes","title":"External Classes","text":"<ul> <li><code>x_class_mysql</code>: Required for Database Operations.</li> </ul>"},{"location":"classes/x_class_user.html#table-structures","title":"Table Structures","text":"<p>Tables will be installed automatically upon initialization.</p>"},{"location":"classes/x_class_user.html#users-table","title":"Users Table","text":"Column Name Data Type Nullable Default Value Comment id int No AUTO_INCREMENT Unique ID user_name varchar(512) Yes 'undefined' User login name user_initial int(1) Yes 0 1 if this user is the initial created user user_pass varchar(512) Yes NULL User password user_mail varchar(512) Yes NULL User email user_2fa text Yes NULL User 2FA secret key user_shadow varchar(512) Yes NULL Store for email renewals user_rank int(9) Yes NULL User rank user_confirmed tinyint(1) Yes 0 User activation status req_activation datetime Yes NULL Date of activation request last_activation datetime Yes NULL Date of last activation user_disabled int(1) Yes 0 1 if user is disabled last_login datetime Yes NULL Date of last login user_blocked tinyint(1) Yes 0 User blocked status block_reset int(1) Yes NULL Number of block resets block_auto int(1) Yes 0 Automatic block status block_activation int(1) Yes NULL Block activation status block_mail_edit datetime Yes NULL Date of last mail edit block fails_in_a_row int(10) Yes 1 Failed login attempts last_block datetime Yes NULL Date of last block user_lang varchar(24) Yes NULL User default language user_color varchar(24) Yes NULL User default color user_theme varchar(24) Yes NULL User default theme user_theme_sub varchar(24) Yes NULL User default sub-theme extradata TEXT Yes NULL Additional data hive_extradata TEXT Yes NULL Additional data for HIVE system req_reset datetime Yes NULL Date of reset request last_reset datetime Yes NULL Date of last reset req_mail_edit datetime Yes NULL Date of last mail edit request last_mail_edit datetime Yes NULL Date of last mail edit last_activity datetime Yes NULL Last site activity created_date datetime Yes CURRENT_TIMESTAMP Creation date modify_date datetime Yes CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP Modification date Primary Key (id)"},{"location":"classes/x_class_user.html#users-session-table","title":"Users Session Table","text":"Column Name Data Type Nullable Default Value Comment id int(10) No AUTO_INCREMENT Unique Session ID fk_user int(10) No Related User ID key_type tinyint(1) Yes 0 Session type (1 - activate, 2 - session, etc.) creation datetime Yes CURRENT_TIMESTAMP Session creation date modification datetime Yes CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP Session modification date refresh_date datetime Yes NULL Last session use date session_key varchar(128) Yes Session authentication token is_active tinyint(1) Yes 0 1 - Active, 0 - Expired request_ip varchar(128) Yes NULL IP at session creation (if enabled) execute_ip varchar(128) Yes NULL IP at session invalidation (if enabled) Primary Key (id)"},{"location":"classes/x_class_user.html#group-table","title":"Group Table","text":"Column Name Data Type Nullable Default Value Comment id int(10) No AUTO_INCREMENT Unique Group ID group_name varchar(255) No Group name group_description TEXT Yes NULL Group description creation datetime Yes CURRENT_TIMESTAMP Creation date modification datetime Yes CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP Modification date Primary Key (id)"},{"location":"classes/x_class_user.html#group-link-table","title":"Group Link Table","text":"Column Name Data Type Nullable Default Value Comment id int(10) No AUTO_INCREMENT Unique Link ID fk_user int(10) No Related User ID fk_group int(10) No Related Group ID creation datetime Yes CURRENT_TIMESTAMP Creation date Primary Key (id) Unique Constraint UNIQUE (fk_user, fk_group) Unique combination of user and group"},{"location":"classes/x_class_user.html#extrafield-table","title":"Extrafield Table","text":"Column Name Data Type Nullable Default Value Comment id int(10) No AUTO_INCREMENT Unique Extrafield ID fk_user int(10) No Related User ID ... ... ... ... User-defined fields creation datetime Yes CURRENT_TIMESTAMP Creation date modification datetime Yes CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP Modification date Primary Key (id)"},{"location":"classes/x_class_user.html#class-parameters","title":"Class Parameters","text":""},{"location":"classes/x_class_user.html#user-related","title":"User Related","text":"<p>These parameters are only set if a user is logged in:</p> Parameter Name Description <code>user_name</code>, <code>name</code> Contains the user name as set in the database. <code>user_mail</code>, <code>mail</code> Contains the user email as set in the database. <code>theme</code>, <code>user_theme</code> Contains the user theme as set in the database. <code>lang</code>, <code>user_lang</code> Contains the user language as set in the database. <code>loggedIn</code>, <code>loggedin</code>, <code>user_loggedin</code>, <code>user_loggedIn</code> Indicates if the user is logged in (true) or not (false). <code>user()</code> Array with all fields from the database related to the user (excluding extra fields or group tables). <code>user_id</code>, <code>id</code> Contains the user ID as set in the database. <code>user_rank</code>, <code>rank</code> Contains the user rank as set in the database."},{"location":"classes/x_class_user.html#reference-returns","title":"Reference Returns","text":"<p>These variables are set if main operation functions (e.g., login, recover) are triggered, providing quick access to relevant data:</p> Reference Return Variables Description <code>$mail_ref_user</code> References the involved user ID after a major operation. <code>$mail_ref_token</code> References the user token for activation after a major operation. <code>$mail_ref_receiver</code> References the involved user email after a major operation. <code>$ref</code> References the involved user after a major operation."},{"location":"classes/x_class_user.html#operation-returns","title":"Operation Returns","text":"<p>These variables are set after major functions (e.g., mail change, recovery) are triggered and reflect the result of these operations:</p> Operation Functions Return Vars Description <code>$login_request_code</code> Return code from login functions. <code>$rec_request_code</code> Return code from recover functions. <code>$act_request_code</code> Return code from activation functions. <code>$mc_request_code</code> Return code from mail change functions."},{"location":"classes/x_class_user.html#class-constructor","title":"Class Constructor","text":"Constructor Function Description <code>__construct($x_class_mysql, $table_users, $table_sessions, $preecokie = \"xusers\", $initial_ref = false, $initial_pass = false, $initial_rank = false)</code> Initializes with <code>x_class_mysql</code> object and table names (auto-generated). Optional initial username, password, and rank can be set. Used for creating tables and initial user setup if required. $mysqlcon -&gt; <code>x_class_mysql</code> object$table_users -&gt; Table name for users$table_sessions -&gt; Table name for sessions$preecokie -&gt; Precookie for multi-login$initial_ref -&gt; Initial admin username/user email$initial_pass -&gt; Initial password$initial_rank -&gt; Initial user rank"},{"location":"classes/x_class_user.html#configuration-methods","title":"Configuration Methods","text":"<p>Run these functions before <code>init()</code> to adjust login class settings for your site:</p>"},{"location":"classes/x_class_user.html#initial-configuration","title":"Initial Configuration","text":"General Login Class Config Function Description <code>multi_login($bool = false)</code> Allows multi-login. If <code>false</code>, users will be logged out in the first session if they log in elsewhere. If <code>true</code>, users can log in multiple times in different browsers. <code>login_recover_drop($bool = false)</code> Deactivates password reset tokens on successful login. If <code>true</code>, reset tokens will be disabled if the user logs in successfully. <code>login_field_manual($string)</code> Specifies a custom login field that should be unique (e.g., \"user_name\", \"user_mail\"). <code>login_field_user()</code> Sets the primary login field to <code>user_name</code> if <code>true</code>. <code>login_field_mail()</code> Sets the primary login field to <code>user_mail</code> if <code>true</code>. <code>mail_unique($bool = false)</code> Ensures emails are unique if <code>true</code>. If <code>false</code>, emails are not unique but may be overwritten if <code>user_mail</code> is the default login option. <code>user_unique($bool = false)</code> Ensures usernames are unique if <code>true</code>. If <code>false</code>, usernames are not unique but may be overwritten if <code>user_name</code> is the default login option. <code>ip_spoof_check(bool = true)</code> Enables or disables IP spoofing checks during login. Parameters: <code>bool</code> - If true, IP spoofing checks are performed during login."},{"location":"classes/x_class_user.html#logging-configuration","title":"Logging Configuration","text":"Config: Log Functions Description <code>log_ip($bool = false)</code> Logs IP addresses in the database for sessions. <code>true</code> to enable, <code>false</code> to disable. <code>log_activation($bool = false)</code> Logs activation sessions. If <code>false</code>, used keys will be deleted. If <code>true</code>, they will be preserved. <code>log_session($bool = false)</code> Logs session data. If <code>false</code>, used keys will be deleted. If <code>true</code>, they will be preserved. <code>log_recover($bool = false)</code> Logs recovery actions. If <code>false</code>, used keys will be deleted. If <code>true</code>, they will be preserved. <code>log_mail_edit($bool = false)</code> Logs email edits. If <code>false</code>, used keys will be deleted. If <code>true</code>, they will be preserved."},{"location":"classes/x_class_user.html#interval-configuration","title":"Interval Configuration","text":"Config: Operation Delay Interval Functions Description <code>wait_activation_min($int = 6)</code> Time in minutes that users need to wait between activation operations to prevent flooding. <code>wait_recover_min($int = 6)</code> Time in minutes that users need to wait between recovery operations to prevent flooding. <code>wait_mail_edit_min($int = 6)</code> Time in minutes that users need to wait between mail changes with activation operations to prevent flooding."},{"location":"classes/x_class_user.html#expiry-configuration","title":"Expiry Configuration","text":"Config: Token Expire Functions Description <code>min_activation($int = 6)</code> Activation token expiry time in minutes. <code>min_recover($int = 6)</code> Recovery token expiry time in minutes. <code>min_mail_edit($int = 6)</code> Mail edit token expiry time in minutes."},{"location":"classes/x_class_user.html#autoblock-configuration","title":"Autoblock Configuration","text":"Config: Autoblock Functions Description <code>autoblock($int = false)</code> Activates auto-blocking of users after X failed logins. <code>false</code> to deactivate."},{"location":"classes/x_class_user.html#session-configuration","title":"Session Configuration","text":"Config: Session Functions Description <code>sessions_days($int = 7)</code> Defines the maximum number of days a session is valid."},{"location":"classes/x_class_user.html#cookie-configuration","title":"Cookie Configuration","text":"Config: Cookie Functions Description <code>cookies_use($bool = true)</code> Allows the use of cookies for \"remember me\" functionality. <code>false</code> to disable. <code>cookies_days($int = 7)</code> Defines the number of days cookies are valid if not refreshed."},{"location":"classes/x_class_user.html#token-configuration","title":"Token Configuration","text":"Token Config Functions Description <code>token_charset($charset = \"0123456789\")</code> Sets the character set for generated tokens. <code>token_length($length = 24)</code> Sets the length of generated tokens. <code>session_length($length = 24)</code> Sets the length of generated session tokens. <code>session_charset($charset = \"0123456789\")</code> Sets the character set for session tokens."},{"location":"classes/x_class_user.html#operation-methods","title":"Operation Methods","text":"<p>Internal used Methods for this class or additional categories of function which does not fit in any other category.</p>"},{"location":"classes/x_class_user.html#user-table-functions","title":"User Table Functions","text":"User Extrafield Functions Description <code>user_add_field($addstring)</code> Adds a field to the users table. The field is added with the provided column string. <code>user_del_field($fieldname)</code> Deletes a field from the users table. Note: This action deletes data."},{"location":"classes/x_class_user.html#usergroup-functions","title":"Usergroup Functions","text":"Group Functions Description <code>groups($table_group, $table_group_link)</code> Enables user groups functionality and sets the table names for groups and relations. <code>group_add($name, $description = \"\")</code> Creates a group with the specified name and optional description. <code>group_del($id)</code> Deletes a group with the specified ID. <code>group_users($groupid)</code> Retrieves all users in a group as an array representing the relations table fields. <code>user_groups($userid)</code> Retrieves all groups for a user as an array representing the user group fields. <code>group_adduser($groupid, $userid)</code> Adds a user to a group with the specified group and user IDs. <code>group_deluser($groupid, $userid)</code> Removes a user from a group with the specified group and user IDs. <code>groups_del_field($fieldname)</code> Deletes a field from the group table by specifying the column name. <code>groups_add_field($fieldstring)</code> Adds a field to the group table with the provided column string."},{"location":"classes/x_class_user.html#password-filtering-functions","title":"Password Filtering Functions","text":"Password Filter Function Description <code>passfilter($signs = 6, $capitals = 0, $small = 0, $special = 0, $number = 0)</code> Setup Password Filter Check Variable; the parameters represent the required minimum of needed characters, such as numbers, special characters, and capital letters. <code>passfilter_check($passclear)</code> Check if the string conforms to the password filters set by <code>passfilter()</code>."},{"location":"classes/x_class_user.html#password-functions","title":"Password Functions","text":"Password Functions Description <code>password_gen($len = 12, $comb = \"abcde12345\")</code> Generate a key with charset (combination string) and length. Useful for generating passwords or random strings. <code>password_crypt($var, $hash = PASSWORD_BCRYPT)</code> Encrypt a cleartext password into a hashed password. By default, all passwords are hashed using Bcrypt. <code>password_check($cleartext, $crypted)</code> Check the validity of a crypted password by comparing it with a cleartext password using Bcrypt."},{"location":"classes/x_class_user.html#extrafield-functions","title":"Extrafield Functions","text":"Extrafield Functions Description <code>extrafields($table_ext)</code> Activate extrafield functionality by providing a table name, which will be generated and installed automatically. <code>extrafield_del_field($fieldname)</code> Delete an extrafield table column by providing the column name. <code>extrafield_add_field($fieldstring)</code> Add a column to the extrafield table with the specified column string. <code>extrafield_get($id)</code> Get the extrafield array for a user."},{"location":"classes/x_class_user.html#token-validation-time-functions","title":"Token Validation Time Functions","text":"Get Expire Time for Request Functions in Seconds (Interval) Description <code>activation_request_time($user)</code> Get the time until the next activation request is possible with user ID. <code>recover_request_time($user)</code> Get the time until the next recovery request is possible with user ID. <code>mail_edit_request_time($user)</code> Get the time until the next mail edit request is possible with user ID."},{"location":"classes/x_class_user.html#token-validation-functions","title":"Token Validation Functions","text":"Check Token Validation Functions Description <code>activation_token_valid($user, $token)</code> Check if the activation token is valid by providing the user ID and the token. <code>recover_token_valid($user, $token)</code> Check if the recovery token is valid by providing the user ID and the token. <code>mail_edit_token_valid($user, $token)</code> Check if the mail edit token is valid by providing the user ID and the token. <code>session_token_valid($user, $token)</code> Check if the session token is valid by providing the user ID and the token."},{"location":"classes/x_class_user.html#user-operations","title":"User Operations","text":"<p>If you do not provide an ID here, the actual logged-in executing user will be handled as the ID. In cases where the ID is optional, this will be the handling for that kind of execution or trigger of the functions listed below.</p>"},{"location":"classes/x_class_user.html#general-operations","title":"General Operations","text":"User Operation Functions Description <code>get($id = false)</code> Get user information from the table as an array. <code>exists($id = false)</code> Check if a user with the specified ID exists. <code>delete($id = false)</code> Delete a user. <code>disable_user_session($id = false)</code> Disable a user's session. <code>delete_user_session($id = false)</code> Delete a user's session. <code>logout_all()</code> Logout all users."},{"location":"classes/x_class_user.html#confirmation-functions","title":"Confirmation Functions","text":"User Operation Functions Description <code>confirmed_user($id = false)</code> Check if the user account is confirmed; returns \"true\" if confirmed. <code>confirm_user($id = false)</code> Confirm the User if not confirmed, this will prevent auto-delete as the user is non-provisioned for primary functions till confirmation!"},{"location":"classes/x_class_user.html#registration-functions","title":"Registration Functions","text":"User Operation Functions Description <code>addUser($nameref, $mail, $password = false, $rank = false, $activated = false)</code> Add a new user to the database. If <code>$activated</code> is true, the user will not need additional activation. You can define the user's rank, password, mail, and user reference. add_user(<code>nameref</code>, <code>mail</code>, <code>password = false</code>, <code>rank = false</code>, <code>activated = false</code>) Adds a new user to the system. Parameters: <code>nameref</code> - The username reference. <code>mail</code> - The user's email. <code>password</code> - The user's password (optional). <code>rank</code> - The user's rank (optional). <code>activated</code> - Whether the user is activated (optional)."},{"location":"classes/x_class_user.html#function-purpose","title":"Function Purpose","text":"<p>The <code>addUser</code> function in the <code>x_class_user</code> class is designed to add a new user to the database while performing necessary checks, handling unconfirmed email changes, and preparing data. The function prevents duplicate accounts, manages email verification, and ensures proper user data is stored.</p>"},{"location":"classes/x_class_user.html#function-parameters","title":"Function Parameters","text":"<ol> <li>$nameref: The username or another reference field, depending on the configuration.</li> <li>$mail: The user's email address.</li> <li>$password: The user's password (optional, defaults to <code>false</code>).</li> <li>$rank: The user's rank or role (optional, defaults to <code>false</code>).</li> <li>$activated: Whether the user is activated or not (optional, defaults to <code>false</code>).</li> </ol>"},{"location":"classes/x_class_user.html#function-workflow","title":"Function Workflow","text":"<p>Determine Reference Field: The function decides whether to use the email (<code>$mail</code>) or the <code>nameref</code> (username) as the reference, based on the configuration (<code>$this-&gt;login_field</code>).</p> <p>Check for Existing Confirmed User: The function checks if there is an existing confirmed user (<code>user_confirmed = 1</code>) in the database with the same reference (email or username). If a confirmed user is found, the function returns <code>false</code> to prevent duplicate confirmed accounts.</p> <p>Set Activation Status: The <code>$activated</code> parameter is converted to either <code>1</code> (activated) or <code>0</code> (not activated).</p> <p>Set User Rank: If a <code>$rank</code> is not provided, it defaults to <code>0</code>.</p> <p>Prepare Password: If a password is not provided or is empty, the function sets the password to <code>\"NULL\"</code>. Otherwise, the password is encrypted using the <code>password_crypt</code> method.</p> <p>Insert the New User: The function inserts the new user into the database with the provided <code>nameref</code>, <code>mail</code>, encrypted <code>password</code>, rank, and activation status.</p> <p>Return Success: If the user is successfully added, the function returns <code>true</code>.</p>"},{"location":"classes/x_class_user.html#block-functions","title":"Block Functions","text":"User Block Functions Description <code>blocked_user($id = false)</code> Check if the user is blocked; returns <code>true</code> if blocked, <code>false</code> otherwise. <code>block_user($id = false)</code> Block a user. <code>unblock_user($id = false)</code> Unblock a user."},{"location":"classes/x_class_user.html#enabledisable-functions","title":"Enable/Disable Functions","text":"User Disable Functions Description <code>disabled_user($id = false)</code> Check if the user is disabled; returns <code>true</code> if disabled, <code>false</code> otherwise. <code>disable_user($id = false)</code> Disable a user. <code>enable_user($id = false)</code> Enable a user."},{"location":"classes/x_class_user.html#change-user-functions","title":"Change User Functions","text":"User Change Functions Description <code>change_pass($id = false, $new = false)</code> Change the user password. <code>change_password($id = false, $new = false)</code> Change the user password. <code>changeUserPass($id = false, $new = false)</code> Change the user password. <code>change_rank($id = false, $new = false)</code> Change the user rank. <code>changeUserShadowMail($id = false, $new)</code> Change a user's shadow mail (mail not activated yet but user registered and awaits activation). change_shadow(<code>id</code>, <code>new = false</code>) Changes the shadow email of a specific user. Parameters: <code>id</code> - The user's ID. <code>new</code> - The new shadow email (optional). changeUserShadowMail(id<code>,</code>new = false) Alias for <code>change_shadow</code>. Parameters: Same as <code>change_shadow</code>."},{"location":"classes/x_class_user.html#change-user-mail-functions","title":"Change User Mail Functions","text":"User Change Functions Description <code>changeUserMail($id = false, $new)</code> Change a user's mail. If the mail is unique, this deletes never-used, registered accounts with that mail. <code>change_mail($id = false, $new)</code> Change a user's mail. If the mail is unique, this deletes never-used, registered accounts with that mail."},{"location":"classes/x_class_user.html#function-purpose_1","title":"Function Purpose","text":"<p>The <code>changeUserMail</code> function in the <code>x_class_user</code> class is designed to update a user's email address in the database, handling both cases where email uniqueness must be enforced and where it does not. Here is a detailed explanation of its functionality:</p>"},{"location":"classes/x_class_user.html#function-parameters_1","title":"Function Parameters","text":"<ol> <li>$id: The ID of the user whose email address is to be changed. Defaults to <code>\"undefined_framework_var\"</code>.</li> <li>$new: The new email address to be set. Defaults to <code>false</code>.</li> </ol>"},{"location":"classes/x_class_user.html#function-workflow_1","title":"Function Workflow","text":"<p>Check for Valid New Email: The function first checks if a new email address (<code>$new</code>) is provided. If not, it returns <code>false</code>, indicating that no change will occur.</p> <p>Prepare New Email for Database: The new email address is trimmed of extra spaces and converted to lowercase. It is then prepared for binding in the SQL query.</p> <p>Validate User ID: The function checks if the provided <code>$id</code> is valid using the <code>int_opid</code> method. If <code>int_opid</code> returns a false value, the function returns <code>false</code>, indicating an invalid ID. The <code>$id</code> is then processed by <code>int_opid</code> to ensure it is an integer.</p> <p>Check New Email Validity: The function verifies that the new email address is not an empty string. If it is empty, the function returns <code>false</code>.</p> <p>Update Non-Unique Mail: If <code>$this-&gt;mail_unique</code> is <code>false</code>, the function directly updates the email address in the database for the user with the specified ID. It uses a prepared statement to prevent SQL injection.</p> <p>Update Unique Mail: If <code>$this-&gt;mail_unique</code> is <code>true</code>, the function performs additional checks:  </p> <ol> <li>It queries the database to fetch the current email address of the user with the given ID.  </li> <li>If the current email address is the same as the new email address (ignoring case), the function returns <code>true</code>, indicating no update is necessary.  </li> <li>If the current email address is different, the function checks if the new email address already exists and is confirmed using the <code>mailExistsActive</code> method. If it does exist, the function returns <code>false</code> to avoid duplication.  </li> <li>If the new email address does not already exist, the function:  <ul> <li>Deletes any unconfirmed user accounts (<code>user_confirmed = 0</code>) with the same email address from the database.  </li> <li>Updates any accounts with <code>user_shadow</code> (representing unconfirmed email changes) to clear the shadow status.  </li> <li>Updates the email address for the user with the specified ID.  </li> <li>Returns <code>true</code> upon successful update.  </li> </ul> </li> </ol> <p>Return Failure: If none of the above conditions are met or if any checks fail, the function returns <code>false</code>.  </p>"},{"location":"classes/x_class_user.html#change-user-name-functions","title":"Change User Name Functions","text":"User Change Functions Description <code>change_name($id = false, $new)</code> Change the user name. <code>changeUserName($id = false, $new)</code> Change the user name."},{"location":"classes/x_class_user.html#function-purpose_2","title":"Function Purpose","text":"<p>The <code>changeUserName</code> function in the <code>x_class_user</code> class is designed to update a user's username in the database. Here\u2019s a detailed explanation of its workings:</p>"},{"location":"classes/x_class_user.html#function-parameters_2","title":"Function Parameters","text":"<ol> <li>$id: The ID of the user whose username is to be changed. Defaults to <code>\"undefined_framework_var\"</code>.</li> <li>$new: The new username to be set. Defaults to <code>false</code>.</li> </ol>"},{"location":"classes/x_class_user.html#function-workflow_2","title":"Function Workflow","text":"<p>Check for Valid New Username: The function first checks if a new username is provided (<code>$new</code>). If not, it returns <code>false</code> immediately, indicating that no change will occur.  </p> <p>Prepare New Username for Database: The new username is trimmed of extra spaces and prepared for binding in the SQL query.  </p> <p>Validate User ID: The function checks if the provided <code>$id</code> is valid using the <code>int_opid</code> method. If <code>int_opid</code> returns a false value, the function returns <code>false</code>, indicating an invalid ID. The <code>$id</code> is then processed by <code>int_opid</code> to ensure it is an integer.  </p> <p>Check New Username Validity: The function verifies that the new username is not an empty string. If it is empty, the function returns <code>false</code>.  </p> <p>Update Non-Unique Username: If <code>$this-&gt;user_unique</code> is <code>false</code>, the function directly updates the username in the database for the user with the specified ID. It uses a prepared statement to prevent SQL injection.  </p> <p>Update Unique Username: If <code>$this-&gt;user_unique</code> is <code>true</code>, the function performs the following additional steps:  </p> <ol> <li>It queries the database to fetch the current username of the user with the given ID.  </li> <li>If the current username is the same as the new username (ignoring case), the function returns <code>true</code> because no update is necessary.  </li> <li>If the current username is different, the function checks if the new username already exists and is confirmed using the <code>usernameExistsActive</code> method. If it does exist, the function returns <code>false</code> to avoid duplication.  </li> <li>If the new username does not already exist, the function proceeds to update the username in the database and returns <code>true</code> upon successful update.  </li> </ol> <p>Return Failure: If none of the above conditions are met or if any checks fail, the function returns <code>false</code>.  </p>"},{"location":"classes/x_class_user.html#duplicate-check-functions","title":"Duplicate Check Functions","text":"Reference Existence Checks Description <code>refExists($ref)</code> Check if the reference exists. <code>refExistsActive($ref)</code> Check if the reference exists for a confirmed user. <code>usernameExists($ref)</code> Check if the username exists. <code>usernameExistsActive($ref)</code> Check if the username exists for a confirmed user. <code>mailExists($ref)</code> Check if the mail exists. <code>mailExistsActive($ref)</code> Check if the mail exists for a confirmed user."},{"location":"classes/x_class_user.html#extra-data-functions","title":"Extra Data Functions","text":"Extra Data Functions Description <code>get_extra($id= false)</code> Get extra data as an array from the user. (You can store your own data in an array if needed.) <code>set_extra($id= false, $array)</code> Set extra data from an array for the user. (You can store your own data in an array if needed.)"},{"location":"classes/x_class_user.html#login-as-functions","title":"Login As Functions","text":"Login As Functions Description <code>login_as($id)</code> Login as a user with the specified ID. Multi-login with the user logged in at the same time is normally possible. <code>login_as_return()</code> Return to normal state after <code>login_as()</code> has been successfully executed. <code>login_as_is()</code> Returns <code>true</code> if the current user is logged in as another user with <code>login_as()</code>; otherwise, returns <code>false</code>."},{"location":"classes/x_class_user.html#primary-functions","title":"Primary Functions","text":""},{"location":"classes/x_class_user.html#init-functions","title":"Init Functions","text":"Primary Functions Description <code>logout()</code> Logout the current logged-in user. <code>init()</code> Initialize the login with all configurations. Have to run once after configuration changes. Creates all needed sessions and restores login if already logged in."},{"location":"classes/x_class_user.html#login-functions","title":"Login Functions","text":"Primary Functions Description <code>login_request($ref, $pass, $cookies = false)</code> Request login with reference, password, and an option to stay online with cookies. Returns codes for login success or failure."},{"location":"classes/x_class_user.html#function-purpose_3","title":"Function Purpose","text":"<p>The <code>login_request</code> function in the <code>x_class_user</code> class handles the user login process, including authentication, session management, and handling various login errors. Here\u2019s a detailed breakdown of its functionality and the return codes it uses:</p>"},{"location":"classes/x_class_user.html#function-parameters_3","title":"Function Parameters","text":"<ol> <li>$ref: The username or email address of the user attempting to log in.</li> <li>$password: The password provided by the user.</li> <li>$stayLoggedIn: A boolean indicating whether the user wants to stay logged in across sessions (optional, defaults to <code>false</code>).</li> </ol>"},{"location":"classes/x_class_user.html#return-codes","title":"Return Codes","text":"<ul> <li>1: Successful login.</li> <li>2: User not found (invalid reference).</li> <li>3: Incorrect password.</li> <li>4: User is blocked.</li> <li>5: User is not confirmed.</li> <li>6: User is auto-blocked due to multiple failed login attempts.</li> <li>7: User is disabled.</li> </ul>"},{"location":"classes/x_class_user.html#activation-functions","title":"Activation Functions","text":"Activation Functions Description <code>activation_request_id($id)</code> Request activation for a user by ID without interval limits. Returns success or error codes. <code>activation_request($ref)</code> Request activation for an account with a reference. Returns success or error codes based on various conditions. <code>activation_confirm($userid, $token, $newpass = false)</code> Confirm activation with user ID and a valid token. Returns success or error codes based on various conditions."},{"location":"classes/x_class_user.html#activation-request-id","title":"Activation Request ID","text":"<p>Here you can see return values of the function: <code>activation_request_id</code> Requests an activation token for a user by their user ID if the user is not already confirmed.</p> Return Code Meaning 1 Activation request successful. 2 User ID is not numeric or user not found. 3 User is already confirmed."},{"location":"classes/x_class_user.html#activation-request","title":"Activation Request","text":"<p>Here you can see return values of the function: <code>activation_request</code> Requests a new activation token for a user by their username or email, checking various conditions such as user status and request timing.</p> Return Code Meaning 1 Activation request successful. 2 User not found. 3 Activation request too soon (interval not reached). 4 User is already confirmed. 5 Activation is blocked for this user. 6 User is disabled."},{"location":"classes/x_class_user.html#activation-confirm","title":"Activation Confirm","text":"<p>Here you can see return values of the function: <code>activation_confirm</code> Confirms the activation for a user using a provided token and optionally updates the user\u2019s password.</p> Return Code Meaning 1 Activation confirmed successfully. 2 User ID is not numeric or token not found. 3 Activation token is invalid or expired. 4 Activation is blocked for this user."},{"location":"classes/x_class_user.html#recover-functions","title":"Recover Functions","text":"Reset Functions Description <code>recover_request_id($id)</code> Request account recovery by ID. Returns success or error codes. <code>recover_request($ref)</code> Request account recovery by reference. Returns success or error codes based on various conditions. <code>recover_confirm($userid, $token, $newpass)</code> Confirm account recovery with user ID, token, and new password. Returns success or error codes."},{"location":"classes/x_class_user.html#recover-request-id","title":"Recover Request ID","text":"<p>Here you can see return values of the function: <code>recover_request_id</code> Requests a password recovery token for a user identified by their user ID.</p> Return Code Description 1 Token creation successful. 2 Invalid user ID or user not found."},{"location":"classes/x_class_user.html#recover-request","title":"Recover Request","text":"<p>Here you can see return values of the function: <code>recover_request</code> Requests a password recovery token for a user identified by their username or email.</p> Return Code Description 1 Token creation successful. 2 User not found. 3 Recovery request made too soon (interval not reached). 4 Recovery is blocked for this user. 5 User is disabled."},{"location":"classes/x_class_user.html#recover-confirm","title":"Recover Confirm","text":"<p>Here you can see return values of the function: <code>recover_confirm</code> Confirms a password recovery request using a token and updates the user\u2019s password.</p> Return Code Description 1 Recovery confirmed and password updated. 2 Invalid user ID or token not found. 3 Recovery token is invalid or expired. 4 Password recovery is blocked for this user."},{"location":"classes/x_class_user.html#mail-change-functions","title":"Mail Change Functions","text":"Mail Edit Functions Description <code>mail_edit($id, $newmail, $nointervall = false)</code> Create a new shadow mail. Returns success or error codes. <code>mail_edit_confirm($userid, $token, $run = true)</code> Confirm mail edit with user ID, token, and an optional flag to run the mail edit process. Returns success or error codes."},{"location":"classes/x_class_user.html#mail-edit-returns","title":"Mail Edit Returns","text":"<p>Here you can see return values of the function: <code>mail_edit</code> Initiates a request to change a user's email address. The function first validates the user ID and new email address, checks whether the user is disabled or if email changes are blocked. If an interval is specified, it ensures the required wait time has passed. It then generates a token for confirming the email change and stores the new email in a \"shadow\" state until confirmed. The function also handles logging and cleanup tasks related to the email change process.</p> Return Code Description 1 Email change request processed successfully. 2 User ID is invalid or user not found. 3 Email change request made too soon (interval not reached). 4 New email already exists for another active user. 5 Email change blocked for this user. 6 User is disabled."},{"location":"classes/x_class_user.html#mail-edit-confirm","title":"Mail Edit Confirm","text":"<p>Here you can see return values of the function: <code>mail_edit_confirm</code> Confirms the email change request by verifying the provided token. It checks whether the token is valid and whether the user is allowed to make the change. If valid, it updates the user's email address, handles any conflicts with existing emails (e.g., if the new email is already in use by another account), and logs the changes. If the email address was previously set as a shadow (temporary), it ensures proper cleanup or handling based on the email uniqueness settings.</p> Return Code Description 1 Email change confirmed successfully. 2 User ID is invalid or token not found. 3 Email change token is invalid or expired. 4 New email address is already in use. 5 Email change blocked for this user. 6 Failure to change the user\u2019s email."},{"location":"classes/x_class_user.html#display-login-function","title":"Display Login Function","text":"Function Description <code>display_login</code> This function displays a login form with various customizable options such as registration and password reset buttons, captcha validation, and CSRF protection. It processes the login request and handles errors related to captcha and CSRF tokens."},{"location":"classes/x_class_user.html#parameters","title":"Parameters","text":"Parameter Type Description Default Value <code>spawn_register_button</code> <code>array</code> Configures the \"Register Now\" button with <code>url</code> and <code>label</code> options. <code>array(\"url\" =&gt; \"\", \"label\" =&gt; \"Register Now\")</code> <code>spawn_cookie_checkbox</code> <code>string</code> Label for the \"Stay Logged In?\" checkbox. <code>\"Stay Logged In?\"</code> <code>spawn_reset_button</code> <code>array</code> Configures the \"Reset Account\" button with <code>url</code> and <code>label</code> options. <code>array(\"url\" =&gt; \"\", \"label\" =&gt; \"Reset Account\")</code> <code>login_button_label</code> <code>string</code> Label for the login button. <code>\"Login\"</code> <code>label</code> <code>array</code> Labels and placeholders for email and password fields. Options: <code>ref_placeholder</code>, <code>ref_label</code>, <code>pass_label</code>, <code>pass_placeholder</code>. <code>array(\"ref_placeholder\" =&gt; \"Please enter your E-Mail\", \"ref_label\" =&gt; \"E-Mail\", \"pass_label\" =&gt; \"Password\", \"pass_placeholder\" =&gt; \"Please enter your password!\")</code> <code>captcha</code> <code>array</code> Configures captcha image and expected code for validation. <code>array(\"url\" =&gt; \"captcha.jpg\", \"code\" =&gt; \"243fsdfsfds\")</code>"},{"location":"classes/x_class_user.html#functionality","title":"Functionality","text":"Step Description 1. CSRF Token Generation Generates a CSRF token and stores it in the session for validation. 2. Form Submission Check Checks if the login form has been submitted. 3. CSRF Validation Validates the submitted CSRF token against the one stored in the session. 4. Captcha Validation Validates the captcha code if captcha is enabled. 5. Login Request Processes the login request by calling the <code>login_request</code> method with the submitted credentials. 6. Error Handling Sets <code>display_return_code</code> based on the result of the login request or encountered errors (captcha or CSRF error). 7. HTML Output Outputs the login form with all configured options, including the captcha image, labels, and buttons."},{"location":"classes/x_class_user.html#return-values","title":"Return Values","text":"Value Description <code>display_return_code</code> Stores the result of the login process or error codes (<code>captcha_error</code>, <code>csrf_error</code>). <p>The function sets the display_return_code property based on the outcome of the login process. This property can hold various values, including the result of a successful login or specific error codes such as captcha_error or csrf_error. These return codes are used to inform the user or the system about the status of the login attempt, enabling appropriate responses or error handling</p>"},{"location":"classes/x_class_var.html","title":"PHP Variables","text":""},{"location":"classes/x_class_var.html#class-documentation-x_class_var","title":"Class Documentation: <code>x_class_var</code>","text":""},{"location":"classes/x_class_var.html#documentation","title":"Documentation","text":"<p>The <code>x_class_var</code> class is designed for managing configuration variables stored in a MySQL database. It allows you to create, read, update, and delete configuration values, as well as manage them via a form interface with built-in CSRF protection. This class is particularly useful for handling application settings that may need to be modified dynamically.</p>"},{"location":"classes/x_class_var.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_var.html#php-modules","title":"PHP Modules","text":"<ul> <li>MySQLi: For database interactions.</li> </ul>"},{"location":"classes/x_class_var.html#external-classes","title":"External Classes","text":"<ul> <li><code>x_class_mysql</code>: A custom class or interface to handle MySQL database connections and queries.</li> </ul>"},{"location":"classes/x_class_var.html#table-structure","title":"Table Structure","text":"<p>This section details the table structure used by the Variables class to store variables and their associated values. The table is automatically created by the class if needed. The column names can be customized through class properties. Below is a summary of the table's columns, keys, and their usage.</p> Column Name Data Type Attributes Description <code>id</code> <code>int(9)</code> <code>NOT NULL</code>, <code>AUTO_INCREMENT</code>, <code>PRIMARY KEY</code> Unique identifier for each entry, ensuring that each record can be individually accessed and managed. <code>descriptor</code> <code>varchar(256)</code> <code>NOT NULL</code> Descriptor for the constant or variable, serving as the key or name for the stored value. <code>value</code> <code>text</code> <code>NULL</code> Holds the value associated with the descriptor, which can be any text-based content. <code>description</code> <code>text</code> <code>NULL</code> Provides a description or additional details about the constant or variable. <code>section</code> <code>varchar(128)</code> <code>DEFAULT ''</code> For Multi Site Purposes to split database data in categories. <code>creation</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP</code> Records the date and time when the entry was created. Automatically set upon insertion. <code>modification</code> <code>datetime</code> <code>DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> Logs the date and time of the last modification to the entry. Automatically updated on changes. Key Name Key Type Columns Usage <code>PRIMARY KEY</code> Primary <code>id</code> Ensures that each entry has a unique identifier, allowing for precise record management and retrieval. <code>x_class_var_unique</code> Unique <code>section</code>, <code>descriptor</code> Ensures that each combination of <code>section</code> and <code>descriptor</code> is unique, preventing duplicate entries for the same section and descriptor."},{"location":"classes/x_class_var.html#methods-and-functions","title":"Methods and Functions","text":"<p>The following tables provide detailed information about each method and function in the <code>x_class_var</code> class, including their parameters and descriptions.</p>"},{"location":"classes/x_class_var.html#constructor","title":"Constructor","text":"Method Parameters Description <code>__construct</code> <code>$mysql</code> (x_class_mysql object), <code>$tablename</code> (string), <code>$section</code> (string), <code>$descriptor</code> (string, optional), <code>$value</code> (string, optional), <code>$description</code> (string, optional), <code>$sectionfield</code> (string, optional), <code>$idfield</code> (string, optional) Initializes the class with database connection and table configuration. Creates the table if it does not exist."},{"location":"classes/x_class_var.html#private-methods","title":"Private Methods","text":"Method Parameters Description <code>create_table</code> None Creates the table in the database if it does not exist."},{"location":"classes/x_class_var.html#public-methods","title":"Public Methods","text":"Method Parameters Description <code>init_constant</code> <code>$unserialize_arrays</code> (bool) Initializes constants from the database. Defines PHP constants for each entry. <code>get_array</code> None Retrieves an array of variable names and their values. <code>get_array_full</code> None Retrieves an array of all variables with full details from the database. <code>get_full</code> <code>$name</code> (string) Retrieves the full details of a specific variable by name. <code>exists</code> <code>$name</code> (string) Checks if a variable exists in the database. <code>get</code> <code>$name</code> (string) Retrieves the value of a specific variable by name. <code>del</code> <code>$name</code> (string) Deletes a variable from the database by name. <code>setup</code> <code>$name</code> (string), <code>$value</code> (mixed), <code>$description</code> (string, optional) Sets up a new variable if it does not exist. <code>add</code> <code>$name</code> (string), <code>$value</code> (mixed), <code>$description</code> (string, optional), <code>$overwrite</code> (bool, optional) Adds a new variable or updates it if it already exists, based on the <code>$overwrite</code> flag. <code>set</code> <code>$name</code> (string), <code>$value</code> (mixed), <code>$description</code> (string, optional), <code>$add</code> (bool, optional), <code>$overwrite</code> (bool, optional) Internal method to handle adding or updating variables. <code>form_start</code> <code>$precookie</code> (string, optional) Starts a new form for variable management with CSRF protection. <code>form_end</code> <code>$precookie</code> (string, optional) Ends the form and sets a CSRF token in the session. <code>form</code> <code>$varname</code> (string), <code>$type</code> (string, optional), <code>$selectarray</code> (array, optional), <code>$precookie</code> (string, optional), <code>$button_class</code> (string, optional), <code>$itemclass</code> (string, optional), <code>$editbuttonname</code> (string, optional) Generates and handles a form for editing a variable. Supports different input types."},{"location":"classes/x_class_var.html#example-usage","title":"Example Usage","text":""},{"location":"classes/x_class_var.html#constructing-the-class","title":"Constructing the Class","text":"<pre><code>$mysql = new x_class_mysql(...); // Assumes mysql_con is a valid class\n$var = new x_class_var($mysql, 'my_table', 'my_section');\n</code></pre>"},{"location":"classes/x_class_var.html#initializing-constants","title":"Initializing Constants","text":"<pre><code>$var-&gt;init_constant();\n</code></pre>"},{"location":"classes/x_class_var.html#adding-a-new-variable","title":"Adding a New Variable","text":"<pre><code>$var-&gt;add('MY_VAR', 'value', 'Description of MY_VAR');\n</code></pre>"},{"location":"classes/x_class_var.html#updating-an-existing-variable","title":"Updating an Existing Variable","text":"<pre><code>$var-&gt;setup('MY_VAR', 'new_value', 'Updated description');\n</code></pre>"},{"location":"classes/x_class_var.html#deleting-a-variable","title":"Deleting a Variable","text":"<pre><code>$var-&gt;del('MY_VAR');\n</code></pre>"},{"location":"classes/x_class_var.html#generating-a-form","title":"Generating a Form","text":"<pre><code>echo $var-&gt;form('MY_VAR', 'text', [], '', 'btn-primary', 'form-control');\n</code></pre>"},{"location":"classes/x_class_version.html","title":"PHP Version","text":""},{"location":"classes/x_class_version.html#class-documentation-x_class_version","title":"Class Documentation: <code>x_class_version</code>","text":""},{"location":"classes/x_class_version.html#documentation","title":"Documentation","text":"<p>The <code>x_class_version</code> class provides metadata about the version of the software. It includes information about the author, contact details, website, GitHub repository, and version number. This class is a straightforward way to manage and access version-related information.</p> <ul> <li>Immutable Properties: The properties of this class are public and intended to be set during class instantiation or directly accessed. They do not have setter methods to enforce changes.  </li> <li>No Methods: This class does not include methods for functionality beyond storing and accessing the provided information.  </li> </ul>"},{"location":"classes/x_class_version.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_version.html#php-modules","title":"PHP Modules","text":"<ul> <li>None: This class does not require any specific PHP modules.</li> </ul>"},{"location":"classes/x_class_version.html#external-classes","title":"External Classes","text":"<ul> <li>None: This class does not depend on any external classes.</li> </ul>"},{"location":"classes/x_class_version.html#class-properties","title":"Class Properties","text":""},{"location":"classes/x_class_version.html#autor","title":"<code>autor</code>","text":"Property Type Description <code>autor</code> string The name of the author of the software."},{"location":"classes/x_class_version.html#contact","title":"<code>contact</code>","text":"Property Type Description <code>contact</code> string The contact email for support or inquiries."},{"location":"classes/x_class_version.html#website","title":"<code>website</code>","text":"Property Type Description <code>website</code> string The official website for the software."},{"location":"classes/x_class_version.html#github","title":"<code>github</code>","text":"Property Type Description <code>github</code> string The GitHub repository URL for the software."},{"location":"classes/x_class_version.html#version","title":"<code>version</code>","text":"Property Type Description <code>version</code> string The current version number of the software."},{"location":"classes/x_class_version.html#beta","title":"<code>beta</code>","text":"Property Type Description <code>beta</code> boolean Indicates whether the version is a beta release."},{"location":"classes/x_class_version.html#example-usage","title":"Example Usage","text":"<p>Here's a simple example of how to use the <code>x_class_version</code> class:</p> <pre><code>// Create an instance of the x_class_version class\n$versionInfo = new x_class_version();\n\n// Access version information\necho \"Author: \" . $versionInfo-&gt;autor . \"\\n\";\necho \"Contact: \" . $versionInfo-&gt;contact . \"\\n\";\necho \"Website: \" . $versionInfo-&gt;website . \"\\n\";\necho \"GitHub: \" . $versionInfo-&gt;github . \"\\n\";\necho \"Version: \" . $versionInfo-&gt;version . \"\\n\";\necho \"Beta: \" . ($versionInfo-&gt;beta ? \"Yes\" : \"No\") . \"\\n\";\n</code></pre>"},{"location":"classes/x_class_zip.html","title":"PHP Zip","text":""},{"location":"classes/x_class_zip.html#class-documentation-x_class_zip","title":"Class Documentation: <code>x_class_zip</code>","text":""},{"location":"classes/x_class_zip.html#documentation","title":"Documentation","text":"<p>The <code>x_class_zip</code> class provides methods for compressing files and directories into ZIP archives and extracting them. It supports optional encryption and decryption of ZIP files using a provided encryption class. </p>"},{"location":"classes/x_class_zip.html#requirements","title":"Requirements","text":""},{"location":"classes/x_class_zip.html#php-modules","title":"PHP Modules","text":"<ul> <li><code>zip</code> (for ZIP file handling)  </li> <li><code>openssl</code> (for encryption and decryption, if used)</li> </ul>"},{"location":"classes/x_class_zip.html#external-classes","title":"External Classes","text":"<ul> <li><code>x_class_crypt</code> (optional; required for encryption and decryption functionality)</li> </ul>"},{"location":"classes/x_class_zip.html#class-methods","title":"Class Methods","text":""},{"location":"classes/x_class_zip.html#__construct","title":"<code>__construct(...)</code>","text":"<p>Description: Initializes an instance of the <code>x_class_zip</code> class.</p> Method Parameters Description <code>__construct</code> None Initializes the <code>x_class_zip</code> object."},{"location":"classes/x_class_zip.html#zip","title":"<code>zip(...)</code>","text":"<p>Description: Creates a ZIP archive from a file or directory. Optionally encrypts the ZIP file using an encryption class.</p> Parameter Type Description <code>file_source</code> <code>string</code> The path to the file or directory to be compressed. <code>file_destination_zip</code> <code>string</code> The path where the ZIP file will be created. <code>x_class_crypt</code> <code>object</code> (optional) An instance of an encryption class for encrypting the ZIP file. <code>cryptokey</code> <code>string</code> (optional) The key used for encryption, if encryption is enabled. <code>tempfile</code> <code>string</code> (optional) The path for a temporary file used during encryption. Defaults to <code>{file_destination_zip}.cryptzip</code>. <p>Returns: - <code>true</code> on success - <code>false</code> on failure</p> <p>The <code>zip()</code> method creates a ZIP archive from the specified file or directory. It supports optional encryption via an external encryption class.</p> <p>Example Usage: </p><pre><code>$zipper = new x_class_zip();\n$crypt = new x_class_crypt(); // Assuming x_class_crypt is properly defined\n$cryptokey = 'your-encryption-key';\n$zipper-&gt;zip('/path/to/source', '/path/to/destination.zip', $crypt, $cryptokey);\n</code></pre>"},{"location":"classes/x_class_zip.html#unzip","title":"<code>unzip(...)</code>","text":"<p>Description: Extracts a ZIP archive to a specified directory. Optionally decrypts the ZIP file using an encryption class.</p> Parameter Type Description <code>from</code> <code>string</code> The path to the ZIP file to be extracted. <code>to</code> <code>string</code> The directory where the files will be extracted. <code>x_class_crypt</code> <code>object</code> (optional) An instance of an encryption class for decrypting the ZIP file. <code>cryptokey</code> <code>string</code> (optional) The key used for decryption, if decryption is enabled. <code>tempfile</code> <code>string</code> (optional) The path for a temporary file used during decryption. Defaults to <code>{to}.cryptzip</code>. <p>Returns: - <code>true</code> on success - <code>false</code> on failure</p> <p>The <code>unzip()</code> method extracts a ZIP archive to a specified directory and supports optional decryption.</p> <p>Example Usage: </p><pre><code>$zipper = new x_class_zip();\n$crypt = new x_class_crypt(); // Assuming x_class_crypt is properly defined\n$cryptokey = 'your-encryption-key';\n$zipper-&gt;unzip('/path/to/source.zip', '/path/to/extract/directory', $crypt, $cryptokey);\n</code></pre>"},{"location":"css/index.html","title":"CSS Library","text":""},{"location":"css/index.html#css-classes","title":"CSS Classes","text":""},{"location":"css/index.html#documentation","title":"Documentation","text":"<p>Introducing the Bugfish CSS Framework \u2013 a solution for efficient web design. Simplify your development process with a comprehensive collection of pre-built classes, designed to expedite the creation of responsive web layouts. The Bugfish CSS Framework streamlines your design experience, making it faster and more professional. To use it, include the CSS files located in the <code>css</code> folder.</p> <p>Add <code>_f</code> to end of a class to make it important!</p>"},{"location":"css/index.html#library","title":"Library","text":""},{"location":"css/index.html#columnrows","title":"Column/Rows","text":"Class Description <code>.xfpe_row</code> Row Element (Put Col Elements in it to be placed next to each other) <code>.xfpe_col</code> Row Element without width configuration <code>.xfpe_col-1</code> Row Element 1/12 width <code>.xfpe_col-2</code> Row Element 2/12 width <code>.xfpe_col-3</code> Row Element 3/12 width <code>.xfpe_col-4</code> Row Element 4/12 width <code>.xfpe_col-5</code> Row Element 5/12 width <code>.xfpe_col-6</code> Row Element 6/12 width <code>.xfpe_col-7</code> Row Element 7/12 width <code>.xfpe_col-8</code> Row Element 8/12 width <code>.xfpe_col-9</code> Row Element 9/12 width <code>.xfpe_col-10</code> Row Element 10/12 width <code>.xfpe_col-11</code> Row Element 11/12 width <code>.xfpe_col-12</code> Row Element 12/12 width"},{"location":"css/index.html#background-colors","title":"Background Colors","text":"Class Description Possible Values <code>.xfpe_background*</code> Sets Background Color (Replace <code>*</code> with possible value) red, yellow, green, blue, orange, purple, pink, brown, black, white, gray, cyan, magenta, lime <code>.xfpe_background*_f</code> Forces Background Color (Replace <code>*</code> with possible value) red, yellow, green, blue, orange, purple, pink, brown, black, white, gray, cyan, magenta, lime"},{"location":"css/index.html#text-colors","title":"Text Colors","text":"Class Description Possible Values <code>.xfpe_color*</code> Sets Text Color (Replace <code>*</code> with possible value) red, yellow, green, blue, orange, purple, pink, brown, black, white, gray, cyan, magenta, lime <code>.xfpe_color*_f</code> Forces Text Color (Replace <code>*</code> with possible value) red, yellow, green, blue, orange, purple, pink, brown, black, white, gray, cyan, magenta, lime"},{"location":"css/index.html#margin-classes","title":"Margin Classes","text":"Padding / Margin Class Description Possible Values Max Value of N <code>.xfpe_paddingauto</code> Sets padding to \"auto\" for all sides <code>.xfpe_nopadding</code> Removes padding from all sides (sets to 0px) <code>.xfpe_nopaddingtop</code> Removes padding from the top (sets padding-top to 0px) <code>.xfpe_nopaddingbottom</code> Removes padding from the bottom (sets padding-bottom to 0px) <code>.xfpe_nopaddingleft</code> Removes padding from the left (sets padding-left to 0px) <code>.xfpe_nopaddingright</code> Removes padding from the right (sets padding-right to 0px) <code>.xfpe_paddingleft{N}px</code> Sets the left padding of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_paddingright{N}px</code> Sets the right padding of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_paddingleftm{N}px</code> Sets a negative left padding of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_paddingrightm{N}px</code> Sets a negative right padding of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_paddingbottom{N}px</code> Sets padding-bottom to a specific value in pixels (Xpx) N: 5, 10, 15, ... 150 <code>.xfpe_paddingbottomm{N}px</code> Sets negative padding-bottom to a specific value in pixels (-Xpx) N: 5, 10, 15, ... 150 <code>.xfpe_paddingtop{N}px</code> Sets padding-top to a specific value in pixels (Xpx) N: 5, 10, 15, ... 150 <code>.xfpe_paddingtopm{N}px</code> Sets negative padding-top to a specific value in pixels (-Xpx) N: 5, 10, 15, ... 150 <code>.xfpe_marginauto</code> Sets margin to \"auto\" for all sides <code>.xfpe_nomargin</code> Removes margin from all sides (sets to 0px) <code>.xfpe_nomargintop</code> Removes margin from the top (sets margin-top to 0px) <code>.xfpe_nomarginbottom</code> Removes margin from the bottom (sets margin-bottom to 0px) <code>.xfpe_nomarginleft</code> Removes margin from the left (sets margin-left to 0px) <code>.xfpe_nomarginright</code> Removes margin from the right (sets margin-right to 0px) <code>.xfpe_marginleft{N}px</code> Sets the left margin of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_marginright{N}px</code> Sets the right margin of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_marginleftm{N}px</code> Sets a negative left margin of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_marginrightm{N}px</code> Sets a negative right margin of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_margintop{N}px</code> Sets the top margin of the element to N pixels. N: 5, 10, 15, ... 150 <code>.xfpe_margintopm{N}px</code> Sets negative margin-top to a specific value in pixels (-Xpx) N: 5, 10, 15, ... 150 <code>.xfpe_marginbottom{N}px</code> Sets margin-bottom to a specific value in pixels (Xpx) N: 5, 10, 15, ... 150 <code>.xfpe_marginbottomm{N}px</code> Sets negative margin-bottom to a specific value in pixels (-Xpx) N: 5, 10, 15, ... 150"},{"location":"css/index.html#widthheight-classes","title":"Width/Height Classes","text":"Width / Height Class Description Possible Values Max Value of N <code>.xfpe_width{N}px</code> Sets the element's width to N pixels. N: 25, 50, 75, 100, ... 1000 <code>.xfpe_height{N}px</code> Sets the element's height to N pixels. N: 25, 50, 75, 100, ... 1000 <code>.xfpe_width{N}pct</code> Sets the element's width to N percentage. N: 25, 50, 75, 100, ... 100 <code>.xfpe_height{N}pct</code> Sets the element's height to N percentage. N: 25, 50, 75, 100, ... 100 <code>.xfpe_maxwidth{N}pct</code> Sets the element's width to N percentage of parent. N: 25, 50, 100 100 <code>.xfpe_maxwidth{N}px</code> Sets the maximum width of the element to N pixels. N: 50, 100, 150, ... 1000 <code>.xfpe_minwidth{N}px</code> Sets the minimum width of the element to N pixels. N: 50, 100, 150, ... 1000 <code>.xfpe_minwidth{N}pct</code> Sets the minimum width of the element to N percentage of parent. N: 25, 50, 75, 100, ... 100"},{"location":"css/index.html#font-size","title":"Font Size","text":"Font Size Class Description Possible Values Max Value of N <code>.xfpe_fontsize{N}px</code> Sets font size to N pixels. N: 10, 20, 30, 40, 50, ... 100 <code>.xfpe_fontsize{N}pct</code> Sets font size to N percentage. N: 25, 50, 75, 100, ... 100"},{"location":"css/index.html#display","title":"Display","text":"Class Name Description <code>.xfpe_dispinlineblock</code> <code>display: inline-block;</code> <code>.xfpe_dispinline</code> <code>display: inline;</code> <code>.xfpe_dispblock</code> <code>display: block;</code> <code>.xfpe_dispnone</code> <code>display: none;</code> (Hides the element) <code>.xfpe_dispflex</code> <code>display: flex;</code> (Enables flexbox layout) <code>.xfpe_dispgrid</code> <code>display: grid;</code> (Enables grid layout) <code>.xfpe_dispinlineflex</code> <code>display: inline-flex;</code> (Inline flexbox layout) <code>.xfpe_dispinlinegrid</code> <code>display: inline-grid;</code> (Inline grid layout)"},{"location":"css/index.html#float","title":"Float","text":"Class Name Description <code>.xfpe_floatleft</code> <code>float: left;</code> <code>.xfpe_floatleft_f</code> <code>float: left !important;</code> <code>.xfpe_floatright</code> <code>float: right;</code> <code>.xfpe_floatright_f</code> <code>float: right !important;</code> <code>.xfpe_floatnone</code> <code>float: none;</code> (Clears any previous float) <code>.xfpe_floatinherit</code> <code>float: inherit;</code> (Inherits the float property) <code>.xfpe_floatinitial</code> <code>float: initial;</code> (Sets to default value) <code>.xfpe_floatunset</code> <code>float: unset;</code> (Resets to inherited value)"},{"location":"css/index.html#overflow","title":"Overflow","text":"Class Name Description <code>.xfpe_overflowhidden</code> <code>overflow: hidden;</code> <code>.xfpe_overflowhidden_f</code> <code>overflow: hidden !important;</code> <code>.xfpe_overflowscroll</code> <code>overflow: scroll;</code> <code>.xfpe_overflowscroll_f</code> <code>overflow: scroll !important;</code> <code>.xfpe_overflowvisible</code> <code>overflow: visible;</code> (Shows content overflowing) <code>.xfpe_overflowauto</code> <code>overflow: auto;</code> (Adds scrollbars if needed) <code>.xfpe_overflowxhidden</code> <code>overflow-x: hidden;</code> <code>.xfpe_overflowxhidden_f</code> <code>overflow-x: hidden !important;</code> <code>.xfpe_overflowxscroll</code> <code>overflow-x: scroll;</code> <code>.xfpe_overflowxscroll_f</code> <code>overflow-x: scroll !important;</code> <code>.xfpe_overflowyhidden</code> <code>overflow-y: hidden;</code> <code>.xfpe_overflowyhidden_f</code> <code>overflow-y: hidden !important;</code> <code>.xfpe_overflowyscroll</code> <code>overflow-y: scroll;</code> <code>.xfpe_overflowyscroll_f</code> <code>overflow-y: scroll !important;</code>"},{"location":"css/index.html#text-adjustments","title":"Text Adjustments","text":"Class Name Description <code>.xfpe_textbreakall</code> <code>white-space: pre; word-break: break-all;</code> <code>.xfpe_textbreakall_f</code> <code>white-space: pre !important; word-break: break-all !important;</code> <code>.xfpe_textnowrap</code> <code>white-space: nowrap;</code> <code>.xfpe_textnowrap_f</code> <code>white-space: nowrap !important;</code> <code>.xfpe_textuppercase</code> <code>text-transform: uppercase;</code> <code>.xfpe_textuppercase_f</code> <code>text-transform: uppercase !important;</code> <code>.xfpe_textlowercase</code> <code>text-transform: lowercase;</code> <code>.xfpe_textlowercase_f</code> <code>text-transform: lowercase !important;</code> <code>.xfpe_textcapitalize</code> <code>text-transform: capitalize;</code> <code>.xfpe_textcapitalize_f</code> <code>text-transform: capitalize !important;</code>"},{"location":"css/index.html#align-adjustments","title":"Align Adjustments","text":"Class Name Description <code>.xfpe_aligncenter</code> <code>text-align: center;</code> <code>.xfpe_aligncenter_f</code> <code>text-align: center !important;</code> <code>.xfpe_alignleft</code> <code>text-align: left;</code> <code>.xfpe_alignleft_f</code> <code>text-align: left !important;</code> <code>.xfpe_alignright</code> <code>text-align: right;</code> <code>.xfpe_alignright_f</code> <code>text-align: right !important;</code> <code>.xfpe_alignjustify</code> <code>text-align: justify;</code> <code>.xfpe_alignjustify_f</code> <code>text-align: justify !important;</code> <code>.xfpe_verticalalignmiddle</code> <code>vertical-align: middle;</code> <code>.xfpe_verticalalignmiddle_f</code> <code>vertical-align: middle !important;</code> <code>.xfpe_verticalaligntop</code> <code>vertical-align: top;</code> <code>.xfpe_verticalaligntop_f</code> <code>vertical-align: top !important;</code> <code>.xfpe_verticalalignbottom</code> <code>vertical-align: bottom;</code> <code>.xfpe_verticalalignbottom_f</code> <code>vertical-align: bottom !important;</code> <code>.xfpe_alignbaseline</code> <code>vertical-align: baseline;</code> <code>.xfpe_alignbaseline_f</code> <code>vertical-align: baseline !important;</code>"},{"location":"css/index.html#cursor","title":"Cursor","text":"Class Name Description <code>.xfpe_cursorpointer</code> <code>cursor: pointer;</code> <code>.xfpe_cursorpointer_f</code> <code>cursor: pointer !important;</code> <code>.xfpe_cursordefault</code> <code>cursor: default;</code> (Default cursor, usually an arrow) <code>.xfpe_cursorauto</code> <code>cursor: auto;</code> (Automatically sets cursor based on the element) <code>.xfpe_cursorcrosshair</code> <code>cursor: crosshair;</code> (Crosshair cursor) <code>.xfpe_cursorhelp</code> <code>cursor: help;</code> (Help cursor, usually a question mark) <code>.xfpe_cursormove</code> <code>cursor: move;</code> (Move cursor) <code>.xfpe_cursornotallowed</code> <code>cursor: not-allowed;</code> (Not-allowed cursor) <code>.xfpe_cursorprogress</code> <code>cursor: progress;</code> (Progress cursor) <code>.xfpe_cursortext</code> <code>cursor: text;</code> (Text cursor, usually an I-beam) <code>.xfpe_cursorwait</code> <code>cursor: wait;</code> (Wait cursor) <code>.xfpe_cursoralias</code> <code>cursor: alias;</code> (Alias cursor) <code>.xfpe_cursorcopy</code> <code>cursor: copy;</code> (Copy cursor) <code>.xfpe_cursorzoomin</code> <code>cursor: zoom-in;</code> (Zoom-in cursor) <code>.xfpe_cursorzoomout</code> <code>cursor: zoom-out;</code> (Zoom-out cursor) <code>.xfpe_cursorgrab</code> <code>cursor: grab;</code> (Grab cursor) <code>.xfpe_cursorgrabbing</code> <code>cursor: grabbing;</code> (Grabbing cursor)"},{"location":"css/index.html#border","title":"Border","text":"Class Name Description <code>.xfpe_bordernone</code> <code>border: none;</code> <code>.xfpe_bordernone_f</code> <code>border: none !important;</code> <code>.xfpe_outlinenone</code> <code>outline: none;</code> <code>.xfpe_outlinenone_f</code> <code>outline: none !important;</code>"},{"location":"css/index.html#position","title":"Position","text":"Class Name Description <code>.xfpe_absolute</code> <code>position: absolute;</code> <code>.xfpe_absolute_f</code> <code>position: absolute !important;</code> <code>.xfpe_fixed</code> <code>position: fixed;</code> <code>.xfpe_fixed_f</code> <code>position: fixed !important;</code> <code>.xfpe_relative</code> <code>position: relative;</code> <code>.xfpe_relative_f</code> <code>position: relative !important;</code> <code>.xfpe_static</code> <code>position: static;</code> <code>.xfpe_static_f</code> <code>position: static !important;</code> <code>.xfpe_sticky</code> <code>position: sticky;</code> <code>.xfpe_sticky_f</code> <code>position: sticky !important;</code>"},{"location":"css/index.html#optimization","title":"Optimization","text":"Class Name Description <code>.xfpe_t3d</code> <code>-webkit-transform: translate3d(0, 0, 0); transform: translate3d(0, 0, 0);</code> (Enables hardware acceleration) <code>.xfpe_t3d_f</code> <code>-webkit-transform: translate3d(0, 0, 0) !important; transform: translate3d(0, 0, 0) !important;</code> (Enables hardware acceleration with <code>!important</code>) <code>.xfpe_borderbox</code> <code>-webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;</code> (Includes padding and border in element's total width and height) <code>.xfpe_borderbox_f</code> <code>-webkit-box-sizing: border-box !important; -moz-box-sizing: border-box !important; box-sizing: border-box !important;</code> (Includes padding and border in element's total width and height with <code>!important</code>)"},{"location":"functions/index.html","title":"PHP Library","text":""},{"location":"functions/index.html#php-functions","title":"PHP Functions","text":""},{"location":"functions/index.html#documentation","title":"Documentation","text":"<p>Discover a collection of indispensable PHP functions crafted for seamless integration across various projects. Witness how these functions expedite and refine coding processes within web development. Comprehensive documentation for each function is provided below. To incorporate these functions seamlessly, include the PHP files within the designated <code>_functions</code> subfolder in the overarching <code>_framework</code> folder. This strategic approach optimizes coding efficiency and enhances web project performance.</p> <p>Presenting our professional PHP Function Library, a valuable resource brimming with functions tailored for swift website deployment and efficiency. Explore the comprehensive collection within our framework's <code>/framework/functions/x_*</code> directory to streamline your development process and enhance your website's performance.</p>"},{"location":"functions/index.html#curl-functions","title":"CURL Functions","text":"<p>Functions to work with fast Curl Requests inside <code>x_curl.php</code>:</p> CURL Function Name Description <code>x_curl_getfile($file, $newFileName)</code> Download a file with Curl and save to <code>NewFileName</code>. <code>x_curl_gettext($url)</code> Get text content of a Curl request to URL."},{"location":"functions/index.html#thumbnail-functions","title":"Thumbnail Functions","text":"<p>Functions to generate/work with thumbnails inside <code>x_library.php</code>:</p> Thumbnail Function Name Description <code>x_thumbnail</code> Creates a thumbnail image from a URL and saves it to a file. Parameters include: - <code>url</code>: The URL of the image to create a thumbnail from. - <code>filename</code>: The filename for the saved thumbnail. - <code>width</code>: The width of the thumbnail. - <code>height</code>: The height of the thumbnail (or <code>true</code> to maintain aspect ratio). <code>x_thumbnail_save</code> Creates a thumbnail image from a URL and optionally saves it to a file. Parameters include: - <code>url</code>: The URL of the image to create a thumbnail from. - <code>save_path</code>: An optional path to save the thumbnail file. - <code>width</code>: The width of the thumbnail. - <code>height</code>: The height of the thumbnail (or <code>true</code> to maintain aspect ratio)."},{"location":"functions/index.html#library-functions","title":"Library Functions","text":"<p>Some functions that do not fit into other sections inside <code>x_library.php</code>:</p>"},{"location":"functions/index.html#various-functions","title":"Various Functions","text":"Library Function Name Description Parameter <code>x_copy_directory($src, $dst)</code> Copy content of a folder recursively to another folder. - <code>src</code>: Folder Path (FULL) to Copy.- <code>dst</code>: Destination Folder Name to Copy to. <code>x_htaccess_secure($path)</code> Secure a folder by placing an <code>.htaccess</code> file to deny folder content. - <code>path</code>: Path where the <code>.htaccess</code> should be placed. <code>x_getRelativeFolderFromURL($url)</code> Extract relative path from full URL string. - <code>url</code>: The URL the relative folder should be extracted from. <code>x_firstimagetext</code> Get first image out of \"a\" tag from text string. - <code>text</code>: Input text containing HTML.- <code>all</code>: Whether to return all image tags or just the first one. <code>x_connection_check</code> Check a connection with <code>fsockopen</code>. - <code>host</code>: Hostname or IP address to check the connection to.- <code>port</code>: Port number to check.- <code>timeout</code>: Timeout duration in seconds. <code>x_inCLI</code> Check if the current script execution is handled via CGI and not in a web browser. Checks if the script is running in a Command Line Interface (CLI) environment and returns <code>true</code> if it is, <code>false</code> otherwise. <code>x_rmdir</code> Recursively delete a folder. - <code>dir</code>: Directory path to be deleted recursively. <code>x_html_redirect</code> Spawn HTML redirect meta tag for simple HTML redirects. - <code>url</code>: URL to redirect to.- <code>seconds</code>: Number of seconds before the redirection occurs."},{"location":"functions/index.html#validation-functions","title":"Validation Functions","text":"Function Description Explanation <code>x_isset($val)</code> Checks if a value is not null and has a length greater than 0 after trimming. The function returns <code>true</code> if <code>$val</code> is set, is not empty after trimming, and has a length greater than 0. The <code>@</code> operator suppresses errors in case <code>$val</code> is undefined, and the null coalescing operator (<code>??</code>) ensures a fallback to an empty string if <code>$val</code> is null. <code>x_imgValid($url)</code> Validates if a string is a valid image URL by checking its existence and if it is an image. The function checks if <code>$url</code> is set and is a string with a length greater than 3. It then attempts to fetch the image size using <code>getimagesize()</code>, which confirms if the URL points to a valid image. If these conditions aren't met, it returns <code>false</code>. <code>x_hsc($string)</code> Safely encodes special characters in a string to HTML entities. The function uses <code>htmlspecialchars()</code> to convert special characters to HTML entities, helping to prevent XSS attacks. If <code>$string</code> is null or undefined, it defaults to an empty string. <code>x_het($string)</code> Converts all applicable characters in a string to HTML entities. The function uses <code>htmlentities()</code> to convert all applicable characters to HTML entities, ensuring that the string is safe for output in an HTML context. Similar to <code>x_hsc()</code>, it handles null or undefined values gracefully. <code>x_trim($string)</code> Trims whitespace from both sides of a string. The function uses <code>trim()</code> to remove whitespace from the beginning and end of the string. The <code>@</code> operator handles cases where <code>$string</code> might be undefined. <code>x_contains_cyrillic($val)</code> Checks if a string contains Cyrillic characters. The function uses a regular expression to check if <code>$val</code> contains any Cyrillic characters. If it does, it returns <code>true</code>; otherwise, it returns <code>false</code>. The regular expression pattern <code>[\\p{Cyrillic}]</code> matches any Cyrillic character. <code>x_contains_bad_word($val)</code> Checks if a string contains the word \"porn\" or \"Porn\". The function checks if the string contains \" porn \" or \" Porn \" (with spaces around). If either is found, the function returns <code>false</code> (indicating it's a \"bad\" word). If neither is found, it returns <code>true</code>. <code>x_contains_url($val)</code> Checks if a string contains an HTTP or HTTPS URL. The function looks for the substrings \"http://\" or \"https://\" within <code>$val</code>. If found, it returns <code>false</code> (indicating that a URL is present). If neither is found, it returns <code>true</code>. <code>x_getint($val)</code> Retrieves a value from the <code>$_GET</code> array if it's numeric. The function checks if the value associated with the key <code>$val</code> in the <code>$_GET</code> array is numeric. If it is, it returns the value; otherwise, it returns <code>false</code>. The <code>@</code> operator handles cases where the key does not exist. <code>x_postint($val)</code> Retrieves a value from the <code>$_POST</code> array if it's numeric. Similar to <code>x_getint()</code>, this function checks if the value associated with the key <code>$val</code> in the <code>$_POST</code> array is numeric. If so, it returns the value; otherwise, it returns <code>false</code>. The <code>@</code> operator handles cases where the key does not exist. <code>x_get($val)</code> Retrieves a value from the <code>$_GET</code> array if it exists. The function checks if the key <code>$val</code> exists in the <code>$_GET</code> array. If it does, it returns the corresponding value; otherwise, it returns <code>false</code>. The <code>@</code> operator handles undefined keys. <code>x_post($val)</code> Retrieves a value from the <code>$_POST</code> array if it exists. Similar to <code>x_get()</code>, this function checks if the key <code>$val</code> exists in the <code>$_POST</code> array. If it does, it returns the corresponding value; otherwise, it returns <code>false</code>. The <code>@</code> operator handles undefined keys. <code>x_datediff_before($d1, $d2, $length)</code> Checks if the difference between two dates is greater than a specified length (in days). The function calculates the difference between two dates (<code>$d1</code> and <code>$d2</code>) and returns <code>true</code> if the difference (in days) is greater than <code>$length</code>. If either date is <code>false</code>, it returns <code>false</code>. The <code>date_diff()</code> function is used to calculate the interval, and <code>format('%a')</code> returns the difference in days."},{"location":"functions/index.html#button-functions","title":"Button Functions","text":"<p>Functions to work with buttons, which can execute code and more inside <code>x_button.php</code>:</p> Function Description Explanation <code>x_executionButton($db, $name, $url, $query, $get, $msgerr = \"Fehler!\", $msgok = \"Erfolgreich!\", $break = false, $style = \"\")</code> Creates an execution button that performs a database query when clicked and refreshes the page. The function constructs a URL with the specified <code>$get</code> parameter and generates an anchor tag (<code>&lt;a&gt;</code>) styled as a button. If the URL contains the query parameter <code>?</code>, it appends the <code>$get</code> parameter; otherwise, it adds it. If the button is clicked, it checks for the <code>$get</code> parameter in <code>$_GET</code>. If found, it executes the given SQL query using the database connection (<code>$db</code>). If successful, it refreshes the page with the updated URL after removing the <code>$get</code> parameter. <code>x_button($name, $url, $break = false, $style = \"\", $reacttourl = true)</code> Creates a simple button that links to a specified URL, optionally applying a different style if the current URL matches the link. The function generates an anchor tag (<code>&lt;a&gt;</code>) styled as a button, with the specified <code>$url</code> and <code>$name</code>. If <code>$reacttourl</code> is <code>true</code> and the current URL matches the <code>$url</code>, the button style is modified to indicate it as inactive. Optionally, the button can be followed by a line break if <code>$break</code> is <code>true</code>."},{"location":"functions/index.html#eventbox-functions","title":"Eventbox Functions","text":"<p>Functions to spawn notification boxes for users inside <code>x_eventbox.php</code>:</p> Function Description Explanation <code>x_eventBoxPrep($text, $type = \"x\", $precookie = \"\", $morecss = \"\", $buttontext = \"X\", $imgok = false, $imgfail = false, $imgwarn = false, $imgelse = false)</code> Prepares an event box with specified text, style, and optional images, saving it to a session variable for later display. The function creates an event box with a message (<code>$text</code>) and a specific type (<code>$type</code>), such as \"success\", \"warning\", or \"error\". It can include an image depending on the type. The event box's HTML and CSS are generated, including a close button (<code>$buttontext</code>). The generated content is stored in a session variable (<code>$_SESSION</code>) using the prefix <code>$precookie</code>. The box styling can be customized with the <code>$morecss</code> parameter. <code>x_eventBoxShow($precookie = \"\")</code> Displays the prepared event box by echoing the stored session variable, then clears the session variable. The function checks if the event box should be skipped (using a session variable). If not, it echoes the HTML stored in the session variable created by <code>x_eventBoxPrep()</code>, then unsets (deletes) the session variable to prevent repeated display. The <code>$precookie</code> parameter allows handling of multiple event boxes with different prefixes. <code>x_eventBoxSet($precookie = \"\")</code> Checks if an event box has been prepared and is stored in the session. The function checks if a session variable for an event box exists, returning <code>true</code> if it does and <code>false</code> otherwise. This can be used to determine if an event box has already been prepared. The <code>$precookie</code> parameter allows for checking different prefixed session variables. <code>x_eventBoxSkip($precookie = \"\")</code> Sets a session variable to skip displaying the event box. The function sets a session variable that prevents the event box from being displayed. This is useful if the event box should be temporarily skipped without clearing its content. The <code>$precookie</code> parameter allows this behavior to be controlled for specific prefixed event boxes."},{"location":"functions/index.html#cookie-banner-functions","title":"Cookie Banner Functions","text":"<p>Function to spawn a simple cookie banner for users inside <code>x_cookiebanner.php</code>:</p> Function Description Explanation <code>x_cookieBanner_Pre($precookie = \"\", $redirect = true)</code> Prepares the cookie banner by setting a session variable if the banner is acknowledged, and optionally redirects to the current page. The function checks if a session is active; if not, it starts one. It then checks if the cookie banner has been acknowledged by looking for a specific session variable. If the banner is acknowledged (via POST or GET request), it sets this session variable and optionally redirects to the current page. This helps to prevent showing the banner repeatedly after acknowledgment. <code>x_cookieBanner($precookie = \"\", $use_post = false, $text = false, $url_cookies = \"\", $redirect_url = false, $button_text = \"I Agree\")</code> Displays a cookie consent banner with options for custom text, a redirect URL, and POST/GET submission handling. The function checks if a session is active; if not, it starts one. It determines whether to display the banner based on a session variable. If the banner is not acknowledged, it displays the banner with customizable text. The form can use GET or POST methods depending on the <code>$use_post</code> parameter. If a <code>$redirect_url</code> is provided, the form action will redirect to this URL upon submission. The <code>$button_text</code> parameter sets the button label."},{"location":"functions/index.html#rss-functions","title":"RSS Functions","text":"<p>Functions related to RSS feeds inside <code>x_rss.php</code>:</p> Function Description Explanation <code>x_rss_list($urltemp, $defaultcover, $limit = 25)</code> Fetches RSS feed items from a given URL, processes them, and displays them with a default cover image if needed. Limits the number of items displayed. The function loads the RSS feed from the provided URL (<code>$urltemp</code>) using <code>DOMDocument</code>. It extracts the title, link, publication date, and image URL from each feed item. It processes up to <code>$limit</code> items, ensuring that if no cover image is provided, a default image (<code>$defaultcover</code>) is used. It formats the date and displays each item as a clickable div with an image and title. If the image URL does not start with \"http\", it prepends \"https://\". <code>x_rss_array($urltemp)</code> Fetches RSS feed items from a given URL and returns them as an array. The function loads the RSS feed from the provided URL (<code>$urltemp</code>) using <code>DOMDocument</code>. It extracts the title, link, publication date, and image URL from each feed item and stores them in an associative array. The resulting array of feed items is returned. This array can be used for further processing or display."},{"location":"functions/index.html#table-functions","title":"Table Functions","text":"<p>Functions to spawn tables inside <code>x_table.php</code>:</p> Function Description Explanation <code>x_table_div($array, $titlelist, $alignarray = false, $percentarray = false, $title = false)</code> Renders a styled table in a <code>div</code> container, with customizable column alignment, width percentages, and optional title. The function creates a <code>div</code> containing a table with column titles and rows of data. It starts by optionally displaying a title. Column titles are styled based on alignment (<code>$alignarray</code>) and width percentages (<code>$percentarray</code>). It then populates rows of the table using data from <code>$array</code>, alternating row colors. Each column's width and alignment are controlled by the given parameters. If no cover image is provided, a default image is used. <code>x_table_complex($array, $titlelist, $formid = \"\", $alignarray = false)</code> Generates a table with search functionality, allowing filtering of data through input fields in the table headers. This function creates an HTML form with a table that includes search input fields in the headers. Each input field corresponds to a column in the table and allows users to filter rows based on their input. The table displays rows from <code>$array</code> that match the search criteria. The <code>$formid</code> parameter helps generate a unique ID for the form. Data filtering is performed using POST requests and the search fields' values. <code>x_table_simple($array, $titlelist, $tableid = \"x_table_simple\", $alignarray = false)</code> Displays a simple table with specified column titles and alignment, and an optional ID for the table. The function generates a basic HTML table with headers and rows from <code>$array</code>. It allows for customizable column alignment through <code>$alignarray</code> and sets the table ID via <code>$tableid</code>. If <code>$array</code> is empty, a message indicating no data is shown. Each cell's text alignment is determined based on the provided alignment array or defaults to left, right, or center. The table displays data without additional styling or features."},{"location":"functions/index.html#captcha-functions","title":"Captcha Functions","text":"<p>Functions to spawn captchas inside <code>x_captcha.php</code>:</p> Function Description Explanation <code>x_captcha($preecookie = \"\", $width = 550, $height = 250, $square_count = 5, $eclipse_count = 5, $color_ar = false, $font = \"\", $code = \"\")</code> Generates a CAPTCHA image with customizable dimensions, shapes, colors, and text. The function creates a CAPTCHA image for verification purposes. It initializes colors for squares, ellipses, background, and text. It then creates an image of specified dimensions and draws randomly placed squares and ellipses. The CAPTCHA code is stored in the session and rendered onto the image using a specified font. Headers are set to prevent caching of the image. The resulting image is output as JPEG. <code>x_captcha_key($preecookie = \"\")</code> Retrieves the CAPTCHA code stored in the session. This function returns the CAPTCHA code stored in the session variable specified by <code>$preecookie</code>. This allows for the comparison of user input against the generated CAPTCHA code to verify correctness."},{"location":"functions/index.html#search-functions","title":"Search Functions","text":"<p>Warning: This function is experimental! Functions to search with scoring inside <code>x_search.php</code>:</p> Section Description Function Signature <code>function x_search($mysql, $table, $search_fields = array(), $get_fields = array(), $search_string = \"\", $uniqueref = \"id\")</code> Purpose Searches a database table based on a search string, scores the results, and returns them sorted by relevance. Parameters - <code>$mysql</code>: Database connection object.  - <code>$table</code>: Name of the table to search.  - <code>$search_fields</code>: Fields to search within.  - <code>$get_fields</code>: Fields to return in the results.  - <code>$search_string</code>: The search term or terms.  - <code>$uniqueref</code>: Unique identifier field for sorting. Abort Condition Checks if the search string is empty or null. If true, returns <code>false</code>. Trim Search String Removes extra whitespace from the search string. Split Search String Splits the search string into an array of terms if it contains spaces; otherwise, treats it as a single term. Initialize Query and Bind Array Prepares the SQL query and binds array for parameterized queries. Build Query Constructs the SQL query with conditions for each search term.  - For the first term, includes specific fields.  - For subsequent terms, adds conditions for additional search fields. Prepare Bind Array Adds each search term to the binding array for the SQL query. Execute Query Executes the SQL query using the <code>$mysql</code> object and retrieves the results. Score Calculation Calculates a relevance score for each result based on term frequency and weight. Sort Results Sorts the results by the calculated score in descending order using <code>array_multisort()</code>. Return Results Constructs and returns an array of results sorted by relevance. Fallback Returns an empty array if no results are found or if the scoring array is empty."},{"location":"javascript/index.html","title":"JS Library","text":""},{"location":"javascript/index.html#javascript-library","title":"Javascript Library","text":""},{"location":"javascript/index.html#documentation","title":"Documentation","text":"<p>Access a comprehensive array of JavaScript functions designed for integration across diverse projects, enhancing coding speed and efficiency in web development. Detailed documentation for each function is provided below. To incorporate these functions, include the JavaScript file in the <code>_javascript</code> subfolder within the central <code>_framework</code> folder. This implementation optimizes your coding process and elevates your web project's performance. Simplify your coding with our library of pre-built functions and modules, crafted to expedite the creation of dynamic, interactive web applications. Find the JavaScript function file in: <code>/_framework/javascript/*.js</code>!</p>"},{"location":"javascript/index.html#function-explanation","title":"Function Explanation","text":"Function Explanation Parameters <code>xjs_get(param)</code> Extracts the value of a specific GET parameter from the URL. <code>param</code> (String): The name of the GET parameter to retrieve. <code>xjs_in_url(param)</code> Checks if a given string exists within the current URL. <code>param</code> (String): The string to search for within the URL. <code>xjs_hide_id(id)</code> Hides an HTML element with a specified ID by modifying its CSS property. <code>id</code> (String): The ID of the HTML element to hide. <code>xjs_show_id(id)</code> Shows a hidden HTML element with a specified ID by altering its CSS property. <code>id</code> (String): The ID of the HTML element to show. <code>xjs_toggle_id(id)</code> Toggles the visibility of an HTML element with a specified ID. <code>id</code> (String): The ID of the HTML element to toggle. <code>xjs_is_email(email)</code> Checks if a given string represents a valid email address using a regular expression pattern. <code>email</code> (String): The email address to validate. <code>xjs_popup(var_text, var_entrie)</code> Dynamically creates a customizable popup element with an optional close button. <code>var_text</code> (String): The content to display in the popup.<code>var_entrie</code> (String, optional): The text for the close button (default is \"Close\"). <code>xjs_genkey(length, charset)</code> Generates random passwords of a specified length using characters from a character set. <code>length</code> (Number, optional): The length of the generated password (default is 12).<code>charset</code> (String, optional): The character set for password generation (default includes letters and digits). <code>xjs_dropdown_sort_abc(idname)</code> Sorts the options of a dropdown menu alphabetically. <code>idname</code> (String): The ID of the select element to be sorted."}]}